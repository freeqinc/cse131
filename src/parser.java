
//----------------------------------------------------
// The following code was generated by CUP v0.10k TUM Edition 20050516
// Wed Dec 02 07:01:28 PST 2015
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.Vector;
import types.*;
import STO.*;
import operators.*;
import scope.*;

/** CUP v0.10k TUM Edition 20050516 generated parser.
  * @version Wed Dec 02 07:01:28 PST 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\322\000\002\125\002\000\002\003\004\000\002\002" +
    "\004\000\002\004\003\000\002\004\002\000\002\005\003" +
    "\000\002\005\004\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\126\002\000\002\011\010\000\002\127" +
    "\002\000\002\130\002\000\002\012\012\000\002\131\002" +
    "\000\002\132\002\000\002\012\012\000\002\133\002\000" +
    "\002\134\002\000\002\012\012\000\002\135\002\000\002" +
    "\013\012\000\002\136\002\000\002\013\012\000\002\050" +
    "\003\000\002\050\002\000\002\137\002\000\002\140\002" +
    "\000\002\141\002\000\002\014\015\000\002\017\003\000" +
    "\002\017\004\000\002\020\006\000\002\113\003\000\002" +
    "\113\002\000\002\114\003\000\002\114\004\000\002\021" +
    "\003\000\002\021\003\000\002\142\002\000\002\143\002" +
    "\000\002\015\013\000\002\144\002\000\002\016\012\000" +
    "\002\022\003\000\002\022\002\000\002\023\003\000\002" +
    "\023\004\000\002\024\003\000\002\145\002\000\002\146" +
    "\002\000\002\147\002\000\002\007\020\000\002\150\002" +
    "\000\002\151\002\000\002\010\015\000\002\103\003\000" +
    "\002\103\003\000\002\104\003\000\002\104\004\000\002" +
    "\101\004\000\002\100\003\000\002\100\003\000\002\100" +
    "\003\000\002\102\003\000\002\105\003\000\002\105\003" +
    "\000\002\107\003\000\002\107\002\000\002\110\003\000" +
    "\002\110\004\000\002\044\003\000\002\115\003\000\002" +
    "\115\002\000\002\116\003\000\002\116\004\000\002\045" +
    "\005\000\002\152\002\000\002\153\002\000\002\026\007" +
    "\000\002\117\003\000\002\117\002\000\002\120\003\000" +
    "\002\120\004\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\004\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\121\003\000\002\121\002\000\002\122\003\000\002\122" +
    "\005\000\002\154\002\000\002\075\007\000\002\047\003" +
    "\000\002\047\002\000\002\077\004\000\002\077\002\000" +
    "\002\031\006\000\002\032\005\000\002\111\003\000\002" +
    "\111\002\000\002\112\006\000\002\155\002\000\002\156" +
    "\002\000\002\027\010\000\002\030\004\000\002\030\002" +
    "\000\002\157\002\000\002\160\002\000\002\034\007\000" +
    "\002\161\002\000\002\033\014\000\002\162\002\000\002" +
    "\035\005\000\002\163\002\000\002\036\005\000\002\037" +
    "\007\000\002\040\004\000\002\040\005\000\002\041\006" +
    "\000\002\042\006\000\002\106\003\000\002\106\005\000" +
    "\002\043\003\000\002\043\003\000\002\076\003\000\002" +
    "\123\003\000\002\123\002\000\002\124\003\000\002\124" +
    "\005\000\002\060\005\000\002\060\003\000\002\164\002" +
    "\000\002\061\006\000\002\061\003\000\002\165\002\000" +
    "\002\062\006\000\002\062\003\000\002\063\005\000\002" +
    "\063\003\000\002\064\005\000\002\064\003\000\002\065" +
    "\005\000\002\065\003\000\002\066\005\000\002\066\003" +
    "\000\002\067\005\000\002\067\003\000\002\070\005\000" +
    "\002\070\003\000\002\071\005\000\002\071\003\000\002" +
    "\056\003\000\002\056\003\000\002\053\003\000\002\053" +
    "\003\000\002\053\003\000\002\053\003\000\002\051\003" +
    "\000\002\051\003\000\002\052\003\000\002\052\003\000" +
    "\002\052\003\000\002\054\003\000\002\054\003\000\002" +
    "\055\003\000\002\055\003\000\002\072\004\000\002\072" +
    "\004\000\002\072\004\000\002\072\004\000\002\072\006" +
    "\000\002\072\007\000\002\072\006\000\002\072\004\000" +
    "\002\072\003\000\002\073\005\000\002\073\006\000\002" +
    "\073\005\000\002\073\004\000\002\073\006\000\002\073" +
    "\003\000\002\074\005\000\002\074\003\000\002\074\003" +
    "\000\002\074\003\000\002\074\003\000\002\074\003\000" +
    "\002\074\003\000\002\074\003\000\002\074\004\000\002" +
    "\074\003\000\002\057\003\000\002\057\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u015b\000\030\002\001\010\001\012\001\021\001\031" +
    "\001\033\001\035\001\041\001\072\001\073\001\106\001" +
    "\001\002\000\004\002\u015d\001\002\000\030\002\ufffd\010" +
    "\uffe4\012\uffe4\021\uffe4\031\007\033\uffe4\035\011\041\uffe4" +
    "\072\015\073\012\106\uffe4\001\002\000\030\002\ufff6\010" +
    "\ufff6\012\ufff6\021\ufff6\031\ufff6\033\ufff6\035\ufff6\041\ufff6" +
    "\072\ufff6\073\ufff6\106\ufff6\001\002\000\012\012\033\033" +
    "\035\035\u014e\041\036\001\002\000\030\002\ufff7\010\ufff7" +
    "\012\ufff7\021\ufff7\031\ufff7\033\ufff7\035\ufff7\041\ufff7\072" +
    "\ufff7\073\ufff7\106\ufff7\001\002\000\004\016\u013f\001\002" +
    "\000\004\106\270\001\002\000\016\010\030\012\033\021" +
    "\034\033\035\041\036\106\031\001\002\000\030\002\ufff9" +
    "\010\ufff9\012\ufff9\021\ufff9\031\ufff9\033\ufff9\035\ufff9\041" +
    "\ufff9\072\ufff9\073\ufff9\106\ufff9\001\002\000\016\010\uffe5" +
    "\012\uffe5\021\uffe5\033\uffe5\041\uffe5\106\uffe5\001\002\000" +
    "\030\002\ufffc\010\ufffc\012\ufffc\021\ufffc\031\ufffc\033\ufffc" +
    "\035\ufffc\041\ufffc\072\ufffc\073\ufffc\106\ufffc\001\002\000" +
    "\030\002\ufff5\010\ufff5\012\ufff5\021\ufff5\031\ufff5\033\ufff5" +
    "\035\ufff5\041\ufff5\072\ufff5\073\ufff5\106\ufff5\001\002\000" +
    "\030\002\ufffe\010\uffe4\012\uffe4\021\uffe4\031\007\033\uffe4" +
    "\035\011\041\uffe4\072\015\073\012\106\uffe4\001\002\000" +
    "\030\002\ufffa\010\ufffa\012\ufffa\021\ufffa\031\ufffa\033\ufffa" +
    "\035\ufffa\041\ufffa\072\ufffa\073\ufffa\106\ufffa\001\002\000" +
    "\004\002\000\001\002\000\030\002\ufff8\010\ufff8\012\ufff8" +
    "\021\ufff8\031\ufff8\033\ufff8\035\ufff8\041\ufff8\072\ufff8\073" +
    "\ufff8\106\ufff8\001\002\000\030\002\ufffb\010\ufffb\012\ufffb" +
    "\021\ufffb\031\ufffb\033\ufffb\035\ufffb\041\ufffb\072\ufffb\073" +
    "\ufffb\106\ufffb\001\002\000\012\004\uffc3\044\uffc3\065\uffc3" +
    "\107\uffc3\001\002\000\014\004\uffb9\044\uffb9\065\uffb9\071" +
    "\144\107\uffb9\001\002\000\004\107\256\001\002\000\004" +
    "\107\250\001\002\000\014\004\uffbd\044\uffbd\065\uffbd\071" +
    "\uffbd\107\uffbd\001\002\000\006\071\144\107\235\001\002" +
    "\000\014\004\uffbe\044\uffbe\065\uffbe\071\uffbe\107\uffbe\001" +
    "\002\000\012\010\040\012\033\033\035\041\036\001\002" +
    "\000\014\004\uffbf\044\uffbf\065\uffbf\071\uffbf\107\uffbf\001" +
    "\002\000\014\004\uffc0\044\uffc0\065\uffc0\071\uffc0\107\uffc0" +
    "\001\002\000\004\107\230\001\002\000\004\107\041\001" +
    "\002\000\004\007\042\001\002\000\046\004\071\017\101" +
    "\032\064\045\072\050\065\051\073\054\061\055\102\060" +
    "\077\061\063\067\067\071\103\074\060\076\053\103\100" +
    "\104\062\105\044\107\070\001\002\000\056\004\uff5a\005" +
    "\uff5a\007\226\011\uff5a\020\uff5a\027\uff5a\036\uff5a\037\uff5a" +
    "\043\uff5a\046\uff5a\047\uff5a\050\uff5a\052\uff5a\053\uff5a\056" +
    "\uff5a\057\uff5a\060\uff5a\063\uff5a\065\uff5a\066\uff5a\070\uff5a" +
    "\071\uff5a\001\002\000\076\004\uff38\005\uff38\006\uff38\007" +
    "\uff38\011\uff38\014\uff38\016\uff38\020\uff38\024\uff38\027\uff38" +
    "\036\uff38\037\uff38\043\uff38\044\uff38\045\uff38\046\uff38\047" +
    "\uff38\050\uff38\051\uff38\052\uff38\053\uff38\056\uff38\057\uff38" +
    "\060\uff38\061\uff38\063\uff38\065\uff38\066\uff38\070\uff38\071" +
    "\uff38\001\002\000\056\004\uff5c\005\uff5c\011\uff5c\014\uff5c" +
    "\020\uff5c\027\uff5c\036\uff5c\037\uff5c\043\uff5c\046\uff5c\047" +
    "\uff5c\050\uff5c\052\131\053\uff5c\056\uff5c\057\uff5c\060\uff5c" +
    "\063\uff5c\065\uff5c\066\uff5c\070\133\071\132\001\002\000" +
    "\076\004\uff3c\005\uff3c\006\uff3c\007\uff3c\011\uff3c\014\uff3c" +
    "\016\uff3c\020\uff3c\024\uff3c\027\uff3c\036\uff3c\037\uff3c\043" +
    "\uff3c\044\uff3c\045\uff3c\046\uff3c\047\uff3c\050\uff3c\051\uff3c" +
    "\052\uff3c\053\uff3c\056\uff3c\057\uff3c\060\uff3c\061\uff3c\063" +
    "\uff3c\065\uff3c\066\uff3c\070\uff3c\071\uff3c\001\002\000\050" +
    "\004\uff5e\005\uff5e\011\uff5e\014\uff5e\020\uff5e\027\uff5e\036" +
    "\uff5e\037\uff5e\043\uff5e\046\uff5e\047\uff5e\050\126\053\uff5e" +
    "\056\uff5e\057\uff5e\060\125\063\uff5e\065\uff5e\066\uff5e\001" +
    "\002\000\044\004\uff60\005\uff60\011\uff60\014\uff60\020\uff60" +
    "\027\uff60\036\123\037\117\043\uff60\046\122\047\120\053" +
    "\uff60\056\uff60\057\uff60\063\uff60\065\uff60\066\uff60\001\002" +
    "\000\076\004\uff42\005\uff42\006\211\007\uff42\011\uff42\014" +
    "\uff42\016\uff42\020\uff42\024\212\027\uff42\036\uff42\037\uff42" +
    "\043\uff42\044\205\045\207\046\uff42\047\uff42\050\uff42\051" +
    "\210\052\uff42\053\uff42\056\uff42\057\uff42\060\uff42\061\206" +
    "\063\uff42\065\uff42\066\uff42\070\uff42\071\uff42\001\002\000" +
    "\004\066\uffe7\001\002\000\076\004\uff37\005\uff37\006\uff37" +
    "\007\uff37\011\uff37\014\uff37\016\uff37\020\uff37\024\uff37\027" +
    "\uff37\036\uff37\037\uff37\043\uff37\044\uff37\045\uff37\046\uff37" +
    "\047\uff37\050\uff37\051\uff37\052\uff37\053\uff37\056\uff37\057" +
    "\uff37\060\uff37\061\uff37\063\uff37\065\uff37\066\uff37\070\uff37" +
    "\071\uff37\001\002\000\034\004\uff62\005\uff62\011\uff62\014" +
    "\uff62\020\uff62\027\115\043\uff62\053\114\056\uff62\057\uff62" +
    "\063\uff62\065\uff62\066\uff62\001\002\000\024\005\uff68\011" +
    "\176\020\uff68\043\uff68\056\uff68\057\uff68\063\uff68\065\uff68" +
    "\066\uff68\001\002\000\022\005\173\020\uff6b\043\uff6b\056" +
    "\uff6b\057\uff6b\063\uff6b\065\uff6b\066\uff6b\001\002\000\020" +
    "\020\uff6e\043\uff6e\056\170\057\uff6e\063\uff6e\065\uff6e\066" +
    "\uff6e\001\002\000\076\004\uff34\005\uff34\006\uff34\007\uff34" +
    "\011\uff34\014\uff34\016\uff34\020\uff34\024\uff34\027\uff34\036" +
    "\uff34\037\uff34\043\uff34\044\uff34\045\uff34\046\uff34\047\uff34" +
    "\050\uff34\051\uff34\052\uff34\053\uff34\056\uff34\057\uff34\060" +
    "\uff34\061\uff34\063\uff34\065\uff34\066\uff34\070\uff34\071\uff34" +
    "\001\002\000\046\004\071\017\101\032\064\045\072\050" +
    "\065\051\073\054\061\055\102\060\077\061\063\067\067" +
    "\071\103\074\060\076\053\103\100\104\062\105\044\107" +
    "\070\001\002\000\076\004\uff3a\005\uff3a\006\uff3a\007\uff3a" +
    "\011\uff3a\014\uff3a\016\uff3a\020\uff3a\024\uff3a\027\uff3a\036" +
    "\uff3a\037\uff3a\043\uff3a\044\uff3a\045\uff3a\046\uff3a\047\uff3a" +
    "\050\uff3a\051\uff3a\052\uff3a\053\uff3a\056\uff3a\057\uff3a\060" +
    "\uff3a\061\uff3a\063\uff3a\065\uff3a\066\uff3a\070\uff3a\071\uff3a" +
    "\001\002\000\046\004\uff4e\017\uff4e\032\uff4e\045\uff4e\050" +
    "\uff4e\051\uff4e\054\uff4e\055\uff4e\060\uff4e\061\uff4e\067\uff4e" +
    "\071\uff4e\074\uff4e\076\uff4e\103\uff4e\104\uff4e\105\uff4e\107" +
    "\uff4e\001\002\000\076\004\uff36\005\uff36\006\uff36\007\uff36" +
    "\011\uff36\014\uff36\016\uff36\020\uff36\024\uff36\027\uff36\036" +
    "\uff36\037\uff36\043\uff36\044\uff36\045\uff36\046\uff36\047\uff36" +
    "\050\uff36\051\uff36\052\uff36\053\uff36\056\uff36\057\uff36\060" +
    "\uff36\061\uff36\063\uff36\065\uff36\066\uff36\070\uff36\071\uff36" +
    "\001\002\000\046\004\uff30\017\uff30\032\uff30\045\uff30\050" +
    "\uff30\051\uff30\054\uff30\055\uff30\060\uff30\061\uff30\067\uff30" +
    "\071\uff30\074\uff30\076\uff30\103\uff30\104\uff30\105\uff30\107" +
    "\uff30\001\002\000\006\063\uff74\066\uff74\001\002\000\004" +
    "\045\151\001\002\000\076\004\uff32\005\uff32\006\uff32\007" +
    "\uff32\011\uff32\014\uff32\016\uff32\020\uff32\024\uff32\027\uff32" +
    "\036\uff32\037\uff32\043\uff32\044\uff32\045\uff32\046\uff32\047" +
    "\uff32\050\uff32\051\uff32\052\uff32\053\uff32\056\uff32\057\uff32" +
    "\060\uff32\061\uff32\063\uff32\065\uff32\066\uff32\070\uff32\071" +
    "\uff32\001\002\000\046\004\071\017\101\032\064\045\072" +
    "\050\065\051\073\054\061\055\102\060\077\061\063\067" +
    "\067\071\103\074\060\076\053\103\100\104\062\105\044" +
    "\107\070\001\002\000\056\004\071\012\033\017\101\032" +
    "\064\033\035\041\036\045\072\050\065\051\073\054\061" +
    "\055\102\060\077\061\063\067\067\071\103\074\060\076" +
    "\053\103\100\104\062\105\044\106\031\107\070\001\002" +
    "\000\046\004\uff4d\017\uff4d\032\uff4d\045\uff4d\050\uff4d\051" +
    "\uff4d\054\uff4d\055\uff4d\060\uff4d\061\uff4d\067\uff4d\071\uff4d" +
    "\074\uff4d\076\uff4d\103\uff4d\104\uff4d\105\uff4d\107\uff4d\001" +
    "\002\000\026\004\110\005\uff66\011\uff66\020\uff66\043\uff66" +
    "\056\uff66\057\uff66\063\uff66\065\uff66\066\uff66\001\002\000" +
    "\046\004\071\017\101\032\064\045\072\050\065\051\073" +
    "\054\061\055\102\060\077\061\063\067\067\071\103\074" +
    "\060\076\053\103\100\104\062\105\044\107\070\001\002" +
    "\000\046\004\071\017\101\032\064\045\072\050\065\051" +
    "\073\054\061\055\102\060\077\061\063\067\067\071\103" +
    "\074\060\076\053\103\100\104\062\105\044\107\070\001" +
    "\002\000\046\004\uff31\017\uff31\032\uff31\045\uff31\050\uff31" +
    "\051\uff31\054\uff31\055\uff31\060\uff31\061\uff31\067\uff31\071" +
    "\uff31\074\uff31\076\uff31\103\uff31\104\uff31\105\uff31\107\uff31" +
    "\001\002\000\076\004\uff39\005\uff39\006\uff39\007\uff39\011" +
    "\uff39\014\uff39\016\uff39\020\uff39\024\uff39\027\uff39\036\uff39" +
    "\037\uff39\043\uff39\044\uff39\045\uff39\046\uff39\047\uff39\050" +
    "\uff39\051\uff39\052\uff39\053\uff39\056\uff39\057\uff39\060\uff39" +
    "\061\uff39\063\uff39\065\uff39\066\uff39\070\uff39\071\uff39\001" +
    "\002\000\004\107\105\001\002\000\076\004\uff35\005\uff35" +
    "\006\uff35\007\uff35\011\uff35\014\uff35\016\uff35\020\uff35\024" +
    "\uff35\027\uff35\036\uff35\037\uff35\043\uff35\044\uff35\045\uff35" +
    "\046\uff35\047\uff35\050\uff35\051\uff35\052\uff35\053\uff35\056" +
    "\uff35\057\uff35\060\uff35\061\uff35\063\uff35\065\uff35\066\uff35" +
    "\070\uff35\071\uff35\001\002\000\046\004\071\017\101\032" +
    "\064\045\072\050\065\051\073\054\061\055\102\060\077" +
    "\061\063\067\067\071\103\074\060\076\053\103\100\104" +
    "\062\105\044\107\070\001\002\000\062\004\uff4a\005\uff4a" +
    "\007\uff4a\011\uff4a\014\uff4a\016\uff4a\020\uff4a\027\uff4a\036" +
    "\uff4a\037\uff4a\043\uff4a\046\uff4a\047\uff4a\050\uff4a\052\uff4a" +
    "\053\uff4a\056\uff4a\057\uff4a\060\uff4a\063\uff4a\065\uff4a\066" +
    "\uff4a\070\uff4a\071\uff4a\001\002\000\076\004\uff33\005\uff33" +
    "\006\uff33\007\uff33\011\uff33\014\uff33\016\uff33\020\uff33\024" +
    "\uff33\027\uff33\036\uff33\037\uff33\043\uff33\044\uff33\045\uff33" +
    "\046\uff33\047\uff33\050\uff33\051\uff33\052\uff33\053\uff33\056" +
    "\uff33\057\uff33\060\uff33\061\uff33\063\uff33\065\uff33\066\uff33" +
    "\070\uff33\071\uff33\001\002\000\062\004\uff48\005\uff48\007" +
    "\uff48\011\uff48\014\uff48\016\uff48\020\uff48\027\uff48\036\uff48" +
    "\037\uff48\043\uff48\046\uff48\047\uff48\050\uff48\052\uff48\053" +
    "\uff48\056\uff48\057\uff48\060\uff48\063\uff48\065\uff48\066\uff48" +
    "\070\uff48\071\uff48\001\002\000\062\004\uff43\005\uff43\007" +
    "\uff43\011\uff43\014\uff43\016\uff43\020\uff43\027\uff43\036\uff43" +
    "\037\uff43\043\uff43\046\uff43\047\uff43\050\uff43\052\uff43\053" +
    "\uff43\056\uff43\057\uff43\060\uff43\063\uff43\065\uff43\066\uff43" +
    "\070\uff43\071\uff43\001\002\000\046\004\071\017\101\032" +
    "\064\045\072\050\065\051\073\054\061\055\102\060\077" +
    "\061\063\067\067\071\103\074\060\076\053\103\100\104" +
    "\062\105\044\107\070\001\002\000\056\004\uff5a\005\uff5a" +
    "\011\uff5a\014\uff5a\020\uff5a\027\uff5a\036\uff5a\037\uff5a\043" +
    "\uff5a\046\uff5a\047\uff5a\050\uff5a\052\uff5a\053\uff5a\056\uff5a" +
    "\057\uff5a\060\uff5a\063\uff5a\065\uff5a\066\uff5a\070\uff5a\071" +
    "\uff5a\001\002\000\034\004\uff63\005\uff63\011\uff63\014\uff63" +
    "\020\uff63\027\115\043\uff63\053\114\056\uff63\057\uff63\063" +
    "\uff63\065\uff63\066\uff63\001\002\000\046\004\071\017\101" +
    "\032\064\045\072\050\065\051\073\054\061\055\102\060" +
    "\077\061\063\067\067\071\103\074\060\076\053\103\100" +
    "\104\062\105\044\107\070\001\002\000\046\004\uff58\017" +
    "\uff58\032\uff58\045\uff58\050\uff58\051\uff58\054\uff58\055\uff58" +
    "\060\uff58\061\uff58\067\uff58\071\uff58\074\uff58\076\uff58\103" +
    "\uff58\104\uff58\105\uff58\107\uff58\001\002\000\046\004\uff59" +
    "\017\uff59\032\uff59\045\uff59\050\uff59\051\uff59\054\uff59\055" +
    "\uff59\060\uff59\061\uff59\067\uff59\071\uff59\074\uff59\076\uff59" +
    "\103\uff59\104\uff59\105\uff59\107\uff59\001\002\000\044\004" +
    "\uff61\005\uff61\011\uff61\014\uff61\020\uff61\027\uff61\036\123" +
    "\037\117\043\uff61\046\122\047\120\053\uff61\056\uff61\057" +
    "\uff61\063\uff61\065\uff61\066\uff61\001\002\000\046\004\uff54" +
    "\017\uff54\032\uff54\045\uff54\050\uff54\051\uff54\054\uff54\055" +
    "\uff54\060\uff54\061\uff54\067\uff54\071\uff54\074\uff54\076\uff54" +
    "\103\uff54\104\uff54\105\uff54\107\uff54\001\002\000\046\004" +
    "\uff55\017\uff55\032\uff55\045\uff55\050\uff55\051\uff55\054\uff55" +
    "\055\uff55\060\uff55\061\uff55\067\uff55\071\uff55\074\uff55\076" +
    "\uff55\103\uff55\104\uff55\105\uff55\107\uff55\001\002\000\046" +
    "\004\071\017\101\032\064\045\072\050\065\051\073\054" +
    "\061\055\102\060\077\061\063\067\067\071\103\074\060" +
    "\076\053\103\100\104\062\105\044\107\070\001\002\000" +
    "\046\004\uff57\017\uff57\032\uff57\045\uff57\050\uff57\051\uff57" +
    "\054\uff57\055\uff57\060\uff57\061\uff57\067\uff57\071\uff57\074" +
    "\uff57\076\uff57\103\uff57\104\uff57\105\uff57\107\uff57\001\002" +
    "\000\046\004\uff56\017\uff56\032\uff56\045\uff56\050\uff56\051" +
    "\uff56\054\uff56\055\uff56\060\uff56\061\uff56\067\uff56\071\uff56" +
    "\074\uff56\076\uff56\103\uff56\104\uff56\105\uff56\107\uff56\001" +
    "\002\000\050\004\uff5f\005\uff5f\011\uff5f\014\uff5f\020\uff5f" +
    "\027\uff5f\036\uff5f\037\uff5f\043\uff5f\046\uff5f\047\uff5f\050" +
    "\126\053\uff5f\056\uff5f\057\uff5f\060\125\063\uff5f\065\uff5f" +
    "\066\uff5f\001\002\000\046\004\uff53\017\uff53\032\uff53\045" +
    "\uff53\050\uff53\051\uff53\054\uff53\055\uff53\060\uff53\061\uff53" +
    "\067\uff53\071\uff53\074\uff53\076\uff53\103\uff53\104\uff53\105" +
    "\uff53\107\uff53\001\002\000\046\004\uff52\017\uff52\032\uff52" +
    "\045\uff52\050\uff52\051\uff52\054\uff52\055\uff52\060\uff52\061" +
    "\uff52\067\uff52\071\uff52\074\uff52\076\uff52\103\uff52\104\uff52" +
    "\105\uff52\107\uff52\001\002\000\046\004\071\017\101\032" +
    "\064\045\072\050\065\051\073\054\061\055\102\060\077" +
    "\061\063\067\067\071\103\074\060\076\053\103\100\104" +
    "\062\105\044\107\070\001\002\000\056\004\uff5d\005\uff5d" +
    "\011\uff5d\014\uff5d\020\uff5d\027\uff5d\036\uff5d\037\uff5d\043" +
    "\uff5d\046\uff5d\047\uff5d\050\uff5d\052\131\053\uff5d\056\uff5d" +
    "\057\uff5d\060\uff5d\063\uff5d\065\uff5d\066\uff5d\070\133\071" +
    "\132\001\002\000\046\004\uff4f\017\uff4f\032\uff4f\045\uff4f" +
    "\050\uff4f\051\uff4f\054\uff4f\055\uff4f\060\uff4f\061\uff4f\067" +
    "\uff4f\071\uff4f\074\uff4f\076\uff4f\103\uff4f\104\uff4f\105\uff4f" +
    "\107\uff4f\001\002\000\046\004\uff51\017\uff51\032\uff51\045" +
    "\uff51\050\uff51\051\uff51\054\uff51\055\uff51\060\uff51\061\uff51" +
    "\067\uff51\071\uff51\074\uff51\076\uff51\103\uff51\104\uff51\105" +
    "\uff51\107\uff51\001\002\000\046\004\uff50\017\uff50\032\uff50" +
    "\045\uff50\050\uff50\051\uff50\054\uff50\055\uff50\060\uff50\061" +
    "\uff50\067\uff50\071\uff50\074\uff50\076\uff50\103\uff50\104\uff50" +
    "\105\uff50\107\uff50\001\002\000\046\004\071\017\101\032" +
    "\064\045\072\050\065\051\073\054\061\055\102\060\077" +
    "\061\063\067\067\071\103\074\060\076\053\103\100\104" +
    "\062\105\044\107\070\001\002\000\056\004\uff5b\005\uff5b" +
    "\011\uff5b\014\uff5b\020\uff5b\027\uff5b\036\uff5b\037\uff5b\043" +
    "\uff5b\046\uff5b\047\uff5b\050\uff5b\052\uff5b\053\uff5b\056\uff5b" +
    "\057\uff5b\060\uff5b\063\uff5b\065\uff5b\066\uff5b\070\uff5b\071" +
    "\uff5b\001\002\000\004\071\144\001\002\000\004\065\142" +
    "\001\002\000\004\065\141\001\002\000\076\004\uff3b\005" +
    "\uff3b\006\uff3b\007\uff3b\011\uff3b\014\uff3b\016\uff3b\020\uff3b" +
    "\024\uff3b\027\uff3b\036\uff3b\037\uff3b\043\uff3b\044\uff3b\045" +
    "\uff3b\046\uff3b\047\uff3b\050\uff3b\051\uff3b\052\uff3b\053\uff3b" +
    "\056\uff3b\057\uff3b\060\uff3b\061\uff3b\063\uff3b\065\uff3b\066" +
    "\uff3b\070\uff3b\071\uff3b\001\002\000\046\004\071\017\101" +
    "\032\064\045\072\050\065\051\073\054\061\055\102\060" +
    "\077\061\063\067\067\071\103\074\060\076\053\103\100" +
    "\104\062\105\044\107\070\001\002\000\062\004\uff44\005" +
    "\uff44\007\uff44\011\uff44\014\uff44\016\uff44\020\uff44\027\uff44" +
    "\036\uff44\037\uff44\043\uff44\046\uff44\047\uff44\050\uff44\052" +
    "\uff44\053\uff44\056\uff44\057\uff44\060\uff44\063\uff44\065\uff44" +
    "\066\uff44\070\uff44\071\uff44\001\002\000\014\004\uffb6\044" +
    "\uffb6\065\uffb6\071\uffb6\107\uffb6\001\002\000\014\004\uffc2" +
    "\044\uffc2\065\uffc2\071\144\107\uffc2\001\002\000\014\004" +
    "\uffb8\044\uffb8\065\uffb8\071\uffb8\107\uffb8\001\002\000\014" +
    "\004\uffb7\044\uffb7\065\uffb7\071\uffb7\107\uffb7\001\002\000" +
    "\062\004\uff49\005\uff49\007\uff49\011\uff49\014\uff49\016\uff49" +
    "\020\uff49\027\uff49\036\uff49\037\uff49\043\uff49\046\uff49\047" +
    "\uff49\050\uff49\052\uff49\053\uff49\056\uff49\057\uff49\060\uff49" +
    "\063\uff49\065\uff49\066\uff49\070\uff49\071\uff49\001\002\000" +
    "\056\004\071\012\033\017\101\032\064\033\035\041\036" +
    "\045\072\050\065\051\073\054\061\055\102\060\077\061" +
    "\063\067\067\071\103\074\060\076\053\103\100\104\062" +
    "\105\044\106\031\107\070\001\002\000\004\065\166\001" +
    "\002\000\014\004\uffc4\044\uffc4\065\uffc4\071\144\107\uffc4" +
    "\001\002\000\006\044\156\065\uffb4\001\002\000\012\004" +
    "\uffc5\044\uffc5\065\uffc5\107\uffc5\001\002\000\046\004\071" +
    "\017\101\032\064\045\072\050\065\051\073\054\061\055" +
    "\102\060\077\061\063\067\067\071\103\074\060\076\053" +
    "\103\100\104\062\105\044\107\070\001\002\000\004\065" +
    "\163\001\002\000\016\007\uffb5\016\uffb5\020\uffb5\044\156" +
    "\065\uffb5\066\uffb5\001\002\000\016\007\uffb3\016\uffb3\020" +
    "\uffb3\044\uffb3\065\uffb3\066\uffb3\001\002\000\016\007\uffb2" +
    "\016\uffb2\020\uffb2\044\uffb2\065\uffb2\066\uffb2\001\002\000" +
    "\062\004\uff45\005\uff45\007\uff45\011\uff45\014\uff45\016\uff45" +
    "\020\uff45\027\uff45\036\uff45\037\uff45\043\uff45\046\uff45\047" +
    "\uff45\050\uff45\052\uff45\053\uff45\056\uff45\057\uff45\060\uff45" +
    "\063\uff45\065\uff45\066\uff45\070\uff45\071\uff45\001\002\000" +
    "\004\063\165\001\002\000\016\007\uffb1\016\uffb1\020\uffb1" +
    "\044\uffb1\065\uffb1\066\uffb1\001\002\000\062\004\uff46\005" +
    "\uff46\007\uff46\011\uff46\014\uff46\016\uff46\020\uff46\027\uff46" +
    "\036\uff46\037\uff46\043\uff46\046\uff46\047\uff46\050\uff46\052" +
    "\uff46\053\uff46\056\uff46\057\uff46\060\uff46\063\uff46\065\uff46" +
    "\066\uff46\070\uff46\071\uff46\001\002\000\062\004\uff47\005" +
    "\uff47\007\uff47\011\uff47\014\uff47\016\uff47\020\uff47\027\uff47" +
    "\036\uff47\037\uff47\043\uff47\046\uff47\047\uff47\050\uff47\052" +
    "\uff47\053\uff47\056\uff47\057\uff47\060\uff47\063\uff47\065\uff47" +
    "\066\uff47\070\uff47\071\uff47\001\002\000\046\004\uff6d\017" +
    "\uff6d\032\uff6d\045\uff6d\050\uff6d\051\uff6d\054\uff6d\055\uff6d" +
    "\060\uff6d\061\uff6d\067\uff6d\071\uff6d\074\uff6d\076\uff6d\103" +
    "\uff6d\104\uff6d\105\uff6d\107\uff6d\001\002\000\046\004\071" +
    "\017\101\032\064\045\072\050\065\051\073\054\061\055" +
    "\102\060\077\061\063\067\067\071\103\074\060\076\053" +
    "\103\100\104\062\105\044\107\070\001\002\000\022\005" +
    "\173\020\uff6c\043\uff6c\056\uff6c\057\uff6c\063\uff6c\065\uff6c" +
    "\066\uff6c\001\002\000\046\004\uff6a\017\uff6a\032\uff6a\045" +
    "\uff6a\050\uff6a\051\uff6a\054\uff6a\055\uff6a\060\uff6a\061\uff6a" +
    "\067\uff6a\071\uff6a\074\uff6a\076\uff6a\103\uff6a\104\uff6a\105" +
    "\uff6a\107\uff6a\001\002\000\046\004\071\017\101\032\064" +
    "\045\072\050\065\051\073\054\061\055\102\060\077\061" +
    "\063\067\067\071\103\074\060\076\053\103\100\104\062" +
    "\105\044\107\070\001\002\000\024\005\uff69\011\176\020" +
    "\uff69\043\uff69\056\uff69\057\uff69\063\uff69\065\uff69\066\uff69" +
    "\001\002\000\046\004\071\017\101\032\064\045\072\050" +
    "\065\051\073\054\061\055\102\060\077\061\063\067\067" +
    "\071\103\074\060\076\053\103\100\104\062\105\044\107" +
    "\070\001\002\000\030\004\110\005\uff64\011\uff64\014\uff64" +
    "\020\uff64\043\uff64\056\uff64\057\uff64\063\uff64\065\uff64\066" +
    "\uff64\001\002\000\026\005\uff67\011\uff67\014\201\020\uff67" +
    "\043\uff67\056\uff67\057\uff67\063\uff67\065\uff67\066\uff67\001" +
    "\002\000\046\004\071\017\101\032\064\045\072\050\065" +
    "\051\073\054\061\055\102\060\077\061\063\067\067\071" +
    "\103\074\060\076\053\103\100\104\062\105\044\107\070" +
    "\001\002\000\030\004\110\005\uff65\011\uff65\014\uff65\020" +
    "\uff65\043\uff65\056\uff65\057\uff65\063\uff65\065\uff65\066\uff65" +
    "\001\002\000\004\066\204\001\002\000\126\002\uffe6\004" +
    "\uffe6\010\uffe6\012\uffe6\013\uffe6\015\uffe6\017\uffe6\021\uffe6" +
    "\022\uffe6\023\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034" +
    "\uffe6\035\uffe6\040\uffe6\041\uffe6\043\uffe6\045\uffe6\050\uffe6" +
    "\051\uffe6\054\uffe6\055\uffe6\060\uffe6\061\uffe6\062\uffe6\064" +
    "\uffe6\067\uffe6\071\uffe6\072\uffe6\073\uffe6\074\uffe6\076\uffe6" +
    "\077\uffe6\101\uffe6\102\uffe6\103\uffe6\104\uffe6\105\uffe6\106" +
    "\uffe6\107\uffe6\001\002\000\046\004\071\017\101\032\064" +
    "\045\072\050\065\051\073\054\061\055\102\060\077\061" +
    "\063\067\067\071\103\074\060\076\053\103\100\104\062" +
    "\105\044\107\070\001\002\000\076\004\uff4c\005\uff4c\006" +
    "\uff4c\007\uff4c\011\uff4c\014\uff4c\016\uff4c\020\uff4c\024\uff4c" +
    "\027\uff4c\036\uff4c\037\uff4c\043\uff4c\044\uff4c\045\uff4c\046" +
    "\uff4c\047\uff4c\050\uff4c\051\uff4c\052\uff4c\053\uff4c\056\uff4c" +
    "\057\uff4c\060\uff4c\061\uff4c\063\uff4c\065\uff4c\066\uff4c\070" +
    "\uff4c\071\uff4c\001\002\000\050\004\071\017\101\032\064" +
    "\045\072\050\065\051\073\054\061\055\102\060\077\061" +
    "\063\065\uff72\067\067\071\103\074\060\076\053\103\100" +
    "\104\062\105\044\107\070\001\002\000\076\004\uff4b\005" +
    "\uff4b\006\uff4b\007\uff4b\011\uff4b\014\uff4b\016\uff4b\020\uff4b" +
    "\024\uff4b\027\uff4b\036\uff4b\037\uff4b\043\uff4b\044\uff4b\045" +
    "\uff4b\046\uff4b\047\uff4b\050\uff4b\051\uff4b\052\uff4b\053\uff4b" +
    "\056\uff4b\057\uff4b\060\uff4b\061\uff4b\063\uff4b\065\uff4b\066" +
    "\uff4b\070\uff4b\071\uff4b\001\002\000\004\107\215\001\002" +
    "\000\004\107\214\001\002\000\076\004\uff3e\005\uff3e\006" +
    "\uff3e\007\uff3e\011\uff3e\014\uff3e\016\uff3e\020\uff3e\024\uff3e" +
    "\027\uff3e\036\uff3e\037\uff3e\043\uff3e\044\uff3e\045\uff3e\046" +
    "\uff3e\047\uff3e\050\uff3e\051\uff3e\052\uff3e\053\uff3e\056\uff3e" +
    "\057\uff3e\060\uff3e\061\uff3e\063\uff3e\065\uff3e\066\uff3e\070" +
    "\uff3e\071\uff3e\001\002\000\076\004\uff41\005\uff41\006\uff41" +
    "\007\uff41\011\uff41\014\uff41\016\uff41\020\uff41\024\uff41\027" +
    "\uff41\036\uff41\037\uff41\043\uff41\044\uff41\045\uff41\046\uff41" +
    "\047\uff41\050\uff41\051\uff41\052\uff41\053\uff41\056\uff41\057" +
    "\uff41\060\uff41\061\uff41\063\uff41\065\uff41\066\uff41\070\uff41" +
    "\071\uff41\001\002\000\076\004\uff3f\005\uff3f\006\uff3f\007" +
    "\uff3f\011\uff3f\014\uff3f\016\uff3f\020\uff3f\024\uff3f\027\uff3f" +
    "\036\uff3f\037\uff3f\043\uff3f\044\uff3f\045\uff3f\046\uff3f\047" +
    "\uff3f\050\uff3f\051\uff3f\052\uff3f\053\uff3f\056\uff3f\057\uff3f" +
    "\060\uff3f\061\uff3f\063\uff3f\065\uff3f\066\uff3f\070\uff3f\071" +
    "\uff3f\001\002\000\006\020\uff71\065\uff71\001\002\000\006" +
    "\020\222\065\uff73\001\002\000\004\065\221\001\002\000" +
    "\076\004\uff3d\005\uff3d\006\uff3d\007\uff3d\011\uff3d\014\uff3d" +
    "\016\uff3d\020\uff3d\024\uff3d\027\uff3d\036\uff3d\037\uff3d\043" +
    "\uff3d\044\uff3d\045\uff3d\046\uff3d\047\uff3d\050\uff3d\051\uff3d" +
    "\052\uff3d\053\uff3d\056\uff3d\057\uff3d\060\uff3d\061\uff3d\063" +
    "\uff3d\065\uff3d\066\uff3d\070\uff3d\071\uff3d\001\002\000\046" +
    "\004\071\017\101\032\064\045\072\050\065\051\073\054" +
    "\061\055\102\060\077\061\063\067\067\071\103\074\060" +
    "\076\053\103\100\104\062\105\044\107\070\001\002\000" +
    "\006\020\uff70\065\uff70\001\002\000\004\063\225\001\002" +
    "\000\076\004\uff40\005\uff40\006\uff40\007\uff40\011\uff40\014" +
    "\uff40\016\uff40\020\uff40\024\uff40\027\uff40\036\uff40\037\uff40" +
    "\043\uff40\044\uff40\045\uff40\046\uff40\047\uff40\050\uff40\051" +
    "\uff40\052\uff40\053\uff40\056\uff40\057\uff40\060\uff40\061\uff40" +
    "\063\uff40\065\uff40\066\uff40\070\uff40\071\uff40\001\002\000" +
    "\046\004\071\017\101\032\064\045\072\050\065\051\073" +
    "\054\061\055\102\060\077\061\063\067\067\071\103\074" +
    "\060\076\053\103\100\104\062\105\044\107\070\001\002" +
    "\000\016\020\uff6f\043\uff6f\057\uff6f\063\uff6f\065\uff6f\066" +
    "\uff6f\001\002\000\004\007\231\001\002\000\046\004\071" +
    "\017\101\032\064\045\072\050\065\051\073\054\061\055" +
    "\102\060\077\061\063\067\067\071\103\074\060\076\053" +
    "\103\100\104\062\105\044\107\070\001\002\000\004\066" +
    "\uffe9\001\002\000\004\066\234\001\002\000\126\002\uffe8" +
    "\004\uffe8\010\uffe8\012\uffe8\013\uffe8\015\uffe8\017\uffe8\021" +
    "\uffe8\022\uffe8\023\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8" +
    "\034\uffe8\035\uffe8\040\uffe8\041\uffe8\043\uffe8\045\uffe8\050" +
    "\uffe8\051\uffe8\054\uffe8\055\uffe8\060\uffe8\061\uffe8\062\uffe8" +
    "\064\uffe8\067\uffe8\071\uffe8\072\uffe8\073\uffe8\074\uffe8\076" +
    "\uffe8\077\uffe8\101\uffe8\102\uffe8\103\uffe8\104\uffe8\105\uffe8" +
    "\106\uffe8\107\uffe8\001\002\000\010\016\uffec\044\uffec\066" +
    "\uffec\001\002\000\010\016\uffb4\044\156\066\uffb4\001\002" +
    "\000\006\016\240\066\uff8d\001\002\000\004\045\245\001" +
    "\002\000\004\066\uffeb\001\002\000\004\066\uff8e\001\002" +
    "\000\004\066\244\001\002\000\126\002\uffea\004\uffea\010" +
    "\uffea\012\uffea\013\uffea\015\uffea\017\uffea\021\uffea\022\uffea" +
    "\023\uffea\030\uffea\031\uffea\032\uffea\033\uffea\034\uffea\035" +
    "\uffea\040\uffea\041\uffea\043\uffea\045\uffea\050\uffea\051\uffea" +
    "\054\uffea\055\uffea\060\uffea\061\uffea\062\uffea\064\uffea\067" +
    "\uffea\071\uffea\072\uffea\073\uffea\074\uffea\076\uffea\077\uffea" +
    "\101\uffea\102\uffea\103\uffea\104\uffea\105\uffea\106\uffea\107" +
    "\uffea\001\002\000\050\004\071\017\101\032\064\045\072" +
    "\050\065\051\073\054\061\055\102\060\077\061\063\065" +
    "\uff72\067\067\071\103\074\060\076\053\103\100\104\062" +
    "\105\044\107\070\001\002\000\004\065\247\001\002\000" +
    "\004\066\uff8c\001\002\000\004\007\uffef\001\002\000\004" +
    "\007\252\001\002\000\046\004\071\017\101\032\064\045" +
    "\072\050\065\051\073\054\061\055\102\060\077\061\063" +
    "\067\067\071\103\074\060\076\053\103\100\104\062\105" +
    "\044\107\070\001\002\000\004\066\uffee\001\002\000\004" +
    "\066\255\001\002\000\126\002\uffed\004\uffed\010\uffed\012" +
    "\uffed\013\uffed\015\uffed\017\uffed\021\uffed\022\uffed\023\uffed" +
    "\030\uffed\031\uffed\032\uffed\033\uffed\034\uffed\035\uffed\040" +
    "\uffed\041\uffed\043\uffed\045\uffed\050\uffed\051\uffed\054\uffed" +
    "\055\uffed\060\uffed\061\uffed\062\uffed\064\uffed\067\uffed\071" +
    "\uffed\072\uffed\073\uffed\074\uffed\076\uffed\077\uffed\101\uffed" +
    "\102\uffed\103\uffed\104\uffed\105\uffed\106\uffed\107\uffed\001" +
    "\002\000\010\007\ufff2\044\ufff2\066\ufff2\001\002\000\010" +
    "\007\uffb4\044\156\066\uffb4\001\002\000\006\007\262\066" +
    "\uff91\001\002\000\004\066\ufff1\001\002\000\046\004\071" +
    "\017\101\032\064\045\072\050\065\051\073\054\061\055" +
    "\102\060\077\061\063\067\067\071\103\074\060\076\053" +
    "\103\100\104\062\105\044\107\070\001\002\000\004\066" +
    "\uff92\001\002\000\004\066\265\001\002\000\126\002\ufff0" +
    "\004\ufff0\010\ufff0\012\ufff0\013\ufff0\015\ufff0\017\ufff0\021" +
    "\ufff0\022\ufff0\023\ufff0\030\ufff0\031\ufff0\032\ufff0\033\ufff0" +
    "\034\ufff0\035\ufff0\040\ufff0\041\ufff0\043\ufff0\045\ufff0\050" +
    "\ufff0\051\ufff0\054\ufff0\055\ufff0\060\ufff0\061\ufff0\062\ufff0" +
    "\064\ufff0\067\ufff0\071\ufff0\072\ufff0\073\ufff0\074\ufff0\076" +
    "\ufff0\077\ufff0\101\ufff0\102\ufff0\103\ufff0\104\ufff0\105\ufff0" +
    "\106\ufff0\107\ufff0\001\002\000\012\004\uffc1\044\uffc1\065" +
    "\uffc1\107\uffc1\001\002\000\014\004\uffba\044\uffba\065\uffba" +
    "\071\144\107\uffba\001\002\000\004\043\271\001\002\000" +
    "\012\012\uffe3\033\uffe3\041\uffe3\106\uffe3\001\002\000\012" +
    "\012\033\033\035\041\036\106\031\001\002\000\020\012" +
    "\033\033\035\035\uffdb\041\036\062\uffdb\075\302\106\304" +
    "\001\002\000\004\107\276\001\002\000\020\012\uffdf\033" +
    "\uffdf\035\uffdf\041\uffdf\062\uffdf\075\uffdf\106\uffdf\001\002" +
    "\000\006\044\156\066\uffb4\001\002\000\004\066\300\001" +
    "\002\000\020\012\uffdd\033\uffdd\035\uffdd\041\uffdd\062\uffdd" +
    "\075\uffdd\106\uffdd\001\002\000\012\035\uffd7\062\uffd7\075" +
    "\uffd7\106\uffd7\001\002\000\004\106\u0138\001\002\000\020" +
    "\012\uffde\033\uffde\035\uffde\041\uffde\062\uffde\075\uffde\106" +
    "\uffde\001\002\000\006\045\uffd6\071\uffbd\001\002\000\012" +
    "\035\uffdc\062\uffdc\075\302\106\322\001\002\000\012\035" +
    "\uffda\062\uffda\075\uffda\106\uffda\001\002\000\012\035\uffd8" +
    "\062\uffd8\075\uffd8\106\uffd8\001\002\000\006\035\uffe2\062" +
    "\uffe2\001\002\000\006\035\011\062\uffd0\001\002\000\006" +
    "\035\uffcf\062\uffcf\001\002\000\006\035\011\062\uffd1\001" +
    "\002\000\006\035\uffcd\062\uffcd\001\002\000\004\062\uffe1" +
    "\001\002\000\004\062\317\001\002\000\004\066\320\001" +
    "\002\000\030\002\uffe0\010\uffe0\012\uffe0\021\uffe0\031\uffe0" +
    "\033\uffe0\035\uffe0\041\uffe0\072\uffe0\073\uffe0\106\uffe0\001" +
    "\002\000\006\035\uffce\062\uffce\001\002\000\004\045\uffd6" +
    "\001\002\000\012\035\uffd9\062\uffd9\075\uffd9\106\uffd9\001" +
    "\002\000\004\045\325\001\002\000\014\012\033\033\035" +
    "\041\036\065\uff99\106\031\001\002\000\006\004\u0104\107" +
    "\uff93\001\002\000\006\020\u0132\065\uff9a\001\002\000\006" +
    "\020\uff98\065\uff98\001\002\000\004\065\332\001\002\000" +
    "\004\043\uffd5\001\002\000\004\043\334\001\002\000\116" +
    "\004\071\010\uffe4\012\uffe4\013\364\015\354\017\101\021" +
    "\uffe4\022\342\023\340\030\360\032\064\033\uffe4\034\366" +
    "\040\370\041\uffe4\043\347\045\072\050\065\051\073\054" +
    "\061\055\102\060\077\061\063\062\uffac\064\344\067\067" +
    "\071\103\072\015\074\060\076\053\077\337\101\350\102" +
    "\341\103\100\104\062\105\044\106\uffe4\107\070\001\002" +
    "\000\116\004\uffa0\010\uffa0\012\uffa0\013\uffa0\015\uffa0\017" +
    "\uffa0\021\uffa0\022\uffa0\023\uffa0\030\uffa0\032\uffa0\033\uffa0" +
    "\034\uffa0\040\uffa0\041\uffa0\043\uffa0\045\uffa0\050\uffa0\051" +
    "\uffa0\054\uffa0\055\uffa0\060\uffa0\061\uffa0\062\uffa0\064\uffa0" +
    "\067\uffa0\071\uffa0\072\uffa0\074\uffa0\076\uffa0\077\uffa0\101" +
    "\uffa0\102\uffa0\103\uffa0\104\uffa0\105\uffa0\106\uffa0\107\uffa0" +
    "\001\002\000\116\004\uff9f\010\uff9f\012\uff9f\013\uff9f\015" +
    "\uff9f\017\uff9f\021\uff9f\022\uff9f\023\uff9f\030\uff9f\032\uff9f" +
    "\033\uff9f\034\uff9f\040\uff9f\041\uff9f\043\uff9f\045\uff9f\050" +
    "\uff9f\051\uff9f\054\uff9f\055\uff9f\060\uff9f\061\uff9f\062\uff9f" +
    "\064\uff9f\067\uff9f\071\uff9f\072\uff9f\074\uff9f\076\uff9f\077" +
    "\uff9f\101\uff9f\102\uff9f\103\uff9f\104\uff9f\105\uff9f\106\uff9f" +
    "\107\uff9f\001\002\000\046\004\uff86\017\uff86\032\uff86\045" +
    "\uff86\050\uff86\051\uff86\054\uff86\055\uff86\060\uff86\061\uff86" +
    "\067\uff86\071\uff86\074\uff86\076\uff86\103\uff86\104\uff86\105" +
    "\uff86\107\uff86\001\002\000\004\057\u0126\001\002\000\046" +
    "\004\071\017\101\032\064\045\072\050\065\051\073\054" +
    "\061\055\102\060\077\061\063\067\067\071\103\074\060" +
    "\076\053\103\100\104\062\105\044\107\070\001\002\000" +
    "\004\066\uff7f\001\002\000\116\004\uff9e\010\uff9e\012\uff9e" +
    "\013\uff9e\015\uff9e\017\uff9e\021\uff9e\022\uff9e\023\uff9e\030" +
    "\uff9e\032\uff9e\033\uff9e\034\uff9e\040\uff9e\041\uff9e\043\uff9e" +
    "\045\uff9e\050\uff9e\051\uff9e\054\uff9e\055\uff9e\060\uff9e\061" +
    "\uff9e\062\uff9e\064\uff9e\067\uff9e\071\uff9e\072\uff9e\074\uff9e" +
    "\076\uff9e\077\uff9e\101\uff9e\102\uff9e\103\uff9e\104\uff9e\105" +
    "\uff9e\106\uff9e\107\uff9e\001\002\000\050\004\071\017\101" +
    "\032\064\045\072\050\065\051\073\054\061\055\102\060" +
    "\077\061\063\066\u0120\067\067\071\103\074\060\076\053" +
    "\103\100\104\062\105\044\107\070\001\002\000\116\004" +
    "\uff9d\010\uff9d\012\uff9d\013\uff9d\015\uff9d\017\uff9d\021\uff9d" +
    "\022\uff9d\023\uff9d\030\uff9d\032\uff9d\033\uff9d\034\uff9d\040" +
    "\uff9d\041\uff9d\043\uff9d\045\uff9d\050\uff9d\051\uff9d\054\uff9d" +
    "\055\uff9d\060\uff9d\061\uff9d\062\uff9d\064\uff9d\067\uff9d\071" +
    "\uff9d\072\uff9d\074\uff9d\076\uff9d\077\uff9d\101\uff9d\102\uff9d" +
    "\103\uff9d\104\uff9d\105\uff9d\106\uff9d\107\uff9d\001\002\000" +
    "\116\004\uffa4\010\uffa4\012\uffa4\013\uffa4\015\uffa4\017\uffa4" +
    "\021\uffa4\022\uffa4\023\uffa4\030\uffa4\032\uffa4\033\uffa4\034" +
    "\uffa4\040\uffa4\041\uffa4\043\uffa4\045\uffa4\050\uffa4\051\uffa4" +
    "\054\uffa4\055\uffa4\060\uffa4\061\uffa4\062\uffa4\064\uffa4\067" +
    "\uffa4\071\uffa4\072\uffa4\074\uffa4\076\uffa4\077\uffa4\101\uffa4" +
    "\102\uffa4\103\uffa4\104\uffa4\105\uffa4\106\uffa4\107\uffa4\001" +
    "\002\000\116\004\uffb0\010\uffb0\012\uffb0\013\uffb0\015\uffb0" +
    "\017\uffb0\021\uffb0\022\uffb0\023\uffb0\030\uffb0\032\uffb0\033" +
    "\uffb0\034\uffb0\040\uffb0\041\uffb0\043\uffb0\045\uffb0\050\uffb0" +
    "\051\uffb0\054\uffb0\055\uffb0\060\uffb0\061\uffb0\062\uffb0\064" +
    "\uffb0\067\uffb0\071\uffb0\072\uffb0\074\uffb0\076\uffb0\077\uffb0" +
    "\101\uffb0\102\uffb0\103\uffb0\104\uffb0\105\uffb0\106\uffb0\107" +
    "\uffb0\001\002\000\046\004\071\017\101\032\064\045\072" +
    "\050\065\051\073\054\061\055\102\060\077\061\063\067" +
    "\067\071\103\074\060\076\053\103\100\104\062\105\044" +
    "\107\070\001\002\000\116\004\071\010\uffe4\012\uffe4\013" +
    "\364\015\354\017\101\021\uffe4\022\342\023\340\030\360" +
    "\032\064\033\uffe4\034\366\040\370\041\uffe4\043\347\045" +
    "\072\050\065\051\073\054\061\055\102\060\077\061\063" +
    "\062\uffad\064\344\067\067\071\103\072\015\074\060\076" +
    "\053\077\337\101\350\102\341\103\100\104\062\105\044" +
    "\106\uffe4\107\070\001\002\000\116\004\uff9c\010\uff9c\012" +
    "\uff9c\013\uff9c\015\uff9c\017\uff9c\021\uff9c\022\uff9c\023\uff9c" +
    "\030\uff9c\032\uff9c\033\uff9c\034\uff9c\040\uff9c\041\uff9c\043" +
    "\uff9c\045\uff9c\050\uff9c\051\uff9c\054\uff9c\055\uff9c\060\uff9c" +
    "\061\uff9c\062\uff9c\064\uff9c\067\uff9c\071\uff9c\072\uff9c\074" +
    "\uff9c\076\uff9c\077\uff9c\101\uff9c\102\uff9c\103\uff9c\104\uff9c" +
    "\105\uff9c\106\uff9c\107\uff9c\001\002\000\116\004\uffa7\010" +
    "\uffa7\012\uffa7\013\uffa7\015\uffa7\017\uffa7\021\uffa7\022\uffa7" +
    "\023\uffa7\030\uffa7\032\uffa7\033\uffa7\034\uffa7\040\uffa7\041" +
    "\uffa7\043\uffa7\045\uffa7\050\uffa7\051\uffa7\054\uffa7\055\uffa7" +
    "\060\uffa7\061\uffa7\062\uffa7\064\uffa7\067\uffa7\071\uffa7\072" +
    "\uffa7\074\uffa7\076\uffa7\077\uffa7\101\uffa7\102\uffa7\103\uffa7" +
    "\104\uffa7\105\uffa7\106\uffa7\107\uffa7\001\002\000\004\042" +
    "\u0114\001\002\000\116\004\uffa5\010\uffa5\012\uffa5\013\uffa5" +
    "\015\uffa5\017\uffa5\021\uffa5\022\uffa5\023\uffa5\030\uffa5\032" +
    "\uffa5\033\uffa5\034\uffa5\040\uffa5\041\uffa5\043\uffa5\045\uffa5" +
    "\050\uffa5\051\uffa5\054\uffa5\055\uffa5\060\uffa5\061\uffa5\062" +
    "\uffa5\064\uffa5\067\uffa5\071\uffa5\072\uffa5\074\uffa5\076\uffa5" +
    "\077\uffa5\101\uffa5\102\uffa5\103\uffa5\104\uffa5\105\uffa5\106" +
    "\uffa5\107\uffa5\001\002\000\004\066\u0113\001\002\000\004" +
    "\062\u0112\001\002\000\004\045\u010e\001\002\000\116\004" +
    "\uffa3\010\uffa3\012\uffa3\013\uffa3\015\uffa3\017\uffa3\021\uffa3" +
    "\022\uffa3\023\uffa3\030\uffa3\032\uffa3\033\uffa3\034\uffa3\040" +
    "\uffa3\041\uffa3\043\uffa3\045\uffa3\050\uffa3\051\uffa3\054\uffa3" +
    "\055\uffa3\060\uffa3\061\uffa3\062\uffa3\064\uffa3\067\uffa3\071" +
    "\uffa3\072\uffa3\074\uffa3\076\uffa3\077\uffa3\101\uffa3\102\uffa3" +
    "\103\uffa3\104\uffa3\105\uffa3\106\uffa3\107\uffa3\001\002\000" +
    "\116\004\uffa9\010\uffa9\012\uffa9\013\uffa9\015\uffa9\017\uffa9" +
    "\021\uffa9\022\uffa9\023\uffa9\030\uffa9\032\uffa9\033\uffa9\034" +
    "\uffa9\040\uffa9\041\uffa9\043\uffa9\045\uffa9\050\uffa9\051\uffa9" +
    "\054\uffa9\055\uffa9\060\uffa9\061\uffa9\062\uffa9\064\uffa9\067" +
    "\uffa9\071\uffa9\072\uffa9\074\uffa9\076\uffa9\077\uffa9\101\uffa9" +
    "\102\uffa9\103\uffa9\104\uffa9\105\uffa9\106\uffa9\107\uffa9\001" +
    "\002\000\116\004\uffab\010\uffab\012\uffab\013\uffab\015\uffab" +
    "\017\uffab\021\uffab\022\uffab\023\uffab\030\uffab\032\uffab\033" +
    "\uffab\034\uffab\040\uffab\041\uffab\043\uffab\045\uffab\050\uffab" +
    "\051\uffab\054\uffab\055\uffab\060\uffab\061\uffab\062\uffab\064" +
    "\uffab\067\uffab\071\uffab\072\uffab\074\uffab\076\uffab\077\uffab" +
    "\101\uffab\102\uffab\103\uffab\104\uffab\105\uffab\106\uffab\107" +
    "\uffab\001\002\000\004\066\uff81\001\002\000\116\004\uffa8" +
    "\010\uffa8\012\uffa8\013\uffa8\015\uffa8\017\uffa8\021\uffa8\022" +
    "\uffa8\023\uffa8\030\uffa8\032\uffa8\033\uffa8\034\uffa8\040\uffa8" +
    "\041\uffa8\043\uffa8\045\uffa8\050\uffa8\051\uffa8\054\uffa8\055" +
    "\uffa8\060\uffa8\061\uffa8\062\uffa8\064\uffa8\067\uffa8\071\uffa8" +
    "\072\uffa8\074\uffa8\076\uffa8\077\uffa8\101\uffa8\102\uffa8\103" +
    "\uffa8\104\uffa8\105\uffa8\106\uffa8\107\uffa8\001\002\000\004" +
    "\045\u0102\001\002\000\116\004\uffa1\010\uffa1\012\uffa1\013" +
    "\uffa1\015\uffa1\017\uffa1\021\uffa1\022\uffa1\023\uffa1\030\uffa1" +
    "\032\uffa1\033\uffa1\034\uffa1\040\uffa1\041\uffa1\043\uffa1\045" +
    "\uffa1\050\uffa1\051\uffa1\054\uffa1\055\uffa1\060\uffa1\061\uffa1" +
    "\062\uffa1\064\uffa1\067\uffa1\071\uffa1\072\uffa1\074\uffa1\076" +
    "\uffa1\077\uffa1\101\uffa1\102\uffa1\103\uffa1\104\uffa1\105\uffa1" +
    "\106\uffa1\107\uffa1\001\002\000\046\004\071\017\101\032" +
    "\064\045\072\050\065\051\073\054\061\055\102\060\077" +
    "\061\063\067\067\071\103\074\060\076\053\103\100\104" +
    "\062\105\044\107\070\001\002\000\116\004\uff9b\010\uff9b" +
    "\012\uff9b\013\uff9b\015\uff9b\017\uff9b\021\uff9b\022\uff9b\023" +
    "\uff9b\030\uff9b\032\uff9b\033\uff9b\034\uff9b\040\uff9b\041\uff9b" +
    "\043\uff9b\045\uff9b\050\uff9b\051\uff9b\054\uff9b\055\uff9b\060" +
    "\uff9b\061\uff9b\062\uff9b\064\uff9b\067\uff9b\071\uff9b\072\uff9b" +
    "\074\uff9b\076\uff9b\077\uff9b\101\uff9b\102\uff9b\103\uff9b\104" +
    "\uff9b\105\uff9b\106\uff9b\107\uff9b\001\002\000\116\004\uffa2" +
    "\010\uffa2\012\uffa2\013\uffa2\015\uffa2\017\uffa2\021\uffa2\022" +
    "\uffa2\023\uffa2\030\uffa2\032\uffa2\033\uffa2\034\uffa2\040\uffa2" +
    "\041\uffa2\043\uffa2\045\uffa2\050\uffa2\051\uffa2\054\uffa2\055" +
    "\uffa2\060\uffa2\061\uffa2\062\uffa2\064\uffa2\067\uffa2\071\uffa2" +
    "\072\uffa2\074\uffa2\076\uffa2\077\uffa2\101\uffa2\102\uffa2\103" +
    "\uffa2\104\uffa2\105\uffa2\106\uffa2\107\uffa2\001\002\000\004" +
    "\043\uff8b\001\002\000\004\043\347\001\002\000\120\004" +
    "\uff8a\010\uff8a\012\uff8a\013\uff8a\015\uff8a\017\uff8a\021\uff8a" +
    "\022\uff8a\023\uff8a\025\uff8a\030\uff8a\032\uff8a\033\uff8a\034" +
    "\uff8a\040\uff8a\041\uff8a\043\uff8a\045\uff8a\050\uff8a\051\uff8a" +
    "\054\uff8a\055\uff8a\060\uff8a\061\uff8a\062\uff8a\064\uff8a\067" +
    "\uff8a\071\uff8a\072\uff8a\074\uff8a\076\uff8a\077\uff8a\101\uff8a" +
    "\102\uff8a\103\uff8a\104\uff8a\105\uff8a\106\uff8a\107\uff8a\001" +
    "\002\000\120\004\uff87\010\uff87\012\uff87\013\uff87\015\uff87" +
    "\017\uff87\021\uff87\022\uff87\023\uff87\025\u0100\030\uff87\032" +
    "\uff87\033\uff87\034\uff87\040\uff87\041\uff87\043\uff87\045\uff87" +
    "\050\uff87\051\uff87\054\uff87\055\uff87\060\uff87\061\uff87\062" +
    "\uff87\064\uff87\067\uff87\071\uff87\072\uff87\074\uff87\076\uff87" +
    "\077\uff87\101\uff87\102\uff87\103\uff87\104\uff87\105\uff87\106" +
    "\uff87\107\uff87\001\002\000\116\004\uff89\010\uff89\012\uff89" +
    "\013\uff89\015\uff89\017\uff89\021\uff89\022\uff89\023\uff89\030" +
    "\uff89\032\uff89\033\uff89\034\uff89\040\uff89\041\uff89\043\uff89" +
    "\045\uff89\050\uff89\051\uff89\054\uff89\055\uff89\060\uff89\061" +
    "\uff89\062\uff89\064\uff89\067\uff89\071\uff89\072\uff89\074\uff89" +
    "\076\uff89\077\uff89\101\uff89\102\uff89\103\uff89\104\uff89\105" +
    "\uff89\106\uff89\107\uff89\001\002\000\004\043\347\001\002" +
    "\000\116\004\uff88\010\uff88\012\uff88\013\uff88\015\uff88\017" +
    "\uff88\021\uff88\022\uff88\023\uff88\030\uff88\032\uff88\033\uff88" +
    "\034\uff88\040\uff88\041\uff88\043\uff88\045\uff88\050\uff88\051" +
    "\uff88\054\uff88\055\uff88\060\uff88\061\uff88\062\uff88\064\uff88" +
    "\067\uff88\071\uff88\072\uff88\074\uff88\076\uff88\077\uff88\101" +
    "\uff88\102\uff88\103\uff88\104\uff88\105\uff88\106\uff88\107\uff88" +
    "\001\002\000\012\012\033\033\035\041\036\106\031\001" +
    "\002\000\006\004\u0104\107\uff93\001\002\000\004\107\uff94" +
    "\001\002\000\004\107\u0106\001\002\000\004\016\u0107\001" +
    "\002\000\046\004\071\017\101\032\064\045\072\050\065" +
    "\051\073\054\061\055\102\060\077\061\063\067\067\071" +
    "\103\074\060\076\053\103\100\104\062\105\044\107\070" +
    "\001\002\000\004\065\u0109\001\002\000\004\043\uff83\001" +
    "\002\000\004\043\347\001\002\000\116\004\uff82\010\uff82" +
    "\012\uff82\013\uff82\015\uff82\017\uff82\021\uff82\022\uff82\023" +
    "\uff82\030\uff82\032\uff82\033\uff82\034\uff82\040\uff82\041\uff82" +
    "\043\uff82\045\uff82\050\uff82\051\uff82\054\uff82\055\uff82\060" +
    "\uff82\061\uff82\062\uff82\064\uff82\067\uff82\071\uff82\072\uff82" +
    "\074\uff82\076\uff82\077\uff82\101\uff82\102\uff82\103\uff82\104" +
    "\uff82\105\uff82\106\uff82\107\uff82\001\002\000\004\066\u010d" +
    "\001\002\000\116\004\uff80\010\uff80\012\uff80\013\uff80\015" +
    "\uff80\017\uff80\021\uff80\022\uff80\023\uff80\030\uff80\032\uff80" +
    "\033\uff80\034\uff80\040\uff80\041\uff80\043\uff80\045\uff80\050" +
    "\uff80\051\uff80\054\uff80\055\uff80\060\uff80\061\uff80\062\uff80" +
    "\064\uff80\067\uff80\071\uff80\072\uff80\074\uff80\076\uff80\077" +
    "\uff80\101\uff80\102\uff80\103\uff80\104\uff80\105\uff80\106\uff80" +
    "\107\uff80\001\002\000\046\004\071\017\101\032\064\045" +
    "\072\050\065\051\073\054\061\055\102\060\077\061\063" +
    "\067\067\071\103\074\060\076\053\103\100\104\062\105" +
    "\044\107\070\001\002\000\004\065\u0110\001\002\000\004" +
    "\066\u0111\001\002\000\116\004\uff7d\010\uff7d\012\uff7d\013" +
    "\uff7d\015\uff7d\017\uff7d\021\uff7d\022\uff7d\023\uff7d\030\uff7d" +
    "\032\uff7d\033\uff7d\034\uff7d\040\uff7d\041\uff7d\043\uff7d\045" +
    "\uff7d\050\uff7d\051\uff7d\054\uff7d\055\uff7d\060\uff7d\061\uff7d" +
    "\062\uff7d\064\uff7d\067\uff7d\071\uff7d\072\uff7d\074\uff7d\076" +
    "\uff7d\077\uff7d\101\uff7d\102\uff7d\103\uff7d\104\uff7d\105\uff7d" +
    "\106\uff7d\107\uff7d\001\002\000\012\035\uffd4\062\uffd4\075" +
    "\uffd4\106\uffd4\001\002\000\116\004\uffa6\010\uffa6\012\uffa6" +
    "\013\uffa6\015\uffa6\017\uffa6\021\uffa6\022\uffa6\023\uffa6\030" +
    "\uffa6\032\uffa6\033\uffa6\034\uffa6\040\uffa6\041\uffa6\043\uffa6" +
    "\045\uffa6\050\uffa6\051\uffa6\054\uffa6\055\uffa6\060\uffa6\061" +
    "\uffa6\062\uffa6\064\uffa6\067\uffa6\071\uffa6\072\uffa6\074\uffa6" +
    "\076\uffa6\077\uffa6\101\uffa6\102\uffa6\103\uffa6\104\uffa6\105" +
    "\uffa6\106\uffa6\107\uffa6\001\002\000\046\004\071\017\101" +
    "\032\064\045\072\050\065\051\073\054\061\055\102\060" +
    "\077\061\063\067\067\071\103\074\060\076\053\103\100" +
    "\104\062\105\044\107\070\001\002\000\004\066\u0116\001" +
    "\002\000\116\004\uff7a\010\uff7a\012\uff7a\013\uff7a\015\uff7a" +
    "\017\uff7a\021\uff7a\022\uff7a\023\uff7a\030\uff7a\032\uff7a\033" +
    "\uff7a\034\uff7a\040\uff7a\041\uff7a\043\uff7a\045\uff7a\050\uff7a" +
    "\051\uff7a\054\uff7a\055\uff7a\060\uff7a\061\uff7a\062\uff7a\064" +
    "\uff7a\067\uff7a\071\uff7a\072\uff7a\074\uff7a\076\uff7a\077\uff7a" +
    "\101\uff7a\102\uff7a\103\uff7a\104\uff7a\105\uff7a\106\uff7a\107" +
    "\uff7a\001\002\000\116\004\uffaa\010\uffaa\012\uffaa\013\uffaa" +
    "\015\uffaa\017\uffaa\021\uffaa\022\uffaa\023\uffaa\030\uffaa\032" +
    "\uffaa\033\uffaa\034\uffaa\040\uffaa\041\uffaa\043\uffaa\045\uffaa" +
    "\050\uffaa\051\uffaa\054\uffaa\055\uffaa\060\uffaa\061\uffaa\062" +
    "\uffaa\064\uffaa\067\uffaa\071\uffaa\072\uffaa\074\uffaa\076\uffaa" +
    "\077\uffaa\101\uffaa\102\uffaa\103\uffaa\104\uffaa\105\uffaa\106" +
    "\uffaa\107\uffaa\001\002\000\006\016\240\066\uff8d\001\002" +
    "\000\004\066\u011a\001\002\000\116\004\uff90\010\uff90\012" +
    "\uff90\013\uff90\015\uff90\017\uff90\021\uff90\022\uff90\023\uff90" +
    "\030\uff90\032\uff90\033\uff90\034\uff90\040\uff90\041\uff90\043" +
    "\uff90\045\uff90\050\uff90\051\uff90\054\uff90\055\uff90\060\uff90" +
    "\061\uff90\062\uff90\064\uff90\067\uff90\071\uff90\072\uff90\074" +
    "\uff90\076\uff90\077\uff90\101\uff90\102\uff90\103\uff90\104\uff90" +
    "\105\uff90\106\uff90\107\uff90\001\002\000\116\004\071\010" +
    "\uffe4\012\uffe4\013\364\015\354\017\101\021\uffe4\022\342" +
    "\023\340\030\360\032\064\033\uffe4\034\366\040\370\041" +
    "\uffe4\043\347\045\072\050\065\051\073\054\061\055\102" +
    "\060\077\061\063\062\uffac\064\344\067\067\071\103\072" +
    "\015\074\060\076\053\077\337\101\350\102\341\103\100" +
    "\104\062\105\044\106\uffe4\107\070\001\002\000\004\062" +
    "\uffaf\001\002\000\004\062\u011e\001\002\000\120\004\uffae" +
    "\010\uffae\012\uffae\013\uffae\015\uffae\017\uffae\021\uffae\022" +
    "\uffae\023\uffae\025\uffae\030\uffae\032\uffae\033\uffae\034\uffae" +
    "\040\uffae\041\uffae\043\uffae\045\uffae\050\uffae\051\uffae\054" +
    "\uffae\055\uffae\060\uffae\061\uffae\062\uffae\064\uffae\067\uffae" +
    "\071\uffae\072\uffae\074\uffae\076\uffae\077\uffae\101\uffae\102" +
    "\uffae\103\uffae\104\uffae\105\uffae\106\uffae\107\uffae\001\002" +
    "\000\004\066\u0121\001\002\000\116\004\uff7c\010\uff7c\012" +
    "\uff7c\013\uff7c\015\uff7c\017\uff7c\021\uff7c\022\uff7c\023\uff7c" +
    "\030\uff7c\032\uff7c\033\uff7c\034\uff7c\040\uff7c\041\uff7c\043" +
    "\uff7c\045\uff7c\050\uff7c\051\uff7c\054\uff7c\055\uff7c\060\uff7c" +
    "\061\uff7c\062\uff7c\064\uff7c\067\uff7c\071\uff7c\072\uff7c\074" +
    "\uff7c\076\uff7c\077\uff7c\101\uff7c\102\uff7c\103\uff7c\104\uff7c" +
    "\105\uff7c\106\uff7c\107\uff7c\001\002\000\116\004\uff7b\010" +
    "\uff7b\012\uff7b\013\uff7b\015\uff7b\017\uff7b\021\uff7b\022\uff7b" +
    "\023\uff7b\030\uff7b\032\uff7b\033\uff7b\034\uff7b\040\uff7b\041" +
    "\uff7b\043\uff7b\045\uff7b\050\uff7b\051\uff7b\054\uff7b\055\uff7b" +
    "\060\uff7b\061\uff7b\062\uff7b\064\uff7b\067\uff7b\071\uff7b\072" +
    "\uff7b\074\uff7b\076\uff7b\077\uff7b\101\uff7b\102\uff7b\103\uff7b" +
    "\104\uff7b\105\uff7b\106\uff7b\107\uff7b\001\002\000\004\066" +
    "\u0123\001\002\000\116\004\uff7e\010\uff7e\012\uff7e\013\uff7e" +
    "\015\uff7e\017\uff7e\021\uff7e\022\uff7e\023\uff7e\030\uff7e\032" +
    "\uff7e\033\uff7e\034\uff7e\040\uff7e\041\uff7e\043\uff7e\045\uff7e" +
    "\050\uff7e\051\uff7e\054\uff7e\055\uff7e\060\uff7e\061\uff7e\062" +
    "\uff7e\064\uff7e\067\uff7e\071\uff7e\072\uff7e\074\uff7e\076\uff7e" +
    "\077\uff7e\101\uff7e\102\uff7e\103\uff7e\104\uff7e\105\uff7e\106" +
    "\uff7e\107\uff7e\001\002\000\004\066\u0125\001\002\000\116" +
    "\004\uff8f\010\uff8f\012\uff8f\013\uff8f\015\uff8f\017\uff8f\021" +
    "\uff8f\022\uff8f\023\uff8f\030\uff8f\032\uff8f\033\uff8f\034\uff8f" +
    "\040\uff8f\041\uff8f\043\uff8f\045\uff8f\050\uff8f\051\uff8f\054" +
    "\uff8f\055\uff8f\060\uff8f\061\uff8f\062\uff8f\064\uff8f\067\uff8f" +
    "\071\uff8f\072\uff8f\074\uff8f\076\uff8f\077\uff8f\101\uff8f\102" +
    "\uff8f\103\uff8f\104\uff8f\105\uff8f\106\uff8f\107\uff8f\001\002" +
    "\000\050\004\071\017\101\026\u012a\032\064\045\072\050" +
    "\065\051\073\054\061\055\102\060\077\061\063\067\067" +
    "\071\103\074\060\076\053\103\100\104\062\105\044\107" +
    "\070\001\002\000\006\057\uff76\066\uff76\001\002\000\006" +
    "\057\uff78\066\uff78\001\002\000\006\057\u012b\066\u012c\001" +
    "\002\000\006\057\uff75\066\uff75\001\002\000\050\004\071" +
    "\017\101\026\u012a\032\064\045\072\050\065\051\073\054" +
    "\061\055\102\060\077\061\063\067\067\071\103\074\060" +
    "\076\053\103\100\104\062\105\044\107\070\001\002\000" +
    "\116\004\uff79\010\uff79\012\uff79\013\uff79\015\uff79\017\uff79" +
    "\021\uff79\022\uff79\023\uff79\030\uff79\032\uff79\033\uff79\034" +
    "\uff79\040\uff79\041\uff79\043\uff79\045\uff79\050\uff79\051\uff79" +
    "\054\uff79\055\uff79\060\uff79\061\uff79\062\uff79\064\uff79\067" +
    "\uff79\071\uff79\072\uff79\074\uff79\076\uff79\077\uff79\101\uff79" +
    "\102\uff79\103\uff79\104\uff79\105\uff79\106\uff79\107\uff79\001" +
    "\002\000\006\057\uff77\066\uff77\001\002\000\046\004\071" +
    "\017\101\032\064\045\072\050\065\051\073\054\061\055" +
    "\102\060\077\061\063\067\067\071\103\074\060\076\053" +
    "\103\100\104\062\105\044\107\070\001\002\000\004\043" +
    "\uff85\001\002\000\004\043\347\001\002\000\116\004\uff84" +
    "\010\uff84\012\uff84\013\uff84\015\uff84\017\uff84\021\uff84\022" +
    "\uff84\023\uff84\030\uff84\032\uff84\033\uff84\034\uff84\040\uff84" +
    "\041\uff84\043\uff84\045\uff84\050\uff84\051\uff84\054\uff84\055" +
    "\uff84\060\uff84\061\uff84\062\uff84\064\uff84\067\uff84\071\uff84" +
    "\072\uff84\074\uff84\076\uff84\077\uff84\101\uff84\102\uff84\103" +
    "\uff84\104\uff84\105\uff84\106\uff84\107\uff84\001\002\000\012" +
    "\012\033\033\035\041\036\106\031\001\002\000\006\020" +
    "\uff97\065\uff97\001\002\000\004\107\u0135\001\002\000\010" +
    "\020\uff96\044\uff96\065\uff96\001\002\000\010\020\uffb4\044" +
    "\156\065\uffb4\001\002\000\006\020\uff95\065\uff95\001\002" +
    "\000\004\045\uffd3\001\002\000\004\045\u013a\001\002\000" +
    "\004\065\u013b\001\002\000\004\043\u013c\001\002\000\116" +
    "\004\071\010\uffe4\012\uffe4\013\364\015\354\017\101\021" +
    "\uffe4\022\342\023\340\030\360\032\064\033\uffe4\034\366" +
    "\040\370\041\uffe4\043\347\045\072\050\065\051\073\054" +
    "\061\055\102\060\077\061\063\062\uffac\064\344\067\067" +
    "\071\103\072\015\074\060\076\053\077\337\101\350\102" +
    "\341\103\100\104\062\105\044\106\uffe4\107\070\001\002" +
    "\000\004\062\u013e\001\002\000\012\035\uffd2\062\uffd2\075" +
    "\uffd2\106\uffd2\001\002\000\014\012\033\033\035\041\036" +
    "\100\u0142\106\031\001\002\000\006\004\uffbc\107\uffbc\001" +
    "\002\000\006\004\u0104\107\uff93\001\002\000\006\004\uffbb" +
    "\107\uffbb\001\002\000\004\107\u0144\001\002\000\004\045" +
    "\uffcc\001\002\000\004\045\u0146\001\002\000\014\012\033" +
    "\033\035\041\036\065\uff99\106\031\001\002\000\004\065" +
    "\u0148\001\002\000\004\043\uffcb\001\002\000\004\043\u014a" +
    "\001\002\000\116\004\071\010\uffe4\012\uffe4\013\364\015" +
    "\354\017\101\021\uffe4\022\342\023\340\030\360\032\064" +
    "\033\uffe4\034\366\040\370\041\uffe4\043\347\045\072\050" +
    "\065\051\073\054\061\055\102\060\077\061\063\062\uffac" +
    "\064\344\067\067\071\103\072\015\074\060\076\053\077" +
    "\337\101\350\102\341\103\100\104\062\105\044\106\uffe4" +
    "\107\070\001\002\000\004\062\uffca\001\002\000\004\062" +
    "\u014d\001\002\000\032\002\uffc9\010\uffc9\012\uffc9\021\uffc9" +
    "\031\uffc9\033\uffc9\035\uffc9\041\uffc9\062\uffc9\072\uffc9\073" +
    "\uffc9\106\uffc9\001\002\000\004\016\u0154\001\002\000\004" +
    "\107\u0150\001\002\000\006\044\156\066\uffb4\001\002\000" +
    "\004\066\ufff4\001\002\000\004\066\u0153\001\002\000\030" +
    "\002\ufff3\010\ufff3\012\ufff3\021\ufff3\031\ufff3\033\ufff3\035" +
    "\ufff3\041\ufff3\072\ufff3\073\ufff3\106\ufff3\001\002\000\014" +
    "\012\033\033\035\041\036\100\u0142\106\031\001\002\000" +
    "\004\107\u0156\001\002\000\004\045\uffc8\001\002\000\004" +
    "\045\u0158\001\002\000\014\012\033\033\035\041\036\065" +
    "\uff99\106\031\001\002\000\004\065\u015a\001\002\000\004" +
    "\066\uffc7\001\002\000\004\066\u015c\001\002\000\030\002" +
    "\uffc6\010\uffc6\012\uffc6\021\uffc6\031\uffc6\033\uffc6\035\uffc6" +
    "\041\uffc6\072\uffc6\073\uffc6\106\uffc6\001\002\000\004\002" +
    "\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u015b\000\006\003\003\125\004\001\001\000\002\001" +
    "\001\000\026\004\021\005\017\006\015\007\016\010\005" +
    "\011\020\012\013\013\022\014\007\050\012\001\001\000" +
    "\002\001\001\000\006\100\025\101\u014e\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\100" +
    "\025\101\024\102\031\104\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\006\023\007\016\010\005\011\020\012\013\013\022" +
    "\014\007\050\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\044\145\107\265\110\266\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\044\145" +
    "\110\144\001\001\000\002\001\001\000\004\100\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\054\074\057" +
    "\075\060\065\061\056\062\055\063\054\065\073\066\053" +
    "\067\047\070\046\071\044\072\042\073\050\074\045\076" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\052\133\001\001\000\002\001\001\000\004\051\126\001" +
    "\001\000\004\053\120\001\001\000\004\055\212\001\001" +
    "\000\004\136\202\001\001\000\002\001\001\000\004\056" +
    "\112\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\054\074\057\075\072" +
    "\166\073\050\074\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\054\074" +
    "\057\075\072\147\073\050\074\045\001\001\000\046\054" +
    "\074\057\075\060\137\061\056\062\055\063\054\065\073" +
    "\066\053\067\047\070\046\071\044\072\042\073\050\074" +
    "\045\100\025\101\024\102\135\104\136\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\054\074\057\075\072" +
    "\106\073\050\074\045\001\001\000\014\054\074\057\075" +
    "\072\105\073\050\074\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\054\074\057\075\072\103\073\050\074\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\054\074\057\075\066\111\067\047\070" +
    "\046\071\044\072\110\073\050\074\045\001\001\000\002" +
    "\001\001\000\004\056\112\001\001\000\022\054\074\057" +
    "\075\067\115\070\046\071\044\072\110\073\050\074\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\053" +
    "\120\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\054\074\057\075\070\123\071\044\072\110\073\050\074" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\051\126\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\054\074\057\075\071\127\072\110\073\050\074\045" +
    "\001\001\000\004\052\133\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\054\074\057\075" +
    "\072\134\073\050\074\045\001\001\000\002\001\001\000" +
    "\006\044\145\110\144\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\054\074\057\075\072" +
    "\142\073\050\074\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\044\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\054\074\057\075" +
    "\072\151\073\050\074\045\100\025\101\024\102\152\103" +
    "\153\104\154\001\001\000\002\001\001\000\006\044\145" +
    "\110\144\001\001\000\010\045\160\115\156\116\157\001" +
    "\001\000\002\001\001\000\040\054\074\057\075\060\065" +
    "\061\056\062\055\063\054\065\073\066\053\067\047\070" +
    "\046\071\044\072\042\073\050\074\045\076\163\001\001" +
    "\000\002\001\001\000\004\045\161\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\164\170\001\001\000\032\054\074\057\075\062\171" +
    "\063\054\065\073\066\053\067\047\070\046\071\044\072" +
    "\110\073\050\074\045\001\001\000\002\001\001\000\004" +
    "\165\173\001\001\000\030\054\074\057\075\063\174\065" +
    "\073\066\053\067\047\070\046\071\044\072\110\073\050" +
    "\074\045\001\001\000\002\001\001\000\030\054\074\057" +
    "\075\064\177\065\176\066\053\067\047\070\046\071\044" +
    "\072\110\073\050\074\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\054\074\057\075\065\201\066\053" +
    "\067\047\070\046\071\044\072\110\073\050\074\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\054\074\057\075\060\223\061\056\062\055\063" +
    "\054\065\073\066\053\067\047\070\046\071\044\072\042" +
    "\073\050\074\045\001\001\000\002\001\001\000\042\054" +
    "\074\057\075\060\215\061\056\062\055\063\054\065\073" +
    "\066\053\067\047\070\046\071\044\072\042\073\050\074" +
    "\045\123\217\124\216\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\054\074\057" +
    "\075\060\222\061\056\062\055\063\054\065\073\066\053" +
    "\067\047\070\046\071\044\072\042\073\050\074\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\054\074\057\075\060\226\061\056\062\055\063" +
    "\054\065\073\066\053\067\047\070\046\071\044\072\042" +
    "\073\050\074\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\054\074\057\075\060\065\061\056\062\055" +
    "\063\054\065\073\066\053\067\047\070\046\071\044\072" +
    "\042\073\050\074\045\076\231\001\001\000\004\135\232" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\133" +
    "\235\001\001\000\010\045\160\115\236\116\157\001\001" +
    "\000\006\111\240\112\241\001\001\000\002\001\001\000" +
    "\004\134\242\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\054\074\057\075\060\215\061" +
    "\056\062\055\063\054\065\073\066\053\067\047\070\046" +
    "\071\044\072\042\073\050\074\045\123\245\124\216\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\131\250" +
    "\001\001\000\002\001\001\000\036\054\074\057\075\060" +
    "\252\061\056\062\055\063\054\065\073\066\053\067\047" +
    "\070\046\071\044\072\042\073\050\074\045\001\001\000" +
    "\004\132\253\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\127\256\001\001\000\010\045\160\115\257\116" +
    "\157\001\001\000\004\077\260\001\001\000\004\130\263" +
    "\001\001\000\036\054\074\057\075\060\262\061\056\062" +
    "\055\063\054\065\073\066\053\067\047\070\046\071\044" +
    "\072\042\073\050\074\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\044\146\001\001\000\002\001\001\000\004\137\271\001" +
    "\001\000\016\017\272\020\274\100\025\101\024\102\135" +
    "\104\273\001\001\000\026\015\306\016\300\020\302\021" +
    "\305\100\025\101\024\102\135\104\273\113\307\114\304" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\045" +
    "\160\115\276\116\157\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\142\323\001\001\000\010\015\306\016\300" +
    "\021\322\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\140\310\001\001\000\012\007\313\022\314\023\312" +
    "\024\311\001\001\000\002\001\001\000\006\007\313\024" +
    "\320\001\001\000\002\001\001\000\004\141\315\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\142\323\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\075\327\100\025\101\024\102" +
    "\152\103\325\104\154\121\330\122\326\001\001\000\004" +
    "\047\u0133\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\143\332\001\001\000\002\001\001" +
    "\000\102\012\361\013\364\025\362\026\352\027\354\031" +
    "\351\032\370\033\360\034\345\035\371\036\366\037\334" +
    "\040\335\041\342\042\344\050\012\054\074\057\075\060" +
    "\355\061\056\062\055\063\054\065\073\066\053\067\047" +
    "\070\046\071\044\072\042\073\050\074\045\117\356\120" +
    "\350\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\157\u012d\001\001\000\002\001\001\000\014\054\074\057" +
    "\075\072\u0123\073\050\074\045\001\001\000\004\163\u0121" +
    "\001\001\000\002\001\001\000\036\054\074\057\075\060" +
    "\u011e\061\056\062\055\063\054\065\073\066\053\067\047" +
    "\070\046\071\044\072\042\073\050\074\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\152\u011a\001\001" +
    "\000\014\054\074\057\075\072\u0117\073\050\074\045\001" +
    "\001\000\076\012\361\013\364\025\u0116\026\352\027\354" +
    "\031\351\032\370\033\360\034\345\035\371\036\366\037" +
    "\334\040\335\041\342\042\344\050\012\054\074\057\075" +
    "\060\355\061\056\062\055\063\054\065\073\066\053\067" +
    "\047\070\046\071\044\072\042\073\050\074\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\162\u010b\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\054\074\057\075\060" +
    "\372\061\056\062\055\063\054\065\073\066\053\067\047" +
    "\070\046\071\044\072\042\073\050\074\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\155\373\001\001" +
    "\000\004\026\374\001\001\000\004\156\375\001\001\000" +
    "\004\030\376\001\001\000\002\001\001\000\004\026\u0100" +
    "\001\001\000\002\001\001\000\014\100\025\101\024\102" +
    "\152\103\u0102\104\154\001\001\000\004\047\u0104\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\054\074\057\075\060\u0107\061\056\062\055\063\054" +
    "\065\073\066\053\067\047\070\046\071\044\072\042\073" +
    "\050\074\045\001\001\000\002\001\001\000\004\161\u0109" +
    "\001\001\000\004\026\u010a\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\054\074\057\075" +
    "\060\u010e\061\056\062\055\063\054\065\073\066\053\067" +
    "\047\070\046\071\044\072\042\073\050\074\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\054\074\057\075" +
    "\072\u0114\073\050\074\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\111\u0118\112\241" +
    "\001\001\000\002\001\001\000\002\001\001\000\102\012" +
    "\361\013\364\025\362\026\352\027\354\031\351\032\370" +
    "\033\360\034\345\035\371\036\366\037\334\040\335\041" +
    "\342\042\344\050\012\054\074\057\075\060\355\061\056" +
    "\062\055\063\054\065\073\066\053\067\047\070\046\071" +
    "\044\072\042\073\050\074\045\117\u011b\120\350\001\001" +
    "\000\004\153\u011c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\043\u0127\054\074\057\075\060\u0126" +
    "\061\056\062\055\063\054\065\073\066\053\067\047\070" +
    "\046\071\044\072\042\073\050\074\045\106\u0128\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\043\u012c\054\074\057\075\060\u0126" +
    "\061\056\062\055\063\054\065\073\066\053\067\047\070" +
    "\046\071\044\072\042\073\050\074\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\054\074\057\075\060" +
    "\u012e\061\056\062\055\063\054\065\073\066\053\067\047" +
    "\070\046\071\044\072\042\073\050\074\045\001\001\000" +
    "\004\160\u012f\001\001\000\004\026\u0130\001\001\000\002" +
    "\001\001\000\016\075\u0132\100\025\101\024\102\152\103" +
    "\325\104\154\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\154\u0135\001\001\000\010\045\160\115\u0136\116" +
    "\157\001\001\000\002\001\001\000\004\144\u0138\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\102\012\361\013\364\025\362\026\352\027\354\031\351" +
    "\032\370\033\360\034\345\035\371\036\366\037\334\040" +
    "\335\041\342\042\344\050\012\054\074\057\075\060\355" +
    "\061\056\062\055\063\054\065\073\066\053\067\047\070" +
    "\046\071\044\072\042\073\050\074\045\117\u013c\120\350" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\100" +
    "\025\101\024\102\152\103\u013f\104\154\105\u0140\001\001" +
    "\000\002\001\001\000\004\047\u0142\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\145\u0144\001\001\000\002" +
    "\001\001\000\022\075\327\100\025\101\024\102\152\103" +
    "\325\104\154\121\u0146\122\326\001\001\000\002\001\001" +
    "\000\004\146\u0148\001\001\000\002\001\001\000\102\012" +
    "\361\013\364\025\362\026\352\027\354\031\351\032\370" +
    "\033\360\034\345\035\371\036\366\037\334\040\335\041" +
    "\342\042\344\050\012\054\074\057\075\060\355\061\056" +
    "\062\055\063\054\065\073\066\053\067\047\070\046\071" +
    "\044\072\042\073\050\074\045\117\u014a\120\350\001\001" +
    "\000\004\147\u014b\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\045\160" +
    "\115\u0150\116\157\001\001\000\004\126\u0151\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\100\025\101\024" +
    "\102\152\103\u013f\104\154\105\u0154\001\001\000\002\001" +
    "\001\000\004\150\u0156\001\001\000\002\001\001\000\022" +
    "\075\327\100\025\101\024\102\152\103\325\104\154\121" +
    "\u0158\122\326\001\001\000\002\001\001\000\004\151\u015a" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return new Symbol (sym.EOF); 
    }



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // UnarySign ::= T_MINUS 
            {
              Operator RESULT = null;
		
                        RESULT = new UnaryMinus();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(45/*UnarySign*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // UnarySign ::= T_PLUS 
            {
              Operator RESULT = null;
		
                        RESULT = new UnaryPlus();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(45/*UnarySign*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // Designator3 ::= T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator3_ID (_1, "local");
                    
              CUP$parser$result = new java_cup.runtime.Symbol(58/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // Designator3 ::= T_COLONCOLON T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator3_ID (_1, "global");
                    
              CUP$parser$result = new java_cup.runtime.Symbol(58/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // Designator3 ::= T_THIS 
            {
              STO RESULT = null;
		
                        RESULT = ((MyParser) parser).DoStructThis();   // fix me!
                    
              CUP$parser$result = new java_cup.runtime.Symbol(58/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // Designator3 ::= T_NULLPTR 
            {
              STO RESULT = null;
		
                        RESULT = new ConstSTO ("nullptr", new NullPointerType(), 0);
                        RESULT.setRValue();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(58/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // Designator3 ::= T_FALSE 
            {
              STO RESULT = null;
		
                        ConstSTO res =  new ConstSTO ("false", new BoolType(), 0);
                        res.setLiteral();
                        RESULT = res;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(58/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // Designator3 ::= T_TRUE 
            {
              STO RESULT = null;
		
                        ConstSTO res =  new ConstSTO ("true", new BoolType(), 1);
                        res.setLiteral();
                        RESULT = res;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(58/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // Designator3 ::= T_STR_LITERAL 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        ConstSTO res = new ConstSTO(_1, new StringType(), _1);
                        res.setLiteral();
                        RESULT = res;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(58/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // Designator3 ::= T_FLOAT_LITERAL 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        ConstSTO res =  new ConstSTO (_1, new FloatType(), Float.parseFloat(_1));
                        res.setLiteral();
                        RESULT = res;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(58/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // Designator3 ::= T_INT_LITERAL 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        ConstSTO res =  new ConstSTO (_1, new IntType(), Integer.parseInt(_1));
                        res.setLiteral();
                        RESULT = res;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(58/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // Designator3 ::= T_LPAREN Expr T_RPAREN 
            {
              STO RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = _2;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(58/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // Designator2 ::= Designator3 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(57/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // Designator2 ::= Designator2 T_LPAREN OptExprList T_RPAREN 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = ((MyParser) parser).DoFuncCall (_1, _2);
                        // RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(57/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // Designator2 ::= Designator2 IncDecOpPost 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Operator _2 = (Operator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoUnaryExpr (_2, _1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(57/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // Designator2 ::= Designator2 T_ARROW T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator2_Arrow (_1, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(57/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // Designator2 ::= Designator2 T_LBRACKET Expr T_RBRACKET 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator2_Array (_1, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(57/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // Designator2 ::= Designator2 T_DOT T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator2_Dot (_1, _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(57/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // Designator ::= Designator2 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(56/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // Designator ::= IncDecOpPre Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operator _1 = (Operator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoUnaryExpr (_1, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(56/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // Designator ::= T_LPAREN DecoratedType T_RPAREN Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoTypeCast(_1, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(56/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // Designator ::= T_SIZEOF T_LPAREN Type OptArrayList T_RPAREN 
            {
              STO RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        if (_3 != null)
                            RESULT = ((MyParser) parser).DoSizeOfTypeArray(_2, _3);
                        else
                            RESULT = ((MyParser) parser).DoSizeOfType(_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(56/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // Designator ::= T_SIZEOF T_LPAREN Designator T_RPAREN 
            {
              STO RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = ((MyParser) parser).DoSizeOfSTO(_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(56/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // Designator ::= T_NOT Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoUnaryExpr (new NotOp(), _1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(56/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // Designator ::= UnarySign Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operator _1 = (Operator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        //if (_1.equals("-")) _2.setNegative();
                        RESULT = ((MyParser) parser).DoUnaryExpr (_1, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(56/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // Designator ::= T_AMPERSAND Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator1_Ampersand(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(56/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // Designator ::= T_STAR Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator1_Star(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(56/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // IncDecOpPost ::= T_MINUSMINUS 
            {
              Operator RESULT = null;
		
                        RESULT = new DecOp(false);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(43/*IncDecOpPost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // IncDecOpPost ::= T_PLUSPLUS 
            {
              Operator RESULT = null;
		
                        RESULT = new IncOp(false);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(43/*IncDecOpPost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // IncDecOpPre ::= T_MINUSMINUS 
            {
              Operator RESULT = null;
		
                        RESULT = new DecOp(true);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(42/*IncDecOpPre*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // IncDecOpPre ::= T_PLUSPLUS 
            {
              Operator RESULT = null;
		
                        RESULT = new IncOp(true);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(42/*IncDecOpPre*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // MulOp ::= T_MOD 
            {
              Operator RESULT = null;
		
                        RESULT = new ModOp();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(40/*MulOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // MulOp ::= T_SLASH 
            {
              Operator RESULT = null;
		
                        RESULT = new SlashOp();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(40/*MulOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // MulOp ::= T_STAR 
            {
              Operator RESULT = null;
		
                        RESULT = new StarOp();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(40/*MulOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // AddOp ::= T_MINUS 
            {
              Operator RESULT = null;
		
                        RESULT = new MinusOp();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(39/*AddOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // AddOp ::= T_PLUS 
            {
              Operator RESULT = null;
		
                        RESULT = new AddOp();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(39/*AddOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // Relation ::= T_GTE 
            {
              Operator RESULT = null;
		
                        RESULT = new GTEOp();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(41/*Relation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // Relation ::= T_LTE 
            {
              Operator RESULT = null;
		
                        RESULT = new LTEOp();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(41/*Relation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // Relation ::= T_GT 
            {
              Operator RESULT = null;
		
                        RESULT = new GTOp();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(41/*Relation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // Relation ::= T_LT 
            {
              Operator RESULT = null;
		
                        RESULT = new LTOp();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(41/*Relation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // Equality ::= T_NEQ 
            {
              Operator RESULT = null;
		
                        RESULT = new NEQOp();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(44/*Equality*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // Equality ::= T_EQU 
            {
              Operator RESULT = null;
		
                        RESULT = new EQUOp();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(44/*Equality*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // Expr6 ::= Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(55/*Expr6*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // Expr6 ::= Expr6 MulOp Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operator _2 = (Operator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, _2, _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(55/*Expr6*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // Expr5 ::= Expr6 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(54/*Expr5*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // Expr5 ::= Expr5 AddOp Expr6 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operator _2 = (Operator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, _2, _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(54/*Expr5*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // Expr4 ::= Expr5 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(53/*Expr4*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // Expr4 ::= Expr4 Relation Expr5 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operator _2 = (Operator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, _2, _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(53/*Expr4*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // Expr3 ::= Expr4 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(52/*Expr3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // Expr3 ::= Expr3 Equality Expr4 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operator _2 = (Operator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, _2, _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(52/*Expr3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // Expr2_2 ::= Expr3 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(51/*Expr2_2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // Expr2_2 ::= Expr2_2 T_AMPERSAND Expr3 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, new BwAndOp(), _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(51/*Expr2_2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // Expr2_1 ::= Expr2_2 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(50/*Expr2_1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // Expr2_1 ::= Expr2_1 T_CARET Expr2_2 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, new BwXorOp(), _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(50/*Expr2_1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // Expr2 ::= Expr2_2 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(49/*Expr2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // Expr2 ::= Expr2 T_BAR Expr2_1 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, new BwOrOp(), _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(49/*Expr2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // Expr1 ::= Expr2 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(48/*Expr1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // Expr1 ::= Expr1 T_AND NT$32 Expr2 
            {
              STO RESULT = null;
              // propagate RESULT from NT$32
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (STO) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, new AndOp(), _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(48/*Expr1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // NT$32 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoShortCircuitLHS(_1, new AndOp());
                    
              CUP$parser$result = new java_cup.runtime.Symbol(115/*NT$32*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Expr0 ::= Expr1 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(47/*Expr0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // Expr0 ::= Expr0 T_OR NT$31 Expr1 
            {
              STO RESULT = null;
              // propagate RESULT from NT$31
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (STO) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, new OrOp(), _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(47/*Expr0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // NT$31 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoShortCircuitLHS(_1, new OrOp());
                    
              CUP$parser$result = new java_cup.runtime.Symbol(114/*NT$31*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // Expr ::= Expr0 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(46/*Expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // Expr ::= Designator T_ASSIGN Expr 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoAssignExpr (_1, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(46/*Expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // ExprList ::= ExprList T_COMMA Expr 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                        RESULT.addElement(_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(82/*ExprList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // ExprList ::= Expr 
            {
              Vector RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new Vector();
                        RESULT.addElement(_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(82/*ExprList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // OptExprList ::= 
            {
              Vector RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(81/*OptExprList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // OptExprList ::= ExprList 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new Vector(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(81/*OptExprList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ConstExpr ::= Expr 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(60/*ConstExpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // WritePair ::= T_ENDL 
            {
              Object RESULT = null;
		
                        ((MyParser) parser).DoEndLine();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(33/*WritePair*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // WritePair ::= Expr 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                        ((MyParser) parser).DoWritePair(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(33/*WritePair*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // WritePairList ::= WritePairList T_OSTREAM WritePair 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                        RESULT.addElement(_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(68/*WritePairList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // WritePairList ::= WritePair 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new Vector();
                        RESULT.addElement(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(68/*WritePairList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // WriteStmt ::= T_COUT T_OSTREAM WritePairList T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        ((MyParser) parser).DoWriteStmt(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(32/*WriteStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // ReadStmt ::= T_CIN T_ISTREAM Designator T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        ((MyParser) parser).DoReadStmt(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(31/*ReadStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ReturnStmt ::= T_RETURN Expr T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        ((MyParser) parser).DoReturnStmt(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(30/*ReturnStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ReturnStmt ::= T_RETURN T_SEMI 
            {
              Object RESULT = null;
		
                         ((MyParser) parser).DoVoidReturnStmt();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(30/*ReturnStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ExitStmt ::= T_EXIT T_LPAREN Expr T_RPAREN T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        ((MyParser) parser).DoExitStmt(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(29/*ExitStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ContinueStmt ::= T_CONTINUE NT$30 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$30
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(28/*ContinueStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // NT$30 ::= 
            {
              Object RESULT = null;

                        ((MyParser) parser).DoContinueStmt();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(113/*NT$30*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // BreakStmt ::= T_BREAK NT$29 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$29
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(27/*BreakStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // NT$29 ::= 
            {
              Object RESULT = null;

                        // System.out.println("T_Break. In loop: " + ((MyParser) parser).inLoop() );
                        ((MyParser) parser).DoBreakStmt();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(112/*NT$29*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ForeachStmt ::= T_FOREACH T_LPAREN Type OptRef T_ID T_COLON Expr T_RPAREN NT$28 CodeBlock 
            {
              Object RESULT = null;
              // propagate RESULT from NT$28
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Boolean _4 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                        ((MyParser) parser).closeLoop();
                        ((MyParser) parser).DoBlockClose();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(25/*ForeachStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // NT$28 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Boolean _4 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoBlockOpen();

                        ((MyParser) parser).DoForEachStmt(_1, _2, _3, _4);

                        ((MyParser) parser).openLoop();

                    
              CUP$parser$result = new java_cup.runtime.Symbol(111/*NT$28*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // WhileStmt ::= T_WHILE NT$26 Expr NT$27 CodeBlock 
            {
              Object RESULT = null;
              // propagate RESULT from NT$26
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
              // propagate RESULT from NT$27
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        ((MyParser) parser).closeLoop();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(26/*WhileStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // NT$27 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).checkConditionalExpr(_1, "while");
                        ((MyParser) parser).openLoop();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(110/*NT$27*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // NT$26 ::= 
            {
              Object RESULT = null;

                        ((MyParser) parser).doWhile_1();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(109/*NT$26*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // OptElse ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*OptElse*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // OptElse ::= T_ELSE CodeBlock 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*OptElse*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // IfStmt ::= T_IF Expr NT$24 CodeBlock NT$25 OptElse 
            {
              Object RESULT = null;
              // propagate RESULT from NT$24
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
              // propagate RESULT from NT$25
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
                        ((MyParser) parser).doIfElseBlock();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(21/*IfStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NT$25 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

                        ((MyParser) parser).doIfCodeBlock();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(108/*NT$25*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // NT$24 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).checkConditionalExpr(_1, "if");
                    
              CUP$parser$result = new java_cup.runtime.Symbol(107/*NT$24*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CtorCall ::= T_COLON T_LPAREN OptExprList T_RPAREN 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        if (_1 == null) {
                            RESULT = new Vector();
                            STO empty = new VarSTO("empty ctor call");
                            RESULT.addElement(empty);
                         }
                        else
                            RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(72/*CtorCall*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // OptCtorCall ::= 
            {
              Vector RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(71/*OptCtorCall*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // OptCtorCall ::= CtorCall 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(71/*OptCtorCall*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // DeleteStmt ::= T_DELETE Designator T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        ((MyParser) parser).DoDeleteStmt(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(24/*DeleteStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // NewStmt ::= T_NEW Designator OptCtorCall T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        ((MyParser) parser).DoNewStmt(_1, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(23/*NewStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // OptInit ::= 
            {
              STO RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(61/*OptInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // OptInit ::= T_ASSIGN Expr 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(61/*OptInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // OptRef ::= 
            {
              Boolean RESULT = null;
		
                        RESULT = false;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(37/*OptRef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OptRef ::= T_AMPERSAND 
            {
              Boolean RESULT = null;
		
                        RESULT = true;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(37/*OptRef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ParamDecl ::= Type OptRef T_ID NT$23 OptArrayList 
            {
              STO RESULT = null;
              // propagate RESULT from NT$23
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (STO) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Boolean _2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        if (_4 != null)
                            RESULT = ((MyParser) parser).DoArrayParam(_3, _1, _4);
                        if (_2) ((STO)RESULT).setReference();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(59/*ParamDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // NT$23 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean _2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        RESULT = new VarSTO(_3, _1);
                        if (_2) ((STO)RESULT).setReference();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(106/*NT$23*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ParamList ::= ParamList T_COMMA ParamDecl 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                        RESULT.addElement (_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(80/*ParamList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ParamList ::= ParamDecl 
            {
              Vector RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new Vector ();
                        RESULT.addElement (_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(80/*ParamList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OptParamList ::= 
            {
              Vector RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(79/*OptParamList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OptParamList ::= ParamList 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new Vector(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(79/*OptParamList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Stmt ::= DeleteStmt 
            {
              Object RESULT = null;
		 RESULT = "DeleteStmt"; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Stmt ::= NewStmt 
            {
              Object RESULT = null;
		 RESULT = "NewStmt"; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Stmt ::= WriteStmt 
            {
              Object RESULT = null;
		 RESULT = "WriteStmt"; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Stmt ::= ReadStmt 
            {
              Object RESULT = null;
		 RESULT = "ReadStmt"; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Stmt ::= ReturnStmt 
            {
              Object RESULT = null;
		 RESULT = "ReturnStmt"; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Stmt ::= ExitStmt 
            {
              Object RESULT = null;
		 RESULT = "ExitStmt"; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Stmt ::= ContinueStmt 
            {
              Object RESULT = null;
		 RESULT = "ContinueStmt"; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Stmt ::= BreakStmt 
            {
              Object RESULT = null;
		 RESULT = "BreakStmt"; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Stmt ::= ForeachStmt 
            {
              Object RESULT = null;
		 RESULT = "ForeachStmt"; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Stmt ::= WhileStmt 
            {
              Object RESULT = null;
		 RESULT = "WhileStmt"; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Stmt ::= IfStmt 
            {
              Object RESULT = null;
		 RESULT = "IfStmt"; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Stmt ::= Expr T_SEMI 
            {
              Object RESULT = null;
		 RESULT = "Expr"; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Stmt ::= CodeBlock 
            {
              Object RESULT = null;
		 RESULT = "CodeBlock"; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Stmt ::= ConstDecl 
            {
              Object RESULT = null;
		 RESULT = "ConstDecl"; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Stmt ::= VarDecl 
            {
              Object RESULT = null;
		 RESULT = "VarDecl"; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // StmtList ::= StmtList Stmt 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                        RESULT.addElement(_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(78/*StmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // StmtList ::= Stmt 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new Vector();
                        RESULT.addElement(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(78/*StmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OptStmtList ::= 
            {
              Vector RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(77/*OptStmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OptStmtList ::= StmtList 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new Vector(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(77/*OptStmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CodeBlock ::= T_LBRACE NT$21 OptStmtList NT$22 T_RBRACE 
            {
              Object RESULT = null;
              // propagate RESULT from NT$21
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
              // propagate RESULT from NT$22
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*CodeBlock*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NT$22 ::= 
            {
              Object RESULT = null;
 ((MyParser) parser).DoBlockClose(); 
              CUP$parser$result = new java_cup.runtime.Symbol(105/*NT$22*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$21 ::= 
            {
              Object RESULT = null;
 ((MyParser) parser).DoBlockOpen(); 
              CUP$parser$result = new java_cup.runtime.Symbol(104/*NT$21*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Array ::= T_LBRACKET ConstExpr T_RBRACKET 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(35/*Array*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ArrayList ::= ArrayList Array 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                        RESULT.addElement(_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(76/*ArrayList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ArrayList ::= Array 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new Vector();
                        RESULT.addElement(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(76/*ArrayList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OptArrayList ::= 
            {
              Vector RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(75/*OptArrayList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OptArrayList ::= ArrayList 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(75/*OptArrayList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Pointer ::= T_STAR 
            {
              Object RESULT = null;
		
                        RESULT = "*";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(34/*Pointer*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // PointerList ::= PointerList Pointer 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                        RESULT.addElement(_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(70/*PointerList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // PointerList ::= Pointer 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new Vector();
                        RESULT.addElement(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(70/*PointerList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OptPointerList ::= 
            {
              Vector RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(69/*OptPointerList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OptPointerList ::= PointerList 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                        //System.out.println(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(69/*OptPointerList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ReturnType ::= T_VOID 
            {
              Type RESULT = null;
		
                        RESULT = new VoidType();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(67/*ReturnType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ReturnType ::= Type 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(67/*ReturnType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // StructType ::= T_ID_U 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                       RESULT = ((MyParser) parser).DoStructType_ID (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(64/*StructType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // BasicType ::= T_BOOL 
            {
              Type RESULT = null;
		
                        RESULT = new BoolType();  // BoolType
                    
              CUP$parser$result = new java_cup.runtime.Symbol(62/*BasicType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // BasicType ::= T_FLOAT 
            {
              Type RESULT = null;
		
                        RESULT = new FloatType();  // FloatType
                    
              CUP$parser$result = new java_cup.runtime.Symbol(62/*BasicType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // BasicType ::= T_INT 
            {
              Type RESULT = null;
		
                        RESULT = new IntType();  // IntType
                    
              CUP$parser$result = new java_cup.runtime.Symbol(62/*BasicType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DecoratedBasicType ::= BasicType OptPointerList 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        if (_2 != null)
                            RESULT = ((MyParser) parser).DoDecoratedPointerType(_1, _2);
                        else
                            RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(63/*DecoratedBasicType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DecoratedType ::= StructType PointerList 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        if (_2 != null)
                            RESULT = ((MyParser) parser).DoDecoratedPointerType(_1, _2);
                        else
                            RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(66/*DecoratedType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DecoratedType ::= DecoratedBasicType 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(66/*DecoratedType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Type ::= StructType 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(65/*Type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Type ::= DecoratedType 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(65/*Type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FuncDecl ::= T_EXTERN T_FUNCTION T_COLON ReturnType T_ID NT$19 T_LPAREN OptParamList T_RPAREN NT$20 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$19
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
              // propagate RESULT from NT$20
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object _5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*FuncDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$20 ::= 
            {
              Object RESULT = null;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object _5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoExternFormalParams(_4, _3);
                        ((MyParser) parser).DoExternFuncDecl_2();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(103/*NT$20*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$19 ::= 
            {
              Object RESULT = null;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object _5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).DoExternFuncDecl_1(_3, _1, false);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(102/*NT$19*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FuncDef ::= T_FUNCTION T_COLON ReturnType OptRef T_ID NT$16 T_LPAREN OptParamList T_RPAREN NT$17 T_LBRACE OptStmtList NT$18 T_RBRACE 
            {
              Object RESULT = null;
              // propagate RESULT from NT$16
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
              // propagate RESULT from NT$17
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
              // propagate RESULT from NT$18
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Boolean _2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _5 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*FuncDef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$18 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Boolean _2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _5 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).DoReturnCheck(_5);
                        ((MyParser) parser).DoFuncDecl_2();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(101/*NT$18*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$17 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Boolean _2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoFormalParams(_4, _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(100/*NT$17*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$16 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean _2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).SaveLineNum ();
                        ((MyParser) parser).DoFuncDecl_1(_3, _1, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(99/*NT$16*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FieldFuncDecl ::= FuncDef 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*FieldFuncDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FieldFuncsList ::= FieldFuncsList FieldFuncDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*FieldFuncsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FieldFuncsList ::= FieldFuncDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*FieldFuncsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OptFieldFuncsList ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*OptFieldFuncsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OptFieldFuncsList ::= FieldFuncsList 
            {
              Object RESULT = null;
		

                    
              CUP$parser$result = new java_cup.runtime.Symbol(16/*OptFieldFuncsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DtorDef ::= T_TILDE T_ID_U NT$15 T_LPAREN T_RPAREN T_LBRACE OptStmtList T_RBRACE 
            {
              Object RESULT = null;
              // propagate RESULT from NT$15
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		
                        ((MyParser) parser).DoFuncDecl_2();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(12/*DtorDef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$15 ::= 
            {
              Object RESULT = null;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).SaveLineNum ();
                        ((MyParser) parser).DoFuncDecl_1("~" + _3, new VoidType(), false);
                        ((MyParser) parser).DoFormalParams(new Vector(), "~" + _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(98/*NT$15*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CtorDef ::= T_ID_U NT$13 T_LPAREN OptParamList T_RPAREN NT$14 T_LBRACE OptStmtList T_RBRACE 
            {
              Object RESULT = null;
              // propagate RESULT from NT$13
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
              // propagate RESULT from NT$14
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
                        ((MyParser) parser).DoFuncDecl_2();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(11/*CtorDef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$14 ::= 
            {
              Object RESULT = null;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoFormalParams(_4, _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(97/*NT$14*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$13 ::= 
            {
              Object RESULT = null;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).SaveLineNum ();
                        ((MyParser) parser).DoFuncDecl_1(_3, new VoidType(), false);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(96/*NT$13*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CtorDtorDecl ::= DtorDef 
            {
              Object RESULT = null;
		
                        RESULT = "dtor";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(15/*CtorDtorDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CtorDtorDecl ::= CtorDef 
            {
              Object RESULT = null;
		
                        RESULT = "ctor";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(15/*CtorDtorDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CtorDtorList ::= CtorDtorList CtorDtorDecl 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                        RESULT.addElement(_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(74/*CtorDtorList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CtorDtorList ::= CtorDtorDecl 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new Vector();
                        RESULT.addElement(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(74/*CtorDtorList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OptCtorDtorList ::= 
            {
              Vector RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(73/*OptCtorDtorList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OptCtorDtorList ::= CtorDtorList 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(73/*OptCtorDtorList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FieldVarDecl ::= DecoratedType T_ID OptArrayList T_SEMI 
            {
              Object RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        if ( _4 != null)
                            ((MyParser) parser).DoArrayDecl (_3, _2, _4, false, null);
                        else
                            ((MyParser) parser).DoVarDecl (_3, _2, null, false);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(14/*FieldVarDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FieldVarsList ::= FieldVarsList FieldVarDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*FieldVarsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FieldVarsList ::= FieldVarDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*FieldVarsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // StructdefDecl ::= T_STRUCTDEF T_ID_U T_LBRACE NT$10 FieldVarsList OptCtorDtorList NT$11 OptFieldFuncsList NT$12 T_RBRACE T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$10
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
              // propagate RESULT from NT$11
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
              // propagate RESULT from NT$12
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Vector _2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*StructdefDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$12 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

                        ((MyParser) parser).DoStructBlockClose(_1);
                        // ((MyParser) parser).DoStructdefDecl (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(95/*NT$12*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$11 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        // Put logic here to create default ctor if needed
                        ((MyParser) parser).DoDefaultCtor(_1);
                        ((MyParser) parser).DoCtor_2(_1, null);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(94/*NT$11*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$10 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoStructBlockOpen(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(93/*NT$10*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OptStatic ::= 
            {
              Boolean RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(38/*OptStatic*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OptStatic ::= T_STATIC 
            {
              Boolean RESULT = null;
		
                        RESULT = true;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(38/*OptStatic*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ConstDecl ::= OptStatic T_CONST T_AUTO T_ID T_ASSIGN ConstExpr NT$9 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$9
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Boolean _1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _5 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*ConstDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$9 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Boolean _1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _5 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        if (_1 == null) _1 = false;

                        ((MyParser) parser).DoAutoConstDecl(_3, _5, _1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(92/*NT$9*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ConstDecl ::= OptStatic T_CONST BasicType T_ID T_ASSIGN ConstExpr NT$8 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$8
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Boolean _1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _5 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*ConstDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$8 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Boolean _1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _5 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        if (_1 == null) _1 = false;

                        ((MyParser) parser).DoConstDecl (_2, _3, _5, _1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(91/*NT$8*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VarDecl ::= OptStatic StructType T_ID NT$6 OptArrayList OptCtorCall NT$7 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$6
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
              // propagate RESULT from NT$7
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Boolean _1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _5 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$7 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Boolean _1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _5 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        if (_1 == null) _1 = false;

                        if (_4 != null)
                            ((MyParser) parser).DoStructArrayInst (_3, _2, _5, _4, _1);
                        else
                            ((MyParser) parser).DoStructInst (_3, _2, _5, _1);

                        ((MyParser) parser).CloseStaticDecl();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(90/*NT$7*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$6 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean _1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                         if (_1 != null)
                             ((MyParser) parser).OpenStaticDecl(_3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(89/*NT$6*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VarDecl ::= OptStatic T_AUTO T_ID NT$4 T_ASSIGN Expr NT$5 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$4
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
              // propagate RESULT from NT$5
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Boolean _1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _5 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$5 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Boolean _1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _5 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        if (_1 == null) _1 = false;

                        ((MyParser) parser).DoAutoVarDecl(_3, _5, _1);

                        ((MyParser) parser).CloseStaticDecl();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(88/*NT$5*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$4 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean _1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        if (_1 != null)
                            ((MyParser) parser).OpenStaticDecl(_3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(87/*NT$4*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VarDecl ::= OptStatic DecoratedType T_ID NT$2 OptArrayList OptInit NT$3 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$2
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
              // propagate RESULT from NT$3
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Boolean _1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _5 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$3 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Boolean _1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _5 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        if (_1 == null) _1 = false;

                        if ( _4 != null)
                            ((MyParser) parser).DoArrayDecl (_3, _2, _4, _1, null);
                        else
                            ((MyParser) parser).DoVarDecl (_3, _2, _5, _1);

                        ((MyParser) parser).CloseStaticDecl();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(86/*NT$3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$2 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean _1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        if (_1 != null)
                            ((MyParser) parser).OpenStaticDecl(_3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(85/*NT$2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ExternDecl ::= T_EXTERN DecoratedBasicType T_ID OptArrayList NT$1 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$1
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*ExternDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$1 ::= 
            {
              Object RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        if ( _4 != null)
                            ((MyParser) parser).DoExternArrayDecl (_3, _2, _4);
                        else
                            ((MyParser) parser).DoExternDecl (_3, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(84/*NT$1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // GlobalDecl ::= FuncDef 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // GlobalDecl ::= FuncDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // GlobalDecl ::= StructdefDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // GlobalDecl ::= ConstDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // GlobalDecl ::= VarDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // GlobalDecl ::= ExternDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // GlobalDecls ::= GlobalDecls GlobalDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*GlobalDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // GlobalDecls ::= GlobalDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*GlobalDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // OptGlobalDecls ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*OptGlobalDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // OptGlobalDecls ::= GlobalDecls 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*OptGlobalDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= NT$0 OptGlobalDecls 
            {
              Object RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        ((MyParser) parser).DoProgramEnd();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT = null;

                        ((MyParser) parser).DoProgramStart();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(83/*NT$0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

