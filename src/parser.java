
//----------------------------------------------------
// The following code was generated by CUP v0.10k TUM Edition 20050516
// Tue Dec 01 01:56:05 PST 2015
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.Vector;
import types.*;
import STO.*;
import operators.*;
import scope.*;

/** CUP v0.10k TUM Edition 20050516 generated parser.
  * @version Tue Dec 01 01:56:05 PST 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\322\000\002\126\002\000\002\003\004\000\002\002" +
    "\004\000\002\004\003\000\002\004\002\000\002\005\003" +
    "\000\002\005\004\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\127\002\000\002\011\010\000\002\130" +
    "\002\000\002\012\011\000\002\131\002\000\002\012\011" +
    "\000\002\132\002\000\002\012\011\000\002\133\002\000" +
    "\002\013\012\000\002\134\002\000\002\013\012\000\002" +
    "\050\003\000\002\050\002\000\002\135\002\000\002\136" +
    "\002\000\002\137\002\000\002\014\015\000\002\017\003" +
    "\000\002\017\004\000\002\020\006\000\002\114\003\000" +
    "\002\114\002\000\002\115\003\000\002\115\004\000\002" +
    "\021\003\000\002\021\003\000\002\140\002\000\002\141" +
    "\002\000\002\015\013\000\002\142\002\000\002\016\012" +
    "\000\002\022\003\000\002\022\002\000\002\023\003\000" +
    "\002\023\004\000\002\024\003\000\002\143\002\000\002" +
    "\144\002\000\002\145\002\000\002\007\020\000\002\146" +
    "\002\000\002\147\002\000\002\010\015\000\002\104\003" +
    "\000\002\104\003\000\002\105\003\000\002\105\004\000" +
    "\002\102\004\000\002\101\003\000\002\101\003\000\002" +
    "\101\003\000\002\103\003\000\002\106\003\000\002\106" +
    "\003\000\002\110\003\000\002\110\002\000\002\111\003" +
    "\000\002\111\004\000\002\044\003\000\002\116\003\000" +
    "\002\116\002\000\002\117\003\000\002\117\004\000\002" +
    "\045\005\000\002\150\002\000\002\151\002\000\002\026" +
    "\007\000\002\120\003\000\002\120\002\000\002\121\003" +
    "\000\002\121\004\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\004\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\122\003\000\002\122\002\000\002\123\003\000\002" +
    "\123\005\000\002\152\002\000\002\076\007\000\002\047" +
    "\003\000\002\047\002\000\002\100\004\000\002\100\002" +
    "\000\002\031\006\000\002\032\005\000\002\112\003\000" +
    "\002\112\002\000\002\113\006\000\002\153\002\000\002" +
    "\154\002\000\002\027\010\000\002\030\004\000\002\030" +
    "\002\000\002\155\002\000\002\156\002\000\002\034\007" +
    "\000\002\157\002\000\002\033\014\000\002\160\002\000" +
    "\002\035\005\000\002\161\002\000\002\036\005\000\002" +
    "\037\007\000\002\040\004\000\002\040\005\000\002\041" +
    "\006\000\002\042\006\000\002\107\003\000\002\107\005" +
    "\000\002\043\003\000\002\043\003\000\002\077\003\000" +
    "\002\124\003\000\002\124\002\000\002\125\003\000\002" +
    "\125\005\000\002\061\005\000\002\061\003\000\002\162" +
    "\002\000\002\062\006\000\002\062\003\000\002\163\002" +
    "\000\002\063\006\000\002\063\003\000\002\064\005\000" +
    "\002\064\003\000\002\065\005\000\002\065\003\000\002" +
    "\066\005\000\002\066\003\000\002\067\005\000\002\067" +
    "\003\000\002\070\005\000\002\070\003\000\002\071\005" +
    "\000\002\071\003\000\002\072\005\000\002\072\003\000" +
    "\002\057\003\000\002\057\003\000\002\053\003\000\002" +
    "\053\003\000\002\053\003\000\002\053\003\000\002\051" +
    "\003\000\002\051\003\000\002\052\003\000\002\052\003" +
    "\000\002\052\003\000\002\054\003\000\002\054\003\000" +
    "\002\054\003\000\002\055\003\000\002\055\003\000\002" +
    "\056\003\000\002\056\003\000\002\073\004\000\002\073" +
    "\004\000\002\073\004\000\002\073\004\000\002\073\006" +
    "\000\002\073\007\000\002\073\006\000\002\073\004\000" +
    "\002\073\003\000\002\074\005\000\002\074\006\000\002" +
    "\074\005\000\002\074\004\000\002\074\006\000\002\074" +
    "\003\000\002\075\005\000\002\075\003\000\002\075\003" +
    "\000\002\075\003\000\002\075\003\000\002\075\003\000" +
    "\002\075\003\000\002\075\003\000\002\075\004\000\002" +
    "\075\003\000\002\060\003\000\002\060\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0158\000\030\002\001\010\001\012\001\021\001\031" +
    "\001\033\001\035\001\041\001\072\001\073\001\106\001" +
    "\001\002\000\004\002\u015a\001\002\000\030\002\ufffd\010" +
    "\uffe7\012\uffe7\021\uffe7\031\007\033\uffe7\035\011\041\uffe7" +
    "\072\015\073\012\106\uffe7\001\002\000\030\002\ufff6\010" +
    "\ufff6\012\ufff6\021\ufff6\031\ufff6\033\ufff6\035\ufff6\041\ufff6" +
    "\072\ufff6\073\ufff6\106\ufff6\001\002\000\012\012\032\033" +
    "\035\035\u014b\041\036\001\002\000\030\002\ufff7\010\ufff7" +
    "\012\ufff7\021\ufff7\031\ufff7\033\ufff7\035\ufff7\041\ufff7\072" +
    "\ufff7\073\ufff7\106\ufff7\001\002\000\004\016\u013c\001\002" +
    "\000\004\106\265\001\002\000\016\010\030\012\032\021" +
    "\034\033\035\041\036\106\031\001\002\000\030\002\ufff9" +
    "\010\ufff9\012\ufff9\021\ufff9\031\ufff9\033\ufff9\035\ufff9\041" +
    "\ufff9\072\ufff9\073\ufff9\106\ufff9\001\002\000\016\010\uffe8" +
    "\012\uffe8\021\uffe8\033\uffe8\041\uffe8\106\uffe8\001\002\000" +
    "\030\002\ufffc\010\ufffc\012\ufffc\021\ufffc\031\ufffc\033\ufffc" +
    "\035\ufffc\041\ufffc\072\ufffc\073\ufffc\106\ufffc\001\002\000" +
    "\030\002\ufff5\010\ufff5\012\ufff5\021\ufff5\031\ufff5\033\ufff5" +
    "\035\ufff5\041\ufff5\072\ufff5\073\ufff5\106\ufff5\001\002\000" +
    "\030\002\ufffe\010\uffe7\012\uffe7\021\uffe7\031\007\033\uffe7" +
    "\035\011\041\uffe7\072\015\073\012\106\uffe7\001\002\000" +
    "\030\002\ufffa\010\ufffa\012\ufffa\021\ufffa\031\ufffa\033\ufffa" +
    "\035\ufffa\041\ufffa\072\ufffa\073\ufffa\106\ufffa\001\002\000" +
    "\004\002\000\001\002\000\030\002\ufff8\010\ufff8\012\ufff8" +
    "\021\ufff8\031\ufff8\033\ufff8\035\ufff8\041\ufff8\072\ufff8\073" +
    "\ufff8\106\ufff8\001\002\000\030\002\ufffb\010\ufffb\012\ufffb" +
    "\021\ufffb\031\ufffb\033\ufffb\035\ufffb\041\ufffb\072\ufffb\073" +
    "\ufffb\106\ufffb\001\002\000\012\004\uffc6\044\uffc6\065\uffc6" +
    "\107\uffc6\001\002\000\014\004\uffbc\044\uffbc\065\uffbc\071" +
    "\144\107\uffbc\001\002\000\004\107\254\001\002\000\004" +
    "\107\247\001\002\000\014\004\uffc0\044\uffc0\065\uffc0\071" +
    "\uffc0\107\uffc0\001\002\000\014\004\uffc1\044\uffc1\065\uffc1" +
    "\071\uffc1\107\uffc1\001\002\000\006\071\144\107\235\001" +
    "\002\000\012\010\040\012\032\033\035\041\036\001\002" +
    "\000\014\004\uffc2\044\uffc2\065\uffc2\071\uffc2\107\uffc2\001" +
    "\002\000\014\004\uffc3\044\uffc3\065\uffc3\071\uffc3\107\uffc3" +
    "\001\002\000\004\107\230\001\002\000\004\107\041\001" +
    "\002\000\004\007\042\001\002\000\046\004\071\017\101" +
    "\032\064\045\072\050\065\051\073\054\061\055\102\060" +
    "\077\061\063\067\067\071\103\074\060\076\052\103\100" +
    "\104\062\105\044\107\070\001\002\000\056\004\uff5d\005" +
    "\uff5d\007\226\011\uff5d\020\uff5d\027\uff5d\036\uff5d\037\uff5d" +
    "\043\uff5d\046\uff5d\047\uff5d\050\uff5d\052\uff5d\053\uff5d\056" +
    "\uff5d\057\uff5d\060\uff5d\063\uff5d\065\uff5d\066\uff5d\070\uff5d" +
    "\071\uff5d\001\002\000\076\004\uff38\005\uff38\006\uff38\007" +
    "\uff38\011\uff38\014\uff38\016\uff38\020\uff38\024\uff38\027\uff38" +
    "\036\uff38\037\uff38\043\uff38\044\uff38\045\uff38\046\uff38\047" +
    "\uff38\050\uff38\051\uff38\052\uff38\053\uff38\056\uff38\057\uff38" +
    "\060\uff38\061\uff38\063\uff38\065\uff38\066\uff38\070\uff38\071" +
    "\uff38\001\002\000\056\004\uff5f\005\uff5f\011\uff5f\014\uff5f" +
    "\020\uff5f\027\uff5f\036\uff5f\037\uff5f\043\uff5f\046\uff5f\047" +
    "\uff5f\050\uff5f\052\131\053\uff5f\056\uff5f\057\uff5f\060\uff5f" +
    "\063\uff5f\065\uff5f\066\uff5f\070\133\071\132\001\002\000" +
    "\076\004\uff3c\005\uff3c\006\uff3c\007\uff3c\011\uff3c\014\uff3c" +
    "\016\uff3c\020\uff3c\024\uff3c\027\uff3c\036\uff3c\037\uff3c\043" +
    "\uff3c\044\uff3c\045\uff3c\046\uff3c\047\uff3c\050\uff3c\051\uff3c" +
    "\052\uff3c\053\uff3c\056\uff3c\057\uff3c\060\uff3c\061\uff3c\063" +
    "\uff3c\065\uff3c\066\uff3c\070\uff3c\071\uff3c\001\002\000\050" +
    "\004\uff61\005\uff61\011\uff61\014\uff61\020\uff61\027\uff61\036" +
    "\uff61\037\uff61\043\uff61\046\uff61\047\uff61\050\126\053\uff61" +
    "\056\uff61\057\uff61\060\125\063\uff61\065\uff61\066\uff61\001" +
    "\002\000\076\004\uff42\005\uff42\006\211\007\uff42\011\uff42" +
    "\014\uff42\016\uff42\020\uff42\024\212\027\uff42\036\uff42\037" +
    "\uff42\043\uff42\044\205\045\207\046\uff42\047\uff42\050\uff42" +
    "\051\210\052\uff42\053\uff42\056\uff42\057\uff42\060\uff42\061" +
    "\206\063\uff42\065\uff42\066\uff42\070\uff42\071\uff42\001\002" +
    "\000\044\004\uff63\005\uff63\011\uff63\014\uff63\020\uff63\027" +
    "\uff63\036\123\037\117\043\uff63\046\121\047\120\053\uff63" +
    "\056\uff63\057\uff63\063\uff63\065\uff63\066\uff63\001\002\000" +
    "\076\004\uff37\005\uff37\006\uff37\007\uff37\011\uff37\014\uff37" +
    "\016\uff37\020\uff37\024\uff37\027\uff37\036\uff37\037\uff37\043" +
    "\uff37\044\uff37\045\uff37\046\uff37\047\uff37\050\uff37\051\uff37" +
    "\052\uff37\053\uff37\056\uff37\057\uff37\060\uff37\061\uff37\063" +
    "\uff37\065\uff37\066\uff37\070\uff37\071\uff37\001\002\000\034" +
    "\004\uff65\005\uff65\011\uff65\014\uff65\020\uff65\027\115\043" +
    "\uff65\053\114\056\uff65\057\uff65\063\uff65\065\uff65\066\uff65" +
    "\001\002\000\004\066\uffea\001\002\000\024\005\uff6b\011" +
    "\176\020\uff6b\043\uff6b\056\uff6b\057\uff6b\063\uff6b\065\uff6b" +
    "\066\uff6b\001\002\000\022\005\173\020\uff6e\043\uff6e\056" +
    "\uff6e\057\uff6e\063\uff6e\065\uff6e\066\uff6e\001\002\000\020" +
    "\020\uff71\043\uff71\056\170\057\uff71\063\uff71\065\uff71\066" +
    "\uff71\001\002\000\076\004\uff34\005\uff34\006\uff34\007\uff34" +
    "\011\uff34\014\uff34\016\uff34\020\uff34\024\uff34\027\uff34\036" +
    "\uff34\037\uff34\043\uff34\044\uff34\045\uff34\046\uff34\047\uff34" +
    "\050\uff34\051\uff34\052\uff34\053\uff34\056\uff34\057\uff34\060" +
    "\uff34\061\uff34\063\uff34\065\uff34\066\uff34\070\uff34\071\uff34" +
    "\001\002\000\046\004\071\017\101\032\064\045\072\050" +
    "\065\051\073\054\061\055\102\060\077\061\063\067\067" +
    "\071\103\074\060\076\052\103\100\104\062\105\044\107" +
    "\070\001\002\000\076\004\uff3a\005\uff3a\006\uff3a\007\uff3a" +
    "\011\uff3a\014\uff3a\016\uff3a\020\uff3a\024\uff3a\027\uff3a\036" +
    "\uff3a\037\uff3a\043\uff3a\044\uff3a\045\uff3a\046\uff3a\047\uff3a" +
    "\050\uff3a\051\uff3a\052\uff3a\053\uff3a\056\uff3a\057\uff3a\060" +
    "\uff3a\061\uff3a\063\uff3a\065\uff3a\066\uff3a\070\uff3a\071\uff3a" +
    "\001\002\000\046\004\uff4e\017\uff4e\032\uff4e\045\uff4e\050" +
    "\uff4e\051\uff4e\054\uff4e\055\uff4e\060\uff4e\061\uff4e\067\uff4e" +
    "\071\uff4e\074\uff4e\076\uff4e\103\uff4e\104\uff4e\105\uff4e\107" +
    "\uff4e\001\002\000\076\004\uff36\005\uff36\006\uff36\007\uff36" +
    "\011\uff36\014\uff36\016\uff36\020\uff36\024\uff36\027\uff36\036" +
    "\uff36\037\uff36\043\uff36\044\uff36\045\uff36\046\uff36\047\uff36" +
    "\050\uff36\051\uff36\052\uff36\053\uff36\056\uff36\057\uff36\060" +
    "\uff36\061\uff36\063\uff36\065\uff36\066\uff36\070\uff36\071\uff36" +
    "\001\002\000\046\004\uff30\017\uff30\032\uff30\045\uff30\050" +
    "\uff30\051\uff30\054\uff30\055\uff30\060\uff30\061\uff30\067\uff30" +
    "\071\uff30\074\uff30\076\uff30\103\uff30\104\uff30\105\uff30\107" +
    "\uff30\001\002\000\006\063\uff77\066\uff77\001\002\000\004" +
    "\045\151\001\002\000\076\004\uff32\005\uff32\006\uff32\007" +
    "\uff32\011\uff32\014\uff32\016\uff32\020\uff32\024\uff32\027\uff32" +
    "\036\uff32\037\uff32\043\uff32\044\uff32\045\uff32\046\uff32\047" +
    "\uff32\050\uff32\051\uff32\052\uff32\053\uff32\056\uff32\057\uff32" +
    "\060\uff32\061\uff32\063\uff32\065\uff32\066\uff32\070\uff32\071" +
    "\uff32\001\002\000\046\004\071\017\101\032\064\045\072" +
    "\050\065\051\073\054\061\055\102\060\077\061\063\067" +
    "\067\071\103\074\060\076\052\103\100\104\062\105\044" +
    "\107\070\001\002\000\056\004\071\012\032\017\101\032" +
    "\064\033\035\041\036\045\072\050\065\051\073\054\061" +
    "\055\102\060\077\061\063\067\067\071\103\074\060\076" +
    "\052\103\100\104\062\105\044\106\031\107\070\001\002" +
    "\000\046\004\uff4d\017\uff4d\032\uff4d\045\uff4d\050\uff4d\051" +
    "\uff4d\054\uff4d\055\uff4d\060\uff4d\061\uff4d\067\uff4d\071\uff4d" +
    "\074\uff4d\076\uff4d\103\uff4d\104\uff4d\105\uff4d\107\uff4d\001" +
    "\002\000\026\004\110\005\uff69\011\uff69\020\uff69\043\uff69" +
    "\056\uff69\057\uff69\063\uff69\065\uff69\066\uff69\001\002\000" +
    "\046\004\071\017\101\032\064\045\072\050\065\051\073" +
    "\054\061\055\102\060\077\061\063\067\067\071\103\074" +
    "\060\076\052\103\100\104\062\105\044\107\070\001\002" +
    "\000\046\004\071\017\101\032\064\045\072\050\065\051" +
    "\073\054\061\055\102\060\077\061\063\067\067\071\103" +
    "\074\060\076\052\103\100\104\062\105\044\107\070\001" +
    "\002\000\046\004\uff31\017\uff31\032\uff31\045\uff31\050\uff31" +
    "\051\uff31\054\uff31\055\uff31\060\uff31\061\uff31\067\uff31\071" +
    "\uff31\074\uff31\076\uff31\103\uff31\104\uff31\105\uff31\107\uff31" +
    "\001\002\000\076\004\uff39\005\uff39\006\uff39\007\uff39\011" +
    "\uff39\014\uff39\016\uff39\020\uff39\024\uff39\027\uff39\036\uff39" +
    "\037\uff39\043\uff39\044\uff39\045\uff39\046\uff39\047\uff39\050" +
    "\uff39\051\uff39\052\uff39\053\uff39\056\uff39\057\uff39\060\uff39" +
    "\061\uff39\063\uff39\065\uff39\066\uff39\070\uff39\071\uff39\001" +
    "\002\000\004\107\105\001\002\000\076\004\uff35\005\uff35" +
    "\006\uff35\007\uff35\011\uff35\014\uff35\016\uff35\020\uff35\024" +
    "\uff35\027\uff35\036\uff35\037\uff35\043\uff35\044\uff35\045\uff35" +
    "\046\uff35\047\uff35\050\uff35\051\uff35\052\uff35\053\uff35\056" +
    "\uff35\057\uff35\060\uff35\061\uff35\063\uff35\065\uff35\066\uff35" +
    "\070\uff35\071\uff35\001\002\000\046\004\071\017\101\032" +
    "\064\045\072\050\065\051\073\054\061\055\102\060\077" +
    "\061\063\067\067\071\103\074\060\076\052\103\100\104" +
    "\062\105\044\107\070\001\002\000\062\004\uff4a\005\uff4a" +
    "\007\uff4a\011\uff4a\014\uff4a\016\uff4a\020\uff4a\027\uff4a\036" +
    "\uff4a\037\uff4a\043\uff4a\046\uff4a\047\uff4a\050\uff4a\052\uff4a" +
    "\053\uff4a\056\uff4a\057\uff4a\060\uff4a\063\uff4a\065\uff4a\066" +
    "\uff4a\070\uff4a\071\uff4a\001\002\000\076\004\uff33\005\uff33" +
    "\006\uff33\007\uff33\011\uff33\014\uff33\016\uff33\020\uff33\024" +
    "\uff33\027\uff33\036\uff33\037\uff33\043\uff33\044\uff33\045\uff33" +
    "\046\uff33\047\uff33\050\uff33\051\uff33\052\uff33\053\uff33\056" +
    "\uff33\057\uff33\060\uff33\061\uff33\063\uff33\065\uff33\066\uff33" +
    "\070\uff33\071\uff33\001\002\000\062\004\uff48\005\uff48\007" +
    "\uff48\011\uff48\014\uff48\016\uff48\020\uff48\027\uff48\036\uff48" +
    "\037\uff48\043\uff48\046\uff48\047\uff48\050\uff48\052\uff48\053" +
    "\uff48\056\uff48\057\uff48\060\uff48\063\uff48\065\uff48\066\uff48" +
    "\070\uff48\071\uff48\001\002\000\062\004\uff43\005\uff43\007" +
    "\uff43\011\uff43\014\uff43\016\uff43\020\uff43\027\uff43\036\uff43" +
    "\037\uff43\043\uff43\046\uff43\047\uff43\050\uff43\052\uff43\053" +
    "\uff43\056\uff43\057\uff43\060\uff43\063\uff43\065\uff43\066\uff43" +
    "\070\uff43\071\uff43\001\002\000\046\004\071\017\101\032" +
    "\064\045\072\050\065\051\073\054\061\055\102\060\077" +
    "\061\063\067\067\071\103\074\060\076\052\103\100\104" +
    "\062\105\044\107\070\001\002\000\056\004\uff5d\005\uff5d" +
    "\011\uff5d\014\uff5d\020\uff5d\027\uff5d\036\uff5d\037\uff5d\043" +
    "\uff5d\046\uff5d\047\uff5d\050\uff5d\052\uff5d\053\uff5d\056\uff5d" +
    "\057\uff5d\060\uff5d\063\uff5d\065\uff5d\066\uff5d\070\uff5d\071" +
    "\uff5d\001\002\000\034\004\uff66\005\uff66\011\uff66\014\uff66" +
    "\020\uff66\027\115\043\uff66\053\114\056\uff66\057\uff66\063" +
    "\uff66\065\uff66\066\uff66\001\002\000\046\004\071\017\101" +
    "\032\064\045\072\050\065\051\073\054\061\055\102\060" +
    "\077\061\063\067\067\071\103\074\060\076\052\103\100" +
    "\104\062\105\044\107\070\001\002\000\046\004\uff5b\017" +
    "\uff5b\032\uff5b\045\uff5b\050\uff5b\051\uff5b\054\uff5b\055\uff5b" +
    "\060\uff5b\061\uff5b\067\uff5b\071\uff5b\074\uff5b\076\uff5b\103" +
    "\uff5b\104\uff5b\105\uff5b\107\uff5b\001\002\000\046\004\uff5c" +
    "\017\uff5c\032\uff5c\045\uff5c\050\uff5c\051\uff5c\054\uff5c\055" +
    "\uff5c\060\uff5c\061\uff5c\067\uff5c\071\uff5c\074\uff5c\076\uff5c" +
    "\103\uff5c\104\uff5c\105\uff5c\107\uff5c\001\002\000\044\004" +
    "\uff64\005\uff64\011\uff64\014\uff64\020\uff64\027\uff64\036\123" +
    "\037\117\043\uff64\046\121\047\120\053\uff64\056\uff64\057" +
    "\uff64\063\uff64\065\uff64\066\uff64\001\002\000\046\004\uff57" +
    "\017\uff57\032\uff57\045\uff57\050\uff57\051\uff57\054\uff57\055" +
    "\uff57\060\uff57\061\uff57\067\uff57\071\uff57\074\uff57\076\uff57" +
    "\103\uff57\104\uff57\105\uff57\107\uff57\001\002\000\046\004" +
    "\uff58\017\uff58\032\uff58\045\uff58\050\uff58\051\uff58\054\uff58" +
    "\055\uff58\060\uff58\061\uff58\067\uff58\071\uff58\074\uff58\076" +
    "\uff58\103\uff58\104\uff58\105\uff58\107\uff58\001\002\000\046" +
    "\004\uff5a\017\uff5a\032\uff5a\045\uff5a\050\uff5a\051\uff5a\054" +
    "\uff5a\055\uff5a\060\uff5a\061\uff5a\067\uff5a\071\uff5a\074\uff5a" +
    "\076\uff5a\103\uff5a\104\uff5a\105\uff5a\107\uff5a\001\002\000" +
    "\046\004\071\017\101\032\064\045\072\050\065\051\073" +
    "\054\061\055\102\060\077\061\063\067\067\071\103\074" +
    "\060\076\052\103\100\104\062\105\044\107\070\001\002" +
    "\000\046\004\uff59\017\uff59\032\uff59\045\uff59\050\uff59\051" +
    "\uff59\054\uff59\055\uff59\060\uff59\061\uff59\067\uff59\071\uff59" +
    "\074\uff59\076\uff59\103\uff59\104\uff59\105\uff59\107\uff59\001" +
    "\002\000\050\004\uff62\005\uff62\011\uff62\014\uff62\020\uff62" +
    "\027\uff62\036\uff62\037\uff62\043\uff62\046\uff62\047\uff62\050" +
    "\126\053\uff62\056\uff62\057\uff62\060\125\063\uff62\065\uff62" +
    "\066\uff62\001\002\000\046\004\uff56\017\uff56\032\uff56\045" +
    "\uff56\050\uff56\051\uff56\054\uff56\055\uff56\060\uff56\061\uff56" +
    "\067\uff56\071\uff56\074\uff56\076\uff56\103\uff56\104\uff56\105" +
    "\uff56\107\uff56\001\002\000\046\004\uff55\017\uff55\032\uff55" +
    "\045\uff55\050\uff55\051\uff55\054\uff55\055\uff55\060\uff55\061" +
    "\uff55\067\uff55\071\uff55\074\uff55\076\uff55\103\uff55\104\uff55" +
    "\105\uff55\107\uff55\001\002\000\046\004\071\017\101\032" +
    "\064\045\072\050\065\051\073\054\061\055\102\060\077" +
    "\061\063\067\067\071\103\074\060\076\052\103\100\104" +
    "\062\105\044\107\070\001\002\000\056\004\uff60\005\uff60" +
    "\011\uff60\014\uff60\020\uff60\027\uff60\036\uff60\037\uff60\043" +
    "\uff60\046\uff60\047\uff60\050\uff60\052\131\053\uff60\056\uff60" +
    "\057\uff60\060\uff60\063\uff60\065\uff60\066\uff60\070\133\071" +
    "\132\001\002\000\046\004\uff52\017\uff52\032\uff52\045\uff52" +
    "\050\uff52\051\uff52\054\uff52\055\uff52\060\uff52\061\uff52\067" +
    "\uff52\071\uff52\074\uff52\076\uff52\103\uff52\104\uff52\105\uff52" +
    "\107\uff52\001\002\000\046\004\uff54\017\uff54\032\uff54\045" +
    "\uff54\050\uff54\051\uff54\054\uff54\055\uff54\060\uff54\061\uff54" +
    "\067\uff54\071\uff54\074\uff54\076\uff54\103\uff54\104\uff54\105" +
    "\uff54\107\uff54\001\002\000\046\004\uff53\017\uff53\032\uff53" +
    "\045\uff53\050\uff53\051\uff53\054\uff53\055\uff53\060\uff53\061" +
    "\uff53\067\uff53\071\uff53\074\uff53\076\uff53\103\uff53\104\uff53" +
    "\105\uff53\107\uff53\001\002\000\046\004\071\017\101\032" +
    "\064\045\072\050\065\051\073\054\061\055\102\060\077" +
    "\061\063\067\067\071\103\074\060\076\052\103\100\104" +
    "\062\105\044\107\070\001\002\000\056\004\uff5e\005\uff5e" +
    "\011\uff5e\014\uff5e\020\uff5e\027\uff5e\036\uff5e\037\uff5e\043" +
    "\uff5e\046\uff5e\047\uff5e\050\uff5e\052\uff5e\053\uff5e\056\uff5e" +
    "\057\uff5e\060\uff5e\063\uff5e\065\uff5e\066\uff5e\070\uff5e\071" +
    "\uff5e\001\002\000\004\071\144\001\002\000\004\065\142" +
    "\001\002\000\004\065\141\001\002\000\076\004\uff3b\005" +
    "\uff3b\006\uff3b\007\uff3b\011\uff3b\014\uff3b\016\uff3b\020\uff3b" +
    "\024\uff3b\027\uff3b\036\uff3b\037\uff3b\043\uff3b\044\uff3b\045" +
    "\uff3b\046\uff3b\047\uff3b\050\uff3b\051\uff3b\052\uff3b\053\uff3b" +
    "\056\uff3b\057\uff3b\060\uff3b\061\uff3b\063\uff3b\065\uff3b\066" +
    "\uff3b\070\uff3b\071\uff3b\001\002\000\046\004\071\017\101" +
    "\032\064\045\072\050\065\051\073\054\061\055\102\060" +
    "\077\061\063\067\067\071\103\074\060\076\052\103\100" +
    "\104\062\105\044\107\070\001\002\000\062\004\uff44\005" +
    "\uff44\007\uff44\011\uff44\014\uff44\016\uff44\020\uff44\027\uff44" +
    "\036\uff44\037\uff44\043\uff44\046\uff44\047\uff44\050\uff44\052" +
    "\uff44\053\uff44\056\uff44\057\uff44\060\uff44\063\uff44\065\uff44" +
    "\066\uff44\070\uff44\071\uff44\001\002\000\014\004\uffb9\044" +
    "\uffb9\065\uffb9\071\uffb9\107\uffb9\001\002\000\014\004\uffc5" +
    "\044\uffc5\065\uffc5\071\144\107\uffc5\001\002\000\014\004" +
    "\uffbb\044\uffbb\065\uffbb\071\uffbb\107\uffbb\001\002\000\014" +
    "\004\uffba\044\uffba\065\uffba\071\uffba\107\uffba\001\002\000" +
    "\062\004\uff49\005\uff49\007\uff49\011\uff49\014\uff49\016\uff49" +
    "\020\uff49\027\uff49\036\uff49\037\uff49\043\uff49\046\uff49\047" +
    "\uff49\050\uff49\052\uff49\053\uff49\056\uff49\057\uff49\060\uff49" +
    "\063\uff49\065\uff49\066\uff49\070\uff49\071\uff49\001\002\000" +
    "\056\004\071\012\032\017\101\032\064\033\035\041\036" +
    "\045\072\050\065\051\073\054\061\055\102\060\077\061" +
    "\063\067\067\071\103\074\060\076\052\103\100\104\062" +
    "\105\044\106\031\107\070\001\002\000\004\065\166\001" +
    "\002\000\014\004\uffc7\044\uffc7\065\uffc7\071\144\107\uffc7" +
    "\001\002\000\006\044\156\065\uffb7\001\002\000\012\004" +
    "\uffc8\044\uffc8\065\uffc8\107\uffc8\001\002\000\046\004\071" +
    "\017\101\032\064\045\072\050\065\051\073\054\061\055" +
    "\102\060\077\061\063\067\067\071\103\074\060\076\052" +
    "\103\100\104\062\105\044\107\070\001\002\000\004\065" +
    "\163\001\002\000\016\007\uffb8\016\uffb8\020\uffb8\044\156" +
    "\065\uffb8\066\uffb8\001\002\000\016\007\uffb6\016\uffb6\020" +
    "\uffb6\044\uffb6\065\uffb6\066\uffb6\001\002\000\016\007\uffb5" +
    "\016\uffb5\020\uffb5\044\uffb5\065\uffb5\066\uffb5\001\002\000" +
    "\062\004\uff45\005\uff45\007\uff45\011\uff45\014\uff45\016\uff45" +
    "\020\uff45\027\uff45\036\uff45\037\uff45\043\uff45\046\uff45\047" +
    "\uff45\050\uff45\052\uff45\053\uff45\056\uff45\057\uff45\060\uff45" +
    "\063\uff45\065\uff45\066\uff45\070\uff45\071\uff45\001\002\000" +
    "\004\063\165\001\002\000\016\007\uffb4\016\uffb4\020\uffb4" +
    "\044\uffb4\065\uffb4\066\uffb4\001\002\000\062\004\uff46\005" +
    "\uff46\007\uff46\011\uff46\014\uff46\016\uff46\020\uff46\027\uff46" +
    "\036\uff46\037\uff46\043\uff46\046\uff46\047\uff46\050\uff46\052" +
    "\uff46\053\uff46\056\uff46\057\uff46\060\uff46\063\uff46\065\uff46" +
    "\066\uff46\070\uff46\071\uff46\001\002\000\062\004\uff47\005" +
    "\uff47\007\uff47\011\uff47\014\uff47\016\uff47\020\uff47\027\uff47" +
    "\036\uff47\037\uff47\043\uff47\046\uff47\047\uff47\050\uff47\052" +
    "\uff47\053\uff47\056\uff47\057\uff47\060\uff47\063\uff47\065\uff47" +
    "\066\uff47\070\uff47\071\uff47\001\002\000\046\004\uff70\017" +
    "\uff70\032\uff70\045\uff70\050\uff70\051\uff70\054\uff70\055\uff70" +
    "\060\uff70\061\uff70\067\uff70\071\uff70\074\uff70\076\uff70\103" +
    "\uff70\104\uff70\105\uff70\107\uff70\001\002\000\046\004\071" +
    "\017\101\032\064\045\072\050\065\051\073\054\061\055" +
    "\102\060\077\061\063\067\067\071\103\074\060\076\052" +
    "\103\100\104\062\105\044\107\070\001\002\000\022\005" +
    "\173\020\uff6f\043\uff6f\056\uff6f\057\uff6f\063\uff6f\065\uff6f" +
    "\066\uff6f\001\002\000\046\004\uff6d\017\uff6d\032\uff6d\045" +
    "\uff6d\050\uff6d\051\uff6d\054\uff6d\055\uff6d\060\uff6d\061\uff6d" +
    "\067\uff6d\071\uff6d\074\uff6d\076\uff6d\103\uff6d\104\uff6d\105" +
    "\uff6d\107\uff6d\001\002\000\046\004\071\017\101\032\064" +
    "\045\072\050\065\051\073\054\061\055\102\060\077\061" +
    "\063\067\067\071\103\074\060\076\052\103\100\104\062" +
    "\105\044\107\070\001\002\000\024\005\uff6c\011\176\020" +
    "\uff6c\043\uff6c\056\uff6c\057\uff6c\063\uff6c\065\uff6c\066\uff6c" +
    "\001\002\000\046\004\071\017\101\032\064\045\072\050" +
    "\065\051\073\054\061\055\102\060\077\061\063\067\067" +
    "\071\103\074\060\076\052\103\100\104\062\105\044\107" +
    "\070\001\002\000\030\004\110\005\uff67\011\uff67\014\uff67" +
    "\020\uff67\043\uff67\056\uff67\057\uff67\063\uff67\065\uff67\066" +
    "\uff67\001\002\000\026\005\uff6a\011\uff6a\014\201\020\uff6a" +
    "\043\uff6a\056\uff6a\057\uff6a\063\uff6a\065\uff6a\066\uff6a\001" +
    "\002\000\046\004\071\017\101\032\064\045\072\050\065" +
    "\051\073\054\061\055\102\060\077\061\063\067\067\071" +
    "\103\074\060\076\052\103\100\104\062\105\044\107\070" +
    "\001\002\000\030\004\110\005\uff68\011\uff68\014\uff68\020" +
    "\uff68\043\uff68\056\uff68\057\uff68\063\uff68\065\uff68\066\uff68" +
    "\001\002\000\004\066\204\001\002\000\126\002\uffe9\004" +
    "\uffe9\010\uffe9\012\uffe9\013\uffe9\015\uffe9\017\uffe9\021\uffe9" +
    "\022\uffe9\023\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034" +
    "\uffe9\035\uffe9\040\uffe9\041\uffe9\043\uffe9\045\uffe9\050\uffe9" +
    "\051\uffe9\054\uffe9\055\uffe9\060\uffe9\061\uffe9\062\uffe9\064" +
    "\uffe9\067\uffe9\071\uffe9\072\uffe9\073\uffe9\074\uffe9\076\uffe9" +
    "\077\uffe9\101\uffe9\102\uffe9\103\uffe9\104\uffe9\105\uffe9\106" +
    "\uffe9\107\uffe9\001\002\000\046\004\071\017\101\032\064" +
    "\045\072\050\065\051\073\054\061\055\102\060\077\061" +
    "\063\067\067\071\103\074\060\076\052\103\100\104\062" +
    "\105\044\107\070\001\002\000\076\004\uff4c\005\uff4c\006" +
    "\uff4c\007\uff4c\011\uff4c\014\uff4c\016\uff4c\020\uff4c\024\uff4c" +
    "\027\uff4c\036\uff4c\037\uff4c\043\uff4c\044\uff4c\045\uff4c\046" +
    "\uff4c\047\uff4c\050\uff4c\051\uff4c\052\uff4c\053\uff4c\056\uff4c" +
    "\057\uff4c\060\uff4c\061\uff4c\063\uff4c\065\uff4c\066\uff4c\070" +
    "\uff4c\071\uff4c\001\002\000\050\004\071\017\101\032\064" +
    "\045\072\050\065\051\073\054\061\055\102\060\077\061" +
    "\063\065\uff75\067\067\071\103\074\060\076\052\103\100" +
    "\104\062\105\044\107\070\001\002\000\076\004\uff4b\005" +
    "\uff4b\006\uff4b\007\uff4b\011\uff4b\014\uff4b\016\uff4b\020\uff4b" +
    "\024\uff4b\027\uff4b\036\uff4b\037\uff4b\043\uff4b\044\uff4b\045" +
    "\uff4b\046\uff4b\047\uff4b\050\uff4b\051\uff4b\052\uff4b\053\uff4b" +
    "\056\uff4b\057\uff4b\060\uff4b\061\uff4b\063\uff4b\065\uff4b\066" +
    "\uff4b\070\uff4b\071\uff4b\001\002\000\004\107\215\001\002" +
    "\000\004\107\214\001\002\000\076\004\uff3e\005\uff3e\006" +
    "\uff3e\007\uff3e\011\uff3e\014\uff3e\016\uff3e\020\uff3e\024\uff3e" +
    "\027\uff3e\036\uff3e\037\uff3e\043\uff3e\044\uff3e\045\uff3e\046" +
    "\uff3e\047\uff3e\050\uff3e\051\uff3e\052\uff3e\053\uff3e\056\uff3e" +
    "\057\uff3e\060\uff3e\061\uff3e\063\uff3e\065\uff3e\066\uff3e\070" +
    "\uff3e\071\uff3e\001\002\000\076\004\uff41\005\uff41\006\uff41" +
    "\007\uff41\011\uff41\014\uff41\016\uff41\020\uff41\024\uff41\027" +
    "\uff41\036\uff41\037\uff41\043\uff41\044\uff41\045\uff41\046\uff41" +
    "\047\uff41\050\uff41\051\uff41\052\uff41\053\uff41\056\uff41\057" +
    "\uff41\060\uff41\061\uff41\063\uff41\065\uff41\066\uff41\070\uff41" +
    "\071\uff41\001\002\000\076\004\uff3f\005\uff3f\006\uff3f\007" +
    "\uff3f\011\uff3f\014\uff3f\016\uff3f\020\uff3f\024\uff3f\027\uff3f" +
    "\036\uff3f\037\uff3f\043\uff3f\044\uff3f\045\uff3f\046\uff3f\047" +
    "\uff3f\050\uff3f\051\uff3f\052\uff3f\053\uff3f\056\uff3f\057\uff3f" +
    "\060\uff3f\061\uff3f\063\uff3f\065\uff3f\066\uff3f\070\uff3f\071" +
    "\uff3f\001\002\000\006\020\222\065\uff76\001\002\000\006" +
    "\020\uff74\065\uff74\001\002\000\004\065\221\001\002\000" +
    "\076\004\uff3d\005\uff3d\006\uff3d\007\uff3d\011\uff3d\014\uff3d" +
    "\016\uff3d\020\uff3d\024\uff3d\027\uff3d\036\uff3d\037\uff3d\043" +
    "\uff3d\044\uff3d\045\uff3d\046\uff3d\047\uff3d\050\uff3d\051\uff3d" +
    "\052\uff3d\053\uff3d\056\uff3d\057\uff3d\060\uff3d\061\uff3d\063" +
    "\uff3d\065\uff3d\066\uff3d\070\uff3d\071\uff3d\001\002\000\046" +
    "\004\071\017\101\032\064\045\072\050\065\051\073\054" +
    "\061\055\102\060\077\061\063\067\067\071\103\074\060" +
    "\076\052\103\100\104\062\105\044\107\070\001\002\000" +
    "\006\020\uff73\065\uff73\001\002\000\004\063\225\001\002" +
    "\000\076\004\uff40\005\uff40\006\uff40\007\uff40\011\uff40\014" +
    "\uff40\016\uff40\020\uff40\024\uff40\027\uff40\036\uff40\037\uff40" +
    "\043\uff40\044\uff40\045\uff40\046\uff40\047\uff40\050\uff40\051" +
    "\uff40\052\uff40\053\uff40\056\uff40\057\uff40\060\uff40\061\uff40" +
    "\063\uff40\065\uff40\066\uff40\070\uff40\071\uff40\001\002\000" +
    "\046\004\071\017\101\032\064\045\072\050\065\051\073" +
    "\054\061\055\102\060\077\061\063\067\067\071\103\074" +
    "\060\076\052\103\100\104\062\105\044\107\070\001\002" +
    "\000\016\020\uff72\043\uff72\057\uff72\063\uff72\065\uff72\066" +
    "\uff72\001\002\000\004\007\231\001\002\000\046\004\071" +
    "\017\101\032\064\045\072\050\065\051\073\054\061\055" +
    "\102\060\077\061\063\067\067\071\103\074\060\076\052" +
    "\103\100\104\062\105\044\107\070\001\002\000\004\066" +
    "\uffec\001\002\000\004\066\234\001\002\000\126\002\uffeb" +
    "\004\uffeb\010\uffeb\012\uffeb\013\uffeb\015\uffeb\017\uffeb\021" +
    "\uffeb\022\uffeb\023\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb" +
    "\034\uffeb\035\uffeb\040\uffeb\041\uffeb\043\uffeb\045\uffeb\050" +
    "\uffeb\051\uffeb\054\uffeb\055\uffeb\060\uffeb\061\uffeb\062\uffeb" +
    "\064\uffeb\067\uffeb\071\uffeb\072\uffeb\073\uffeb\074\uffeb\076" +
    "\uffeb\077\uffeb\101\uffeb\102\uffeb\103\uffeb\104\uffeb\105\uffeb" +
    "\106\uffeb\107\uffeb\001\002\000\010\016\uffb7\044\156\066" +
    "\uffb7\001\002\000\006\016\237\066\uff90\001\002\000\004" +
    "\045\244\001\002\000\004\066\uffee\001\002\000\004\066" +
    "\uff91\001\002\000\004\066\243\001\002\000\126\002\uffed" +
    "\004\uffed\010\uffed\012\uffed\013\uffed\015\uffed\017\uffed\021" +
    "\uffed\022\uffed\023\uffed\030\uffed\031\uffed\032\uffed\033\uffed" +
    "\034\uffed\035\uffed\040\uffed\041\uffed\043\uffed\045\uffed\050" +
    "\uffed\051\uffed\054\uffed\055\uffed\060\uffed\061\uffed\062\uffed" +
    "\064\uffed\067\uffed\071\uffed\072\uffed\073\uffed\074\uffed\076" +
    "\uffed\077\uffed\101\uffed\102\uffed\103\uffed\104\uffed\105\uffed" +
    "\106\uffed\107\uffed\001\002\000\050\004\071\017\101\032" +
    "\064\045\072\050\065\051\073\054\061\055\102\060\077" +
    "\061\063\065\uff75\067\067\071\103\074\060\076\052\103" +
    "\100\104\062\105\044\107\070\001\002\000\004\065\246" +
    "\001\002\000\004\066\uff8f\001\002\000\004\007\250\001" +
    "\002\000\046\004\071\017\101\032\064\045\072\050\065" +
    "\051\073\054\061\055\102\060\077\061\063\067\067\071" +
    "\103\074\060\076\052\103\100\104\062\105\044\107\070" +
    "\001\002\000\004\066\ufff0\001\002\000\004\066\253\001" +
    "\002\000\126\002\uffef\004\uffef\010\uffef\012\uffef\013\uffef" +
    "\015\uffef\017\uffef\021\uffef\022\uffef\023\uffef\030\uffef\031" +
    "\uffef\032\uffef\033\uffef\034\uffef\035\uffef\040\uffef\041\uffef" +
    "\043\uffef\045\uffef\050\uffef\051\uffef\054\uffef\055\uffef\060" +
    "\uffef\061\uffef\062\uffef\064\uffef\067\uffef\071\uffef\072\uffef" +
    "\073\uffef\074\uffef\076\uffef\077\uffef\101\uffef\102\uffef\103" +
    "\uffef\104\uffef\105\uffef\106\uffef\107\uffef\001\002\000\010" +
    "\007\uffb7\044\156\066\uffb7\001\002\000\006\007\257\066" +
    "\uff94\001\002\000\004\066\ufff2\001\002\000\046\004\071" +
    "\017\101\032\064\045\072\050\065\051\073\054\061\055" +
    "\102\060\077\061\063\067\067\071\103\074\060\076\052" +
    "\103\100\104\062\105\044\107\070\001\002\000\004\066" +
    "\uff95\001\002\000\004\066\262\001\002\000\126\002\ufff1" +
    "\004\ufff1\010\ufff1\012\ufff1\013\ufff1\015\ufff1\017\ufff1\021" +
    "\ufff1\022\ufff1\023\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1" +
    "\034\ufff1\035\ufff1\040\ufff1\041\ufff1\043\ufff1\045\ufff1\050" +
    "\ufff1\051\ufff1\054\ufff1\055\ufff1\060\ufff1\061\ufff1\062\ufff1" +
    "\064\ufff1\067\ufff1\071\ufff1\072\ufff1\073\ufff1\074\ufff1\076" +
    "\ufff1\077\ufff1\101\ufff1\102\ufff1\103\ufff1\104\ufff1\105\ufff1" +
    "\106\ufff1\107\ufff1\001\002\000\012\004\uffc4\044\uffc4\065" +
    "\uffc4\107\uffc4\001\002\000\014\004\uffbd\044\uffbd\065\uffbd" +
    "\071\144\107\uffbd\001\002\000\004\043\266\001\002\000" +
    "\012\012\uffe6\033\uffe6\041\uffe6\106\uffe6\001\002\000\012" +
    "\012\032\033\035\041\036\106\031\001\002\000\020\012" +
    "\032\033\035\035\uffde\041\036\062\uffde\075\277\106\301" +
    "\001\002\000\004\107\273\001\002\000\020\012\uffe2\033" +
    "\uffe2\035\uffe2\041\uffe2\062\uffe2\075\uffe2\106\uffe2\001\002" +
    "\000\006\044\156\066\uffb7\001\002\000\004\066\275\001" +
    "\002\000\020\012\uffe0\033\uffe0\035\uffe0\041\uffe0\062\uffe0" +
    "\075\uffe0\106\uffe0\001\002\000\012\035\uffda\062\uffda\075" +
    "\uffda\106\uffda\001\002\000\004\106\u0135\001\002\000\020" +
    "\012\uffe1\033\uffe1\035\uffe1\041\uffe1\062\uffe1\075\uffe1\106" +
    "\uffe1\001\002\000\006\045\uffd9\071\uffc0\001\002\000\012" +
    "\035\uffdf\062\uffdf\075\277\106\317\001\002\000\012\035" +
    "\uffdd\062\uffdd\075\uffdd\106\uffdd\001\002\000\012\035\uffdb" +
    "\062\uffdb\075\uffdb\106\uffdb\001\002\000\006\035\uffe5\062" +
    "\uffe5\001\002\000\006\035\011\062\uffd3\001\002\000\006" +
    "\035\uffd2\062\uffd2\001\002\000\006\035\011\062\uffd4\001" +
    "\002\000\006\035\uffd0\062\uffd0\001\002\000\004\062\uffe4" +
    "\001\002\000\004\062\314\001\002\000\004\066\315\001" +
    "\002\000\030\002\uffe3\010\uffe3\012\uffe3\021\uffe3\031\uffe3" +
    "\033\uffe3\035\uffe3\041\uffe3\072\uffe3\073\uffe3\106\uffe3\001" +
    "\002\000\006\035\uffd1\062\uffd1\001\002\000\004\045\uffd9" +
    "\001\002\000\012\035\uffdc\062\uffdc\075\uffdc\106\uffdc\001" +
    "\002\000\004\045\322\001\002\000\014\012\032\033\035" +
    "\041\036\065\uff9c\106\031\001\002\000\006\004\u0101\107" +
    "\uff96\001\002\000\006\020\u012f\065\uff9d\001\002\000\006" +
    "\020\uff9b\065\uff9b\001\002\000\004\065\327\001\002\000" +
    "\004\043\uffd8\001\002\000\004\043\331\001\002\000\116" +
    "\004\071\010\uffe7\012\uffe7\013\361\015\351\017\101\021" +
    "\uffe7\022\336\023\337\030\355\032\064\033\uffe7\034\363" +
    "\040\365\041\uffe7\043\344\045\072\050\065\051\073\054" +
    "\061\055\102\060\077\061\063\062\uffaf\064\341\067\067" +
    "\071\103\072\015\074\060\076\052\077\334\101\345\102" +
    "\335\103\100\104\062\105\044\106\uffe7\107\070\001\002" +
    "\000\116\004\uffa2\010\uffa2\012\uffa2\013\uffa2\015\uffa2\017" +
    "\uffa2\021\uffa2\022\uffa2\023\uffa2\030\uffa2\032\uffa2\033\uffa2" +
    "\034\uffa2\040\uffa2\041\uffa2\043\uffa2\045\uffa2\050\uffa2\051" +
    "\uffa2\054\uffa2\055\uffa2\060\uffa2\061\uffa2\062\uffa2\064\uffa2" +
    "\067\uffa2\071\uffa2\072\uffa2\074\uffa2\076\uffa2\077\uffa2\101" +
    "\uffa2\102\uffa2\103\uffa2\104\uffa2\105\uffa2\106\uffa2\107\uffa2" +
    "\001\002\000\116\004\uffa3\010\uffa3\012\uffa3\013\uffa3\015" +
    "\uffa3\017\uffa3\021\uffa3\022\uffa3\023\uffa3\030\uffa3\032\uffa3" +
    "\033\uffa3\034\uffa3\040\uffa3\041\uffa3\043\uffa3\045\uffa3\050" +
    "\uffa3\051\uffa3\054\uffa3\055\uffa3\060\uffa3\061\uffa3\062\uffa3" +
    "\064\uffa3\067\uffa3\071\uffa3\072\uffa3\074\uffa3\076\uffa3\077" +
    "\uffa3\101\uffa3\102\uffa3\103\uffa3\104\uffa3\105\uffa3\106\uffa3" +
    "\107\uffa3\001\002\000\046\004\uff89\017\uff89\032\uff89\045" +
    "\uff89\050\uff89\051\uff89\054\uff89\055\uff89\060\uff89\061\uff89" +
    "\067\uff89\071\uff89\074\uff89\076\uff89\103\uff89\104\uff89\105" +
    "\uff89\107\uff89\001\002\000\046\004\071\017\101\032\064" +
    "\045\072\050\065\051\073\054\061\055\102\060\077\061" +
    "\063\067\067\071\103\074\060\076\052\103\100\104\062" +
    "\105\044\107\070\001\002\000\004\066\uff82\001\002\000" +
    "\004\057\u011f\001\002\000\116\004\uffa1\010\uffa1\012\uffa1" +
    "\013\uffa1\015\uffa1\017\uffa1\021\uffa1\022\uffa1\023\uffa1\030" +
    "\uffa1\032\uffa1\033\uffa1\034\uffa1\040\uffa1\041\uffa1\043\uffa1" +
    "\045\uffa1\050\uffa1\051\uffa1\054\uffa1\055\uffa1\060\uffa1\061" +
    "\uffa1\062\uffa1\064\uffa1\067\uffa1\071\uffa1\072\uffa1\074\uffa1" +
    "\076\uffa1\077\uffa1\101\uffa1\102\uffa1\103\uffa1\104\uffa1\105" +
    "\uffa1\106\uffa1\107\uffa1\001\002\000\050\004\071\017\101" +
    "\032\064\045\072\050\065\051\073\054\061\055\102\060" +
    "\077\061\063\066\u011d\067\067\071\103\074\060\076\052" +
    "\103\100\104\062\105\044\107\070\001\002\000\116\004" +
    "\uffa0\010\uffa0\012\uffa0\013\uffa0\015\uffa0\017\uffa0\021\uffa0" +
    "\022\uffa0\023\uffa0\030\uffa0\032\uffa0\033\uffa0\034\uffa0\040" +
    "\uffa0\041\uffa0\043\uffa0\045\uffa0\050\uffa0\051\uffa0\054\uffa0" +
    "\055\uffa0\060\uffa0\061\uffa0\062\uffa0\064\uffa0\067\uffa0\071" +
    "\uffa0\072\uffa0\074\uffa0\076\uffa0\077\uffa0\101\uffa0\102\uffa0" +
    "\103\uffa0\104\uffa0\105\uffa0\106\uffa0\107\uffa0\001\002\000" +
    "\116\004\uffa7\010\uffa7\012\uffa7\013\uffa7\015\uffa7\017\uffa7" +
    "\021\uffa7\022\uffa7\023\uffa7\030\uffa7\032\uffa7\033\uffa7\034" +
    "\uffa7\040\uffa7\041\uffa7\043\uffa7\045\uffa7\050\uffa7\051\uffa7" +
    "\054\uffa7\055\uffa7\060\uffa7\061\uffa7\062\uffa7\064\uffa7\067" +
    "\uffa7\071\uffa7\072\uffa7\074\uffa7\076\uffa7\077\uffa7\101\uffa7" +
    "\102\uffa7\103\uffa7\104\uffa7\105\uffa7\106\uffa7\107\uffa7\001" +
    "\002\000\116\004\uffb3\010\uffb3\012\uffb3\013\uffb3\015\uffb3" +
    "\017\uffb3\021\uffb3\022\uffb3\023\uffb3\030\uffb3\032\uffb3\033" +
    "\uffb3\034\uffb3\040\uffb3\041\uffb3\043\uffb3\045\uffb3\050\uffb3" +
    "\051\uffb3\054\uffb3\055\uffb3\060\uffb3\061\uffb3\062\uffb3\064" +
    "\uffb3\067\uffb3\071\uffb3\072\uffb3\074\uffb3\076\uffb3\077\uffb3" +
    "\101\uffb3\102\uffb3\103\uffb3\104\uffb3\105\uffb3\106\uffb3\107" +
    "\uffb3\001\002\000\046\004\071\017\101\032\064\045\072" +
    "\050\065\051\073\054\061\055\102\060\077\061\063\067" +
    "\067\071\103\074\060\076\052\103\100\104\062\105\044" +
    "\107\070\001\002\000\116\004\071\010\uffe7\012\uffe7\013" +
    "\361\015\351\017\101\021\uffe7\022\336\023\337\030\355" +
    "\032\064\033\uffe7\034\363\040\365\041\uffe7\043\344\045" +
    "\072\050\065\051\073\054\061\055\102\060\077\061\063" +
    "\062\uffb0\064\341\067\067\071\103\072\015\074\060\076" +
    "\052\077\334\101\345\102\335\103\100\104\062\105\044" +
    "\106\uffe7\107\070\001\002\000\116\004\uff9f\010\uff9f\012" +
    "\uff9f\013\uff9f\015\uff9f\017\uff9f\021\uff9f\022\uff9f\023\uff9f" +
    "\030\uff9f\032\uff9f\033\uff9f\034\uff9f\040\uff9f\041\uff9f\043" +
    "\uff9f\045\uff9f\050\uff9f\051\uff9f\054\uff9f\055\uff9f\060\uff9f" +
    "\061\uff9f\062\uff9f\064\uff9f\067\uff9f\071\uff9f\072\uff9f\074" +
    "\uff9f\076\uff9f\077\uff9f\101\uff9f\102\uff9f\103\uff9f\104\uff9f" +
    "\105\uff9f\106\uff9f\107\uff9f\001\002\000\116\004\uffaa\010" +
    "\uffaa\012\uffaa\013\uffaa\015\uffaa\017\uffaa\021\uffaa\022\uffaa" +
    "\023\uffaa\030\uffaa\032\uffaa\033\uffaa\034\uffaa\040\uffaa\041" +
    "\uffaa\043\uffaa\045\uffaa\050\uffaa\051\uffaa\054\uffaa\055\uffaa" +
    "\060\uffaa\061\uffaa\062\uffaa\064\uffaa\067\uffaa\071\uffaa\072" +
    "\uffaa\074\uffaa\076\uffaa\077\uffaa\101\uffaa\102\uffaa\103\uffaa" +
    "\104\uffaa\105\uffaa\106\uffaa\107\uffaa\001\002\000\004\042" +
    "\u0111\001\002\000\116\004\uffa8\010\uffa8\012\uffa8\013\uffa8" +
    "\015\uffa8\017\uffa8\021\uffa8\022\uffa8\023\uffa8\030\uffa8\032" +
    "\uffa8\033\uffa8\034\uffa8\040\uffa8\041\uffa8\043\uffa8\045\uffa8" +
    "\050\uffa8\051\uffa8\054\uffa8\055\uffa8\060\uffa8\061\uffa8\062" +
    "\uffa8\064\uffa8\067\uffa8\071\uffa8\072\uffa8\074\uffa8\076\uffa8" +
    "\077\uffa8\101\uffa8\102\uffa8\103\uffa8\104\uffa8\105\uffa8\106" +
    "\uffa8\107\uffa8\001\002\000\004\066\u0110\001\002\000\004" +
    "\062\u010f\001\002\000\004\045\u010b\001\002\000\116\004" +
    "\uffa6\010\uffa6\012\uffa6\013\uffa6\015\uffa6\017\uffa6\021\uffa6" +
    "\022\uffa6\023\uffa6\030\uffa6\032\uffa6\033\uffa6\034\uffa6\040" +
    "\uffa6\041\uffa6\043\uffa6\045\uffa6\050\uffa6\051\uffa6\054\uffa6" +
    "\055\uffa6\060\uffa6\061\uffa6\062\uffa6\064\uffa6\067\uffa6\071" +
    "\uffa6\072\uffa6\074\uffa6\076\uffa6\077\uffa6\101\uffa6\102\uffa6" +
    "\103\uffa6\104\uffa6\105\uffa6\106\uffa6\107\uffa6\001\002\000" +
    "\116\004\uffac\010\uffac\012\uffac\013\uffac\015\uffac\017\uffac" +
    "\021\uffac\022\uffac\023\uffac\030\uffac\032\uffac\033\uffac\034" +
    "\uffac\040\uffac\041\uffac\043\uffac\045\uffac\050\uffac\051\uffac" +
    "\054\uffac\055\uffac\060\uffac\061\uffac\062\uffac\064\uffac\067" +
    "\uffac\071\uffac\072\uffac\074\uffac\076\uffac\077\uffac\101\uffac" +
    "\102\uffac\103\uffac\104\uffac\105\uffac\106\uffac\107\uffac\001" +
    "\002\000\116\004\uffae\010\uffae\012\uffae\013\uffae\015\uffae" +
    "\017\uffae\021\uffae\022\uffae\023\uffae\030\uffae\032\uffae\033" +
    "\uffae\034\uffae\040\uffae\041\uffae\043\uffae\045\uffae\050\uffae" +
    "\051\uffae\054\uffae\055\uffae\060\uffae\061\uffae\062\uffae\064" +
    "\uffae\067\uffae\071\uffae\072\uffae\074\uffae\076\uffae\077\uffae" +
    "\101\uffae\102\uffae\103\uffae\104\uffae\105\uffae\106\uffae\107" +
    "\uffae\001\002\000\004\066\uff84\001\002\000\116\004\uffab" +
    "\010\uffab\012\uffab\013\uffab\015\uffab\017\uffab\021\uffab\022" +
    "\uffab\023\uffab\030\uffab\032\uffab\033\uffab\034\uffab\040\uffab" +
    "\041\uffab\043\uffab\045\uffab\050\uffab\051\uffab\054\uffab\055" +
    "\uffab\060\uffab\061\uffab\062\uffab\064\uffab\067\uffab\071\uffab" +
    "\072\uffab\074\uffab\076\uffab\077\uffab\101\uffab\102\uffab\103" +
    "\uffab\104\uffab\105\uffab\106\uffab\107\uffab\001\002\000\004" +
    "\045\377\001\002\000\116\004\uffa4\010\uffa4\012\uffa4\013" +
    "\uffa4\015\uffa4\017\uffa4\021\uffa4\022\uffa4\023\uffa4\030\uffa4" +
    "\032\uffa4\033\uffa4\034\uffa4\040\uffa4\041\uffa4\043\uffa4\045" +
    "\uffa4\050\uffa4\051\uffa4\054\uffa4\055\uffa4\060\uffa4\061\uffa4" +
    "\062\uffa4\064\uffa4\067\uffa4\071\uffa4\072\uffa4\074\uffa4\076" +
    "\uffa4\077\uffa4\101\uffa4\102\uffa4\103\uffa4\104\uffa4\105\uffa4" +
    "\106\uffa4\107\uffa4\001\002\000\046\004\071\017\101\032" +
    "\064\045\072\050\065\051\073\054\061\055\102\060\077" +
    "\061\063\067\067\071\103\074\060\076\052\103\100\104" +
    "\062\105\044\107\070\001\002\000\116\004\uff9e\010\uff9e" +
    "\012\uff9e\013\uff9e\015\uff9e\017\uff9e\021\uff9e\022\uff9e\023" +
    "\uff9e\030\uff9e\032\uff9e\033\uff9e\034\uff9e\040\uff9e\041\uff9e" +
    "\043\uff9e\045\uff9e\050\uff9e\051\uff9e\054\uff9e\055\uff9e\060" +
    "\uff9e\061\uff9e\062\uff9e\064\uff9e\067\uff9e\071\uff9e\072\uff9e" +
    "\074\uff9e\076\uff9e\077\uff9e\101\uff9e\102\uff9e\103\uff9e\104" +
    "\uff9e\105\uff9e\106\uff9e\107\uff9e\001\002\000\116\004\uffa5" +
    "\010\uffa5\012\uffa5\013\uffa5\015\uffa5\017\uffa5\021\uffa5\022" +
    "\uffa5\023\uffa5\030\uffa5\032\uffa5\033\uffa5\034\uffa5\040\uffa5" +
    "\041\uffa5\043\uffa5\045\uffa5\050\uffa5\051\uffa5\054\uffa5\055" +
    "\uffa5\060\uffa5\061\uffa5\062\uffa5\064\uffa5\067\uffa5\071\uffa5" +
    "\072\uffa5\074\uffa5\076\uffa5\077\uffa5\101\uffa5\102\uffa5\103" +
    "\uffa5\104\uffa5\105\uffa5\106\uffa5\107\uffa5\001\002\000\004" +
    "\043\uff8e\001\002\000\004\043\344\001\002\000\120\004" +
    "\uff8d\010\uff8d\012\uff8d\013\uff8d\015\uff8d\017\uff8d\021\uff8d" +
    "\022\uff8d\023\uff8d\025\uff8d\030\uff8d\032\uff8d\033\uff8d\034" +
    "\uff8d\040\uff8d\041\uff8d\043\uff8d\045\uff8d\050\uff8d\051\uff8d" +
    "\054\uff8d\055\uff8d\060\uff8d\061\uff8d\062\uff8d\064\uff8d\067" +
    "\uff8d\071\uff8d\072\uff8d\074\uff8d\076\uff8d\077\uff8d\101\uff8d" +
    "\102\uff8d\103\uff8d\104\uff8d\105\uff8d\106\uff8d\107\uff8d\001" +
    "\002\000\120\004\uff8a\010\uff8a\012\uff8a\013\uff8a\015\uff8a" +
    "\017\uff8a\021\uff8a\022\uff8a\023\uff8a\025\375\030\uff8a\032" +
    "\uff8a\033\uff8a\034\uff8a\040\uff8a\041\uff8a\043\uff8a\045\uff8a" +
    "\050\uff8a\051\uff8a\054\uff8a\055\uff8a\060\uff8a\061\uff8a\062" +
    "\uff8a\064\uff8a\067\uff8a\071\uff8a\072\uff8a\074\uff8a\076\uff8a" +
    "\077\uff8a\101\uff8a\102\uff8a\103\uff8a\104\uff8a\105\uff8a\106" +
    "\uff8a\107\uff8a\001\002\000\116\004\uff8c\010\uff8c\012\uff8c" +
    "\013\uff8c\015\uff8c\017\uff8c\021\uff8c\022\uff8c\023\uff8c\030" +
    "\uff8c\032\uff8c\033\uff8c\034\uff8c\040\uff8c\041\uff8c\043\uff8c" +
    "\045\uff8c\050\uff8c\051\uff8c\054\uff8c\055\uff8c\060\uff8c\061" +
    "\uff8c\062\uff8c\064\uff8c\067\uff8c\071\uff8c\072\uff8c\074\uff8c" +
    "\076\uff8c\077\uff8c\101\uff8c\102\uff8c\103\uff8c\104\uff8c\105" +
    "\uff8c\106\uff8c\107\uff8c\001\002\000\004\043\344\001\002" +
    "\000\116\004\uff8b\010\uff8b\012\uff8b\013\uff8b\015\uff8b\017" +
    "\uff8b\021\uff8b\022\uff8b\023\uff8b\030\uff8b\032\uff8b\033\uff8b" +
    "\034\uff8b\040\uff8b\041\uff8b\043\uff8b\045\uff8b\050\uff8b\051" +
    "\uff8b\054\uff8b\055\uff8b\060\uff8b\061\uff8b\062\uff8b\064\uff8b" +
    "\067\uff8b\071\uff8b\072\uff8b\074\uff8b\076\uff8b\077\uff8b\101" +
    "\uff8b\102\uff8b\103\uff8b\104\uff8b\105\uff8b\106\uff8b\107\uff8b" +
    "\001\002\000\012\012\032\033\035\041\036\106\031\001" +
    "\002\000\006\004\u0101\107\uff96\001\002\000\004\107\uff97" +
    "\001\002\000\004\107\u0103\001\002\000\004\016\u0104\001" +
    "\002\000\046\004\071\017\101\032\064\045\072\050\065" +
    "\051\073\054\061\055\102\060\077\061\063\067\067\071" +
    "\103\074\060\076\052\103\100\104\062\105\044\107\070" +
    "\001\002\000\004\065\u0106\001\002\000\004\043\uff86\001" +
    "\002\000\004\043\344\001\002\000\116\004\uff85\010\uff85" +
    "\012\uff85\013\uff85\015\uff85\017\uff85\021\uff85\022\uff85\023" +
    "\uff85\030\uff85\032\uff85\033\uff85\034\uff85\040\uff85\041\uff85" +
    "\043\uff85\045\uff85\050\uff85\051\uff85\054\uff85\055\uff85\060" +
    "\uff85\061\uff85\062\uff85\064\uff85\067\uff85\071\uff85\072\uff85" +
    "\074\uff85\076\uff85\077\uff85\101\uff85\102\uff85\103\uff85\104" +
    "\uff85\105\uff85\106\uff85\107\uff85\001\002\000\004\066\u010a" +
    "\001\002\000\116\004\uff83\010\uff83\012\uff83\013\uff83\015" +
    "\uff83\017\uff83\021\uff83\022\uff83\023\uff83\030\uff83\032\uff83" +
    "\033\uff83\034\uff83\040\uff83\041\uff83\043\uff83\045\uff83\050" +
    "\uff83\051\uff83\054\uff83\055\uff83\060\uff83\061\uff83\062\uff83" +
    "\064\uff83\067\uff83\071\uff83\072\uff83\074\uff83\076\uff83\077" +
    "\uff83\101\uff83\102\uff83\103\uff83\104\uff83\105\uff83\106\uff83" +
    "\107\uff83\001\002\000\046\004\071\017\101\032\064\045" +
    "\072\050\065\051\073\054\061\055\102\060\077\061\063" +
    "\067\067\071\103\074\060\076\052\103\100\104\062\105" +
    "\044\107\070\001\002\000\004\065\u010d\001\002\000\004" +
    "\066\u010e\001\002\000\116\004\uff80\010\uff80\012\uff80\013" +
    "\uff80\015\uff80\017\uff80\021\uff80\022\uff80\023\uff80\030\uff80" +
    "\032\uff80\033\uff80\034\uff80\040\uff80\041\uff80\043\uff80\045" +
    "\uff80\050\uff80\051\uff80\054\uff80\055\uff80\060\uff80\061\uff80" +
    "\062\uff80\064\uff80\067\uff80\071\uff80\072\uff80\074\uff80\076" +
    "\uff80\077\uff80\101\uff80\102\uff80\103\uff80\104\uff80\105\uff80" +
    "\106\uff80\107\uff80\001\002\000\012\035\uffd7\062\uffd7\075" +
    "\uffd7\106\uffd7\001\002\000\116\004\uffa9\010\uffa9\012\uffa9" +
    "\013\uffa9\015\uffa9\017\uffa9\021\uffa9\022\uffa9\023\uffa9\030" +
    "\uffa9\032\uffa9\033\uffa9\034\uffa9\040\uffa9\041\uffa9\043\uffa9" +
    "\045\uffa9\050\uffa9\051\uffa9\054\uffa9\055\uffa9\060\uffa9\061" +
    "\uffa9\062\uffa9\064\uffa9\067\uffa9\071\uffa9\072\uffa9\074\uffa9" +
    "\076\uffa9\077\uffa9\101\uffa9\102\uffa9\103\uffa9\104\uffa9\105" +
    "\uffa9\106\uffa9\107\uffa9\001\002\000\046\004\071\017\101" +
    "\032\064\045\072\050\065\051\073\054\061\055\102\060" +
    "\077\061\063\067\067\071\103\074\060\076\052\103\100" +
    "\104\062\105\044\107\070\001\002\000\004\066\u0113\001" +
    "\002\000\116\004\uff7d\010\uff7d\012\uff7d\013\uff7d\015\uff7d" +
    "\017\uff7d\021\uff7d\022\uff7d\023\uff7d\030\uff7d\032\uff7d\033" +
    "\uff7d\034\uff7d\040\uff7d\041\uff7d\043\uff7d\045\uff7d\050\uff7d" +
    "\051\uff7d\054\uff7d\055\uff7d\060\uff7d\061\uff7d\062\uff7d\064" +
    "\uff7d\067\uff7d\071\uff7d\072\uff7d\074\uff7d\076\uff7d\077\uff7d" +
    "\101\uff7d\102\uff7d\103\uff7d\104\uff7d\105\uff7d\106\uff7d\107" +
    "\uff7d\001\002\000\116\004\uffad\010\uffad\012\uffad\013\uffad" +
    "\015\uffad\017\uffad\021\uffad\022\uffad\023\uffad\030\uffad\032" +
    "\uffad\033\uffad\034\uffad\040\uffad\041\uffad\043\uffad\045\uffad" +
    "\050\uffad\051\uffad\054\uffad\055\uffad\060\uffad\061\uffad\062" +
    "\uffad\064\uffad\067\uffad\071\uffad\072\uffad\074\uffad\076\uffad" +
    "\077\uffad\101\uffad\102\uffad\103\uffad\104\uffad\105\uffad\106" +
    "\uffad\107\uffad\001\002\000\006\016\237\066\uff90\001\002" +
    "\000\004\066\u0117\001\002\000\116\004\uff93\010\uff93\012" +
    "\uff93\013\uff93\015\uff93\017\uff93\021\uff93\022\uff93\023\uff93" +
    "\030\uff93\032\uff93\033\uff93\034\uff93\040\uff93\041\uff93\043" +
    "\uff93\045\uff93\050\uff93\051\uff93\054\uff93\055\uff93\060\uff93" +
    "\061\uff93\062\uff93\064\uff93\067\uff93\071\uff93\072\uff93\074" +
    "\uff93\076\uff93\077\uff93\101\uff93\102\uff93\103\uff93\104\uff93" +
    "\105\uff93\106\uff93\107\uff93\001\002\000\116\004\071\010" +
    "\uffe7\012\uffe7\013\361\015\351\017\101\021\uffe7\022\336" +
    "\023\337\030\355\032\064\033\uffe7\034\363\040\365\041" +
    "\uffe7\043\344\045\072\050\065\051\073\054\061\055\102" +
    "\060\077\061\063\062\uffaf\064\341\067\067\071\103\072" +
    "\015\074\060\076\052\077\334\101\345\102\335\103\100" +
    "\104\062\105\044\106\uffe7\107\070\001\002\000\004\062" +
    "\uffb2\001\002\000\004\062\u011b\001\002\000\120\004\uffb1" +
    "\010\uffb1\012\uffb1\013\uffb1\015\uffb1\017\uffb1\021\uffb1\022" +
    "\uffb1\023\uffb1\025\uffb1\030\uffb1\032\uffb1\033\uffb1\034\uffb1" +
    "\040\uffb1\041\uffb1\043\uffb1\045\uffb1\050\uffb1\051\uffb1\054" +
    "\uffb1\055\uffb1\060\uffb1\061\uffb1\062\uffb1\064\uffb1\067\uffb1" +
    "\071\uffb1\072\uffb1\074\uffb1\076\uffb1\077\uffb1\101\uffb1\102" +
    "\uffb1\103\uffb1\104\uffb1\105\uffb1\106\uffb1\107\uffb1\001\002" +
    "\000\004\066\u011e\001\002\000\116\004\uff7f\010\uff7f\012" +
    "\uff7f\013\uff7f\015\uff7f\017\uff7f\021\uff7f\022\uff7f\023\uff7f" +
    "\030\uff7f\032\uff7f\033\uff7f\034\uff7f\040\uff7f\041\uff7f\043" +
    "\uff7f\045\uff7f\050\uff7f\051\uff7f\054\uff7f\055\uff7f\060\uff7f" +
    "\061\uff7f\062\uff7f\064\uff7f\067\uff7f\071\uff7f\072\uff7f\074" +
    "\uff7f\076\uff7f\077\uff7f\101\uff7f\102\uff7f\103\uff7f\104\uff7f" +
    "\105\uff7f\106\uff7f\107\uff7f\001\002\000\116\004\uff7e\010" +
    "\uff7e\012\uff7e\013\uff7e\015\uff7e\017\uff7e\021\uff7e\022\uff7e" +
    "\023\uff7e\030\uff7e\032\uff7e\033\uff7e\034\uff7e\040\uff7e\041" +
    "\uff7e\043\uff7e\045\uff7e\050\uff7e\051\uff7e\054\uff7e\055\uff7e" +
    "\060\uff7e\061\uff7e\062\uff7e\064\uff7e\067\uff7e\071\uff7e\072" +
    "\uff7e\074\uff7e\076\uff7e\077\uff7e\101\uff7e\102\uff7e\103\uff7e" +
    "\104\uff7e\105\uff7e\106\uff7e\107\uff7e\001\002\000\050\004" +
    "\071\017\101\026\u0123\032\064\045\072\050\065\051\073" +
    "\054\061\055\102\060\077\061\063\067\067\071\103\074" +
    "\060\076\052\103\100\104\062\105\044\107\070\001\002" +
    "\000\006\057\uff79\066\uff79\001\002\000\006\057\uff7b\066" +
    "\uff7b\001\002\000\006\057\u0124\066\u0125\001\002\000\006" +
    "\057\uff78\066\uff78\001\002\000\050\004\071\017\101\026" +
    "\u0123\032\064\045\072\050\065\051\073\054\061\055\102" +
    "\060\077\061\063\067\067\071\103\074\060\076\052\103" +
    "\100\104\062\105\044\107\070\001\002\000\116\004\uff7c" +
    "\010\uff7c\012\uff7c\013\uff7c\015\uff7c\017\uff7c\021\uff7c\022" +
    "\uff7c\023\uff7c\030\uff7c\032\uff7c\033\uff7c\034\uff7c\040\uff7c" +
    "\041\uff7c\043\uff7c\045\uff7c\050\uff7c\051\uff7c\054\uff7c\055" +
    "\uff7c\060\uff7c\061\uff7c\062\uff7c\064\uff7c\067\uff7c\071\uff7c" +
    "\072\uff7c\074\uff7c\076\uff7c\077\uff7c\101\uff7c\102\uff7c\103" +
    "\uff7c\104\uff7c\105\uff7c\106\uff7c\107\uff7c\001\002\000\006" +
    "\057\uff7a\066\uff7a\001\002\000\004\066\u0128\001\002\000" +
    "\116\004\uff81\010\uff81\012\uff81\013\uff81\015\uff81\017\uff81" +
    "\021\uff81\022\uff81\023\uff81\030\uff81\032\uff81\033\uff81\034" +
    "\uff81\040\uff81\041\uff81\043\uff81\045\uff81\050\uff81\051\uff81" +
    "\054\uff81\055\uff81\060\uff81\061\uff81\062\uff81\064\uff81\067" +
    "\uff81\071\uff81\072\uff81\074\uff81\076\uff81\077\uff81\101\uff81" +
    "\102\uff81\103\uff81\104\uff81\105\uff81\106\uff81\107\uff81\001" +
    "\002\000\004\066\u012a\001\002\000\116\004\uff92\010\uff92" +
    "\012\uff92\013\uff92\015\uff92\017\uff92\021\uff92\022\uff92\023" +
    "\uff92\030\uff92\032\uff92\033\uff92\034\uff92\040\uff92\041\uff92" +
    "\043\uff92\045\uff92\050\uff92\051\uff92\054\uff92\055\uff92\060" +
    "\uff92\061\uff92\062\uff92\064\uff92\067\uff92\071\uff92\072\uff92" +
    "\074\uff92\076\uff92\077\uff92\101\uff92\102\uff92\103\uff92\104" +
    "\uff92\105\uff92\106\uff92\107\uff92\001\002\000\046\004\071" +
    "\017\101\032\064\045\072\050\065\051\073\054\061\055" +
    "\102\060\077\061\063\067\067\071\103\074\060\076\052" +
    "\103\100\104\062\105\044\107\070\001\002\000\004\043" +
    "\uff88\001\002\000\004\043\344\001\002\000\116\004\uff87" +
    "\010\uff87\012\uff87\013\uff87\015\uff87\017\uff87\021\uff87\022" +
    "\uff87\023\uff87\030\uff87\032\uff87\033\uff87\034\uff87\040\uff87" +
    "\041\uff87\043\uff87\045\uff87\050\uff87\051\uff87\054\uff87\055" +
    "\uff87\060\uff87\061\uff87\062\uff87\064\uff87\067\uff87\071\uff87" +
    "\072\uff87\074\uff87\076\uff87\077\uff87\101\uff87\102\uff87\103" +
    "\uff87\104\uff87\105\uff87\106\uff87\107\uff87\001\002\000\012" +
    "\012\032\033\035\041\036\106\031\001\002\000\006\020" +
    "\uff9a\065\uff9a\001\002\000\004\107\u0132\001\002\000\010" +
    "\020\uff99\044\uff99\065\uff99\001\002\000\010\020\uffb7\044" +
    "\156\065\uffb7\001\002\000\006\020\uff98\065\uff98\001\002" +
    "\000\004\045\uffd6\001\002\000\004\045\u0137\001\002\000" +
    "\004\065\u0138\001\002\000\004\043\u0139\001\002\000\116" +
    "\004\071\010\uffe7\012\uffe7\013\361\015\351\017\101\021" +
    "\uffe7\022\336\023\337\030\355\032\064\033\uffe7\034\363" +
    "\040\365\041\uffe7\043\344\045\072\050\065\051\073\054" +
    "\061\055\102\060\077\061\063\062\uffaf\064\341\067\067" +
    "\071\103\072\015\074\060\076\052\077\334\101\345\102" +
    "\335\103\100\104\062\105\044\106\uffe7\107\070\001\002" +
    "\000\004\062\u013b\001\002\000\012\035\uffd5\062\uffd5\075" +
    "\uffd5\106\uffd5\001\002\000\014\012\032\033\035\041\036" +
    "\100\u013f\106\031\001\002\000\006\004\uffbf\107\uffbf\001" +
    "\002\000\006\004\u0101\107\uff96\001\002\000\006\004\uffbe" +
    "\107\uffbe\001\002\000\004\107\u0141\001\002\000\004\045" +
    "\uffcf\001\002\000\004\045\u0143\001\002\000\014\012\032" +
    "\033\035\041\036\065\uff9c\106\031\001\002\000\004\065" +
    "\u0145\001\002\000\004\043\uffce\001\002\000\004\043\u0147" +
    "\001\002\000\116\004\071\010\uffe7\012\uffe7\013\361\015" +
    "\351\017\101\021\uffe7\022\336\023\337\030\355\032\064" +
    "\033\uffe7\034\363\040\365\041\uffe7\043\344\045\072\050" +
    "\065\051\073\054\061\055\102\060\077\061\063\062\uffaf" +
    "\064\341\067\067\071\103\072\015\074\060\076\052\077" +
    "\334\101\345\102\335\103\100\104\062\105\044\106\uffe7" +
    "\107\070\001\002\000\004\062\uffcd\001\002\000\004\062" +
    "\u014a\001\002\000\032\002\uffcc\010\uffcc\012\uffcc\021\uffcc" +
    "\031\uffcc\033\uffcc\035\uffcc\041\uffcc\062\uffcc\072\uffcc\073" +
    "\uffcc\106\uffcc\001\002\000\004\016\u0151\001\002\000\004" +
    "\107\u014d\001\002\000\006\044\156\066\uffb7\001\002\000" +
    "\004\066\ufff4\001\002\000\004\066\u0150\001\002\000\030" +
    "\002\ufff3\010\ufff3\012\ufff3\021\ufff3\031\ufff3\033\ufff3\035" +
    "\ufff3\041\ufff3\072\ufff3\073\ufff3\106\ufff3\001\002\000\014" +
    "\012\032\033\035\041\036\100\u013f\106\031\001\002\000" +
    "\004\107\u0153\001\002\000\004\045\uffcb\001\002\000\004" +
    "\045\u0155\001\002\000\014\012\032\033\035\041\036\065" +
    "\uff9c\106\031\001\002\000\004\065\u0157\001\002\000\004" +
    "\066\uffca\001\002\000\004\066\u0159\001\002\000\030\002" +
    "\uffc9\010\uffc9\012\uffc9\021\uffc9\031\uffc9\033\uffc9\035\uffc9" +
    "\041\uffc9\072\uffc9\073\uffc9\106\uffc9\001\002\000\004\002" +
    "\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0158\000\006\003\003\126\004\001\001\000\002\001" +
    "\001\000\026\004\021\005\017\006\015\007\016\010\005" +
    "\011\020\012\013\013\022\014\007\050\012\001\001\000" +
    "\002\001\001\000\006\101\025\102\u014b\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\101" +
    "\025\102\024\103\032\105\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\006\023\007\016\010\005\011\020\012\013\013\022" +
    "\014\007\050\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\044\145\110\262\111\263\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\044\145\111\144\001\001\000\004\101\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\055\074\060" +
    "\075\061\065\062\056\063\055\064\054\066\073\067\052" +
    "\070\050\071\046\072\044\073\042\074\047\075\045\077" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\052\133\001\001\000\002\001\001\000\004\051\126\001" +
    "\001\000\004\056\212\001\001\000\004\053\121\001\001" +
    "\000\002\001\001\000\004\057\112\001\001\000\004\134" +
    "\202\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\055\074\060\075\073" +
    "\166\074\047\075\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\055\074" +
    "\060\075\073\147\074\047\075\045\001\001\000\046\055" +
    "\074\060\075\061\137\062\056\063\055\064\054\066\073" +
    "\067\052\070\050\071\046\072\044\073\042\074\047\075" +
    "\045\101\025\102\024\103\135\105\136\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\055\074\060\075\073" +
    "\106\074\047\075\045\001\001\000\014\055\074\060\075" +
    "\073\105\074\047\075\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\055\074\060\075\073\103\074\047\075\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\055\074\060\075\067\111\070\050\071" +
    "\046\072\044\073\110\074\047\075\045\001\001\000\002" +
    "\001\001\000\004\057\112\001\001\000\022\055\074\060" +
    "\075\070\115\071\046\072\044\073\110\074\047\075\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\053" +
    "\121\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\055\074\060\075\071\123\072\044\073" +
    "\110\074\047\075\045\001\001\000\002\001\001\000\004" +
    "\051\126\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\055\074\060\075\072\127\073\110\074\047\075\045" +
    "\001\001\000\004\052\133\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\055\074\060\075" +
    "\073\134\074\047\075\045\001\001\000\002\001\001\000" +
    "\006\044\145\111\144\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\055\074\060\075\073" +
    "\142\074\047\075\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\044\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\055\074\060\075" +
    "\073\151\074\047\075\045\101\025\102\024\103\152\104" +
    "\153\105\154\001\001\000\002\001\001\000\006\044\145" +
    "\111\144\001\001\000\010\045\160\116\156\117\157\001" +
    "\001\000\002\001\001\000\040\055\074\060\075\061\065" +
    "\062\056\063\055\064\054\066\073\067\052\070\050\071" +
    "\046\072\044\073\042\074\047\075\045\077\163\001\001" +
    "\000\002\001\001\000\004\045\161\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\162\170\001\001\000\032\055\074\060\075\063\171" +
    "\064\054\066\073\067\052\070\050\071\046\072\044\073" +
    "\110\074\047\075\045\001\001\000\002\001\001\000\004" +
    "\163\173\001\001\000\030\055\074\060\075\064\174\066" +
    "\073\067\052\070\050\071\046\072\044\073\110\074\047" +
    "\075\045\001\001\000\002\001\001\000\030\055\074\060" +
    "\075\065\177\066\176\067\052\070\050\071\046\072\044" +
    "\073\110\074\047\075\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\055\074\060\075\066\201\067\052" +
    "\070\050\071\046\072\044\073\110\074\047\075\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\055\074\060\075\061\223\062\056\063\055\064" +
    "\054\066\073\067\052\070\050\071\046\072\044\073\042" +
    "\074\047\075\045\001\001\000\002\001\001\000\042\055" +
    "\074\060\075\061\216\062\056\063\055\064\054\066\073" +
    "\067\052\070\050\071\046\072\044\073\042\074\047\075" +
    "\045\124\217\125\215\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\055\074\060" +
    "\075\061\222\062\056\063\055\064\054\066\073\067\052" +
    "\070\050\071\046\072\044\073\042\074\047\075\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\055\074\060\075\061\226\062\056\063\055\064" +
    "\054\066\073\067\052\070\050\071\046\072\044\073\042" +
    "\074\047\075\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\055\074\060\075\061\065\062\056\063\055" +
    "\064\054\066\073\067\052\070\050\071\046\072\044\073" +
    "\042\074\047\075\045\077\231\001\001\000\004\133\232" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\045" +
    "\160\116\235\117\157\001\001\000\006\112\237\113\240" +
    "\001\001\000\002\001\001\000\004\132\241\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\055\074\060\075\061\216\062\056\063\055\064\054\066" +
    "\073\067\052\070\050\071\046\072\044\073\042\074\047" +
    "\075\045\124\244\125\215\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\055\074\060\075" +
    "\061\250\062\056\063\055\064\054\066\073\067\052\070" +
    "\050\071\046\072\044\073\042\074\047\075\045\001\001" +
    "\000\004\131\251\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\045\160\116\254\117\157\001\001\000\004" +
    "\100\255\001\001\000\004\130\260\001\001\000\036\055" +
    "\074\060\075\061\257\062\056\063\055\064\054\066\073" +
    "\067\052\070\050\071\046\072\044\073\042\074\047\075" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\044\146\001\001\000" +
    "\002\001\001\000\004\135\266\001\001\000\016\017\267" +
    "\020\271\101\025\102\024\103\135\105\270\001\001\000" +
    "\026\015\303\016\275\020\277\021\302\101\025\102\024" +
    "\103\135\105\270\114\304\115\301\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\045\160\116\273\117\157" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\140\320" +
    "\001\001\000\010\015\303\016\275\021\317\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\136\305\001\001" +
    "\000\012\007\310\022\311\023\307\024\306\001\001\000" +
    "\002\001\001\000\006\007\310\024\315\001\001\000\002" +
    "\001\001\000\004\137\312\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\140\320\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\076\324\101\025\102\024\103\152\104\322\105\154" +
    "\122\325\123\323\001\001\000\004\047\u0130\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\141\327\001\001\000\002\001\001\000\102\012\356\013" +
    "\361\025\357\026\347\027\351\031\346\032\365\033\355" +
    "\034\342\035\366\036\363\037\332\040\331\041\337\042" +
    "\341\050\012\055\074\060\075\061\352\062\056\063\055" +
    "\064\054\066\073\067\052\070\050\071\046\072\044\073" +
    "\042\074\047\075\045\120\353\121\345\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\155\u012a\001\001\000" +
    "\014\055\074\060\075\073\u0128\074\047\075\045\001\001" +
    "\000\004\161\u0126\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\055\074\060\075\061\u011b\062\056\063\055" +
    "\064\054\066\073\067\052\070\050\071\046\072\044\073" +
    "\042\074\047\075\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\150\u0117\001\001\000\014\055\074\060" +
    "\075\073\u0114\074\047\075\045\001\001\000\076\012\356" +
    "\013\361\025\u0113\026\347\027\351\031\346\032\365\033" +
    "\355\034\342\035\366\036\363\037\332\040\331\041\337" +
    "\042\341\050\012\055\074\060\075\061\352\062\056\063" +
    "\055\064\054\066\073\067\052\070\050\071\046\072\044" +
    "\073\042\074\047\075\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\160\u0108" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\055\074\060\075\061\367\062\056\063\055" +
    "\064\054\066\073\067\052\070\050\071\046\072\044\073" +
    "\042\074\047\075\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\153\370\001\001\000\004\026\371\001" +
    "\001\000\004\154\372\001\001\000\004\030\373\001\001" +
    "\000\002\001\001\000\004\026\375\001\001\000\002\001" +
    "\001\000\014\101\025\102\024\103\152\104\377\105\154" +
    "\001\001\000\004\047\u0101\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\055\074\060\075" +
    "\061\u0104\062\056\063\055\064\054\066\073\067\052\070" +
    "\050\071\046\072\044\073\042\074\047\075\045\001\001" +
    "\000\002\001\001\000\004\157\u0106\001\001\000\004\026" +
    "\u0107\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\055\074\060\075\061\u010b\062\056\063" +
    "\055\064\054\066\073\067\052\070\050\071\046\072\044" +
    "\073\042\074\047\075\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\055\074\060\075\073\u0111\074\047\075" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\112\u0115\113\240\001\001\000\002\001" +
    "\001\000\002\001\001\000\102\012\356\013\361\025\357" +
    "\026\347\027\351\031\346\032\365\033\355\034\342\035" +
    "\366\036\363\037\332\040\331\041\337\042\341\050\012" +
    "\055\074\060\075\061\352\062\056\063\055\064\054\066" +
    "\073\067\052\070\050\071\046\072\044\073\042\074\047" +
    "\075\045\120\u0118\121\345\001\001\000\004\151\u0119\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\043\u0120\055" +
    "\074\060\075\061\u011f\062\056\063\055\064\054\066\073" +
    "\067\052\070\050\071\046\072\044\073\042\074\047\075" +
    "\045\107\u0121\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\043\u0125\055" +
    "\074\060\075\061\u011f\062\056\063\055\064\054\066\073" +
    "\067\052\070\050\071\046\072\044\073\042\074\047\075" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\055\074\060\075\061\u012b\062\056\063\055" +
    "\064\054\066\073\067\052\070\050\071\046\072\044\073" +
    "\042\074\047\075\045\001\001\000\004\156\u012c\001\001" +
    "\000\004\026\u012d\001\001\000\002\001\001\000\016\076" +
    "\u012f\101\025\102\024\103\152\104\322\105\154\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\152\u0132\001" +
    "\001\000\010\045\160\116\u0133\117\157\001\001\000\002" +
    "\001\001\000\004\142\u0135\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\102\012\356\013\361" +
    "\025\357\026\347\027\351\031\346\032\365\033\355\034" +
    "\342\035\366\036\363\037\332\040\331\041\337\042\341" +
    "\050\012\055\074\060\075\061\352\062\056\063\055\064" +
    "\054\066\073\067\052\070\050\071\046\072\044\073\042" +
    "\074\047\075\045\120\u0139\121\345\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\101\025\102\024\103\152" +
    "\104\u013c\105\154\106\u013d\001\001\000\002\001\001\000" +
    "\004\047\u013f\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\143\u0141\001\001\000\002\001\001\000\022\076" +
    "\324\101\025\102\024\103\152\104\322\105\154\122\u0143" +
    "\123\323\001\001\000\002\001\001\000\004\144\u0145\001" +
    "\001\000\002\001\001\000\102\012\356\013\361\025\357" +
    "\026\347\027\351\031\346\032\365\033\355\034\342\035" +
    "\366\036\363\037\332\040\331\041\337\042\341\050\012" +
    "\055\074\060\075\061\352\062\056\063\055\064\054\066" +
    "\073\067\052\070\050\071\046\072\044\073\042\074\047" +
    "\075\045\120\u0147\121\345\001\001\000\004\145\u0148\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\045\160\116\u014d\117\157\001" +
    "\001\000\004\127\u014e\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\101\025\102\024\103\152\104\u013c\105" +
    "\154\106\u0151\001\001\000\002\001\001\000\004\146\u0153" +
    "\001\001\000\002\001\001\000\022\076\324\101\025\102" +
    "\024\103\152\104\322\105\154\122\u0155\123\323\001\001" +
    "\000\002\001\001\000\004\147\u0157\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return new Symbol (sym.EOF); 
    }



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // UnarySign ::= T_MINUS 
            {
              Operator RESULT = null;
		
                        RESULT = new UnaryMinus();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(46/*UnarySign*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // UnarySign ::= T_PLUS 
            {
              Operator RESULT = null;
		
                        RESULT = new UnaryPlus();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(46/*UnarySign*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // Designator3 ::= T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator3_ID (_1, "local");
                    
              CUP$parser$result = new java_cup.runtime.Symbol(59/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // Designator3 ::= T_COLONCOLON T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator3_ID (_1, "global");
                    
              CUP$parser$result = new java_cup.runtime.Symbol(59/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // Designator3 ::= T_THIS 
            {
              STO RESULT = null;
		
                        RESULT = ((MyParser) parser).DoStructThis();   // fix me!
                    
              CUP$parser$result = new java_cup.runtime.Symbol(59/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // Designator3 ::= T_NULLPTR 
            {
              STO RESULT = null;
		
                        RESULT = new ConstSTO ("nullptr", new NullPointerType(), 0);
                        RESULT.setRValue();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(59/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // Designator3 ::= T_FALSE 
            {
              STO RESULT = null;
		
                        ConstSTO res =  new ConstSTO ("false", new BoolType(), 0);
                        res.setLiteral();
                        RESULT = res;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(59/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // Designator3 ::= T_TRUE 
            {
              STO RESULT = null;
		
                        ConstSTO res =  new ConstSTO ("true", new BoolType(), 1);
                        res.setLiteral();
                        RESULT = res;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(59/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // Designator3 ::= T_STR_LITERAL 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        ConstSTO res = new ConstSTO(_1, new StringType(), _1);
                        res.setLiteral();
                        RESULT = res;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(59/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // Designator3 ::= T_FLOAT_LITERAL 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        ConstSTO res =  new ConstSTO (_1, new FloatType(), Float.parseFloat(_1));
                        res.setLiteral();
                        RESULT = res;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(59/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // Designator3 ::= T_INT_LITERAL 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        ConstSTO res =  new ConstSTO (_1, new IntType(), Integer.parseInt(_1));
                        res.setLiteral();
                        RESULT = res;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(59/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // Designator3 ::= T_LPAREN Expr T_RPAREN 
            {
              STO RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = _2;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(59/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // Designator2 ::= Designator3 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(58/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // Designator2 ::= Designator2 T_LPAREN OptExprList T_RPAREN 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = ((MyParser) parser).DoFuncCall (_1, _2);
                        // RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(58/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // Designator2 ::= Designator2 IncDecOpPost 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Operator _2 = (Operator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoUnaryExpr (_2, _1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(58/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // Designator2 ::= Designator2 T_ARROW T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator2_Arrow (_1, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(58/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // Designator2 ::= Designator2 T_LBRACKET Expr T_RBRACKET 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator2_Array (_1, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(58/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // Designator2 ::= Designator2 T_DOT T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator2_Dot (_1, _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(58/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // Designator ::= Designator2 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(57/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // Designator ::= IncDecOpPre Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operator _1 = (Operator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoUnaryExpr (_1, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(57/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // Designator ::= T_LPAREN DecoratedType T_RPAREN Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoTypeCast(_1, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(57/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // Designator ::= T_SIZEOF T_LPAREN Type OptArrayList T_RPAREN 
            {
              STO RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        if (_3 != null)
                            RESULT = ((MyParser) parser).DoSizeOfTypeArray(_2, _3);
                        else
                            RESULT = ((MyParser) parser).DoSizeOfType(_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(57/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // Designator ::= T_SIZEOF T_LPAREN Designator T_RPAREN 
            {
              STO RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = ((MyParser) parser).DoSizeOfSTO(_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(57/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // Designator ::= T_NOT Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoUnaryExpr (new NotOp(), _1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(57/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // Designator ::= UnarySign Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operator _1 = (Operator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        //if (_1.equals("-")) _2.setNegative();
                        RESULT = ((MyParser) parser).DoUnaryExpr (_1, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(57/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // Designator ::= T_AMPERSAND Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator1_Ampersand(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(57/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // Designator ::= T_STAR Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator1_Star(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(57/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // IncDecOpPost ::= T_MINUSMINUS 
            {
              Operator RESULT = null;
		
                        RESULT = new DecOp(false);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(44/*IncDecOpPost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // IncDecOpPost ::= T_PLUSPLUS 
            {
              Operator RESULT = null;
		
                        RESULT = new IncOp(false);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(44/*IncDecOpPost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // IncDecOpPre ::= T_MINUSMINUS 
            {
              Operator RESULT = null;
		
                        RESULT = new DecOp(true);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(43/*IncDecOpPre*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // IncDecOpPre ::= T_PLUSPLUS 
            {
              Operator RESULT = null;
		
                        RESULT = new IncOp(true);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(43/*IncDecOpPre*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // BitwiseOp ::= T_CARET 
            {
              Operator RESULT = null;
		
                        RESULT = new BwXorOp();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(42/*BitwiseOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // BitwiseOp ::= T_BAR 
            {
              Operator RESULT = null;
		
                        RESULT = new BwOrOp();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(42/*BitwiseOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // BitwiseOp ::= T_AMPERSAND 
            {
              Operator RESULT = null;
		
                        RESULT = new BwAndOp();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(42/*BitwiseOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // MulOp ::= T_MOD 
            {
              Operator RESULT = null;
		
                        RESULT = new ModOp();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(40/*MulOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // MulOp ::= T_SLASH 
            {
              Operator RESULT = null;
		
                        RESULT = new SlashOp();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(40/*MulOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // MulOp ::= T_STAR 
            {
              Operator RESULT = null;
		
                        RESULT = new StarOp();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(40/*MulOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // AddOp ::= T_MINUS 
            {
              Operator RESULT = null;
		
                        RESULT = new MinusOp();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(39/*AddOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // AddOp ::= T_PLUS 
            {
              Operator RESULT = null;
		
                        RESULT = new AddOp();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(39/*AddOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // Relation ::= T_GTE 
            {
              Operator RESULT = null;
		
                        RESULT = new GTEOp();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(41/*Relation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // Relation ::= T_LTE 
            {
              Operator RESULT = null;
		
                        RESULT = new LTEOp();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(41/*Relation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // Relation ::= T_GT 
            {
              Operator RESULT = null;
		
                        RESULT = new GTOp();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(41/*Relation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // Relation ::= T_LT 
            {
              Operator RESULT = null;
		
                        RESULT = new LTOp();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(41/*Relation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // Equality ::= T_NEQ 
            {
              Operator RESULT = null;
		
                        RESULT = new NEQOp();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(45/*Equality*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // Equality ::= T_EQU 
            {
              Operator RESULT = null;
		
                        RESULT = new EQUOp();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(45/*Equality*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // Expr6 ::= Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(56/*Expr6*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // Expr6 ::= Expr6 MulOp Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operator _2 = (Operator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, _2, _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(56/*Expr6*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // Expr5 ::= Expr6 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(55/*Expr5*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // Expr5 ::= Expr5 AddOp Expr6 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operator _2 = (Operator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, _2, _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(55/*Expr5*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // Expr4 ::= Expr5 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(54/*Expr4*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // Expr4 ::= Expr4 Relation Expr5 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operator _2 = (Operator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, _2, _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(54/*Expr4*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // Expr3 ::= Expr4 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(53/*Expr3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // Expr3 ::= Expr3 Equality Expr4 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operator _2 = (Operator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, _2, _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(53/*Expr3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // Expr2_2 ::= Expr3 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(52/*Expr2_2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // Expr2_2 ::= Expr2_2 T_AMPERSAND Expr3 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, new BwAndOp(), _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(52/*Expr2_2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // Expr2_1 ::= Expr2_2 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(51/*Expr2_1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // Expr2_1 ::= Expr2_1 T_CARET Expr2_2 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, new BwXorOp(), _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(51/*Expr2_1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // Expr2 ::= Expr2_2 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(50/*Expr2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // Expr2 ::= Expr2 T_BAR Expr2_1 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, new BwOrOp(), _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(50/*Expr2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Expr1 ::= Expr2 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(49/*Expr1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // Expr1 ::= Expr1 T_AND NT$29 Expr2 
            {
              STO RESULT = null;
              // propagate RESULT from NT$29
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (STO) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, new AndOp(), _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(49/*Expr1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // NT$29 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoShortCircuitLHS(_1, new AndOp());
                    
              CUP$parser$result = new java_cup.runtime.Symbol(113/*NT$29*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // Expr0 ::= Expr1 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(48/*Expr0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // Expr0 ::= Expr0 T_OR NT$28 Expr1 
            {
              STO RESULT = null;
              // propagate RESULT from NT$28
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (STO) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, new OrOp(), _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(48/*Expr0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // NT$28 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoShortCircuitLHS(_1, new OrOp());
                    
              CUP$parser$result = new java_cup.runtime.Symbol(112/*NT$28*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // Expr ::= Expr0 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(47/*Expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Expr ::= Designator T_ASSIGN Expr 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoAssignExpr (_1, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(47/*Expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ExprList ::= ExprList T_COMMA Expr 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                        RESULT.addElement(_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(83/*ExprList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ExprList ::= Expr 
            {
              Vector RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new Vector();
                        RESULT.addElement(_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(83/*ExprList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // OptExprList ::= 
            {
              Vector RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(82/*OptExprList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // OptExprList ::= ExprList 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new Vector(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(82/*OptExprList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // ConstExpr ::= Expr 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(61/*ConstExpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // WritePair ::= T_ENDL 
            {
              Object RESULT = null;
		
                        ((MyParser) parser).DoEndLine();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(33/*WritePair*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // WritePair ::= Expr 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                        ((MyParser) parser).DoWritePair(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(33/*WritePair*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // WritePairList ::= WritePairList T_OSTREAM WritePair 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                        RESULT.addElement(_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(69/*WritePairList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // WritePairList ::= WritePair 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new Vector();
                        RESULT.addElement(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(69/*WritePairList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // WriteStmt ::= T_COUT T_OSTREAM WritePairList T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        ((MyParser) parser).DoWriteStmt(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(32/*WriteStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ReadStmt ::= T_CIN T_ISTREAM Designator T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        ((MyParser) parser).DoReadStmt(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(31/*ReadStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ReturnStmt ::= T_RETURN Expr T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        ((MyParser) parser).DoReturnStmt(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(30/*ReturnStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // ReturnStmt ::= T_RETURN T_SEMI 
            {
              Object RESULT = null;
		
                         ((MyParser) parser).DoVoidReturnStmt();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(30/*ReturnStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ExitStmt ::= T_EXIT T_LPAREN Expr T_RPAREN T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        ((MyParser) parser).DoExitStmt(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(29/*ExitStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ContinueStmt ::= T_CONTINUE NT$27 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$27
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(28/*ContinueStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // NT$27 ::= 
            {
              Object RESULT = null;

                        ((MyParser) parser).DoContinueStmt();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(111/*NT$27*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // BreakStmt ::= T_BREAK NT$26 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$26
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(27/*BreakStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // NT$26 ::= 
            {
              Object RESULT = null;

                        // System.out.println("T_Break. In loop: " + ((MyParser) parser).inLoop() );
                        ((MyParser) parser).DoBreakStmt();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(110/*NT$26*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ForeachStmt ::= T_FOREACH T_LPAREN Type OptRef T_ID T_COLON Expr T_RPAREN NT$25 CodeBlock 
            {
              Object RESULT = null;
              // propagate RESULT from NT$25
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Boolean _4 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                        ((MyParser) parser).closeLoop();
                        ((MyParser) parser).DoBlockClose();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(25/*ForeachStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // NT$25 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Boolean _4 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoBlockOpen();

                        ((MyParser) parser).DoForEachStmt(_1, _2, _3, _4);

                        ((MyParser) parser).openLoop();

                    
              CUP$parser$result = new java_cup.runtime.Symbol(109/*NT$25*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // WhileStmt ::= T_WHILE NT$23 Expr NT$24 CodeBlock 
            {
              Object RESULT = null;
              // propagate RESULT from NT$23
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
              // propagate RESULT from NT$24
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        ((MyParser) parser).closeLoop();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(26/*WhileStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // NT$24 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).checkConditionalExpr(_1, "while");
                        ((MyParser) parser).openLoop();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(108/*NT$24*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // NT$23 ::= 
            {
              Object RESULT = null;

                        ((MyParser) parser).doWhile_1();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(107/*NT$23*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // OptElse ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*OptElse*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // OptElse ::= T_ELSE CodeBlock 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*OptElse*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // IfStmt ::= T_IF Expr NT$21 CodeBlock NT$22 OptElse 
            {
              Object RESULT = null;
              // propagate RESULT from NT$21
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
              // propagate RESULT from NT$22
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
                        ((MyParser) parser).doIfElseBlock();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(21/*IfStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // NT$22 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

                        ((MyParser) parser).doIfCodeBlock();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(106/*NT$22*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // NT$21 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).checkConditionalExpr(_1, "if");
                    
              CUP$parser$result = new java_cup.runtime.Symbol(105/*NT$21*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CtorCall ::= T_COLON T_LPAREN OptExprList T_RPAREN 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        if (_1 == null) {
                            RESULT = new Vector();
                            STO empty = new VarSTO("empty ctor call");
                            RESULT.addElement(empty);
                         }
                        else
                            RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(73/*CtorCall*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // OptCtorCall ::= 
            {
              Vector RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(72/*OptCtorCall*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // OptCtorCall ::= CtorCall 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(72/*OptCtorCall*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // DeleteStmt ::= T_DELETE Designator T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        ((MyParser) parser).DoDeleteStmt(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(24/*DeleteStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NewStmt ::= T_NEW Designator OptCtorCall T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        ((MyParser) parser).DoNewStmt(_1, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(23/*NewStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OptInit ::= 
            {
              STO RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(62/*OptInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OptInit ::= T_ASSIGN Expr 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(62/*OptInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OptRef ::= 
            {
              Boolean RESULT = null;
		
                        RESULT = false;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(37/*OptRef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OptRef ::= T_AMPERSAND 
            {
              Boolean RESULT = null;
		
                        RESULT = true;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(37/*OptRef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ParamDecl ::= Type OptRef T_ID NT$20 OptArrayList 
            {
              STO RESULT = null;
              // propagate RESULT from NT$20
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (STO) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Boolean _2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        if (_4 != null)
                            RESULT = ((MyParser) parser).DoArrayParam(_3, _1, _4);
                        if (_2) ((STO)RESULT).setReference();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(60/*ParamDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NT$20 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean _2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        RESULT = new VarSTO(_3, _1);
                        if (_2) ((STO)RESULT).setReference();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(104/*NT$20*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ParamList ::= ParamList T_COMMA ParamDecl 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                        RESULT.addElement (_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(81/*ParamList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ParamList ::= ParamDecl 
            {
              Vector RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new Vector ();
                        RESULT.addElement (_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(81/*ParamList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OptParamList ::= 
            {
              Vector RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(80/*OptParamList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OptParamList ::= ParamList 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new Vector(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(80/*OptParamList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Stmt ::= DeleteStmt 
            {
              Object RESULT = null;
		 RESULT = "DeleteStmt"; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Stmt ::= NewStmt 
            {
              Object RESULT = null;
		 RESULT = "NewStmt"; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Stmt ::= WriteStmt 
            {
              Object RESULT = null;
		 RESULT = "WriteStmt"; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Stmt ::= ReadStmt 
            {
              Object RESULT = null;
		 RESULT = "ReadStmt"; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Stmt ::= ReturnStmt 
            {
              Object RESULT = null;
		 RESULT = "ReturnStmt"; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Stmt ::= ExitStmt 
            {
              Object RESULT = null;
		 RESULT = "ExitStmt"; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Stmt ::= ContinueStmt 
            {
              Object RESULT = null;
		 RESULT = "ContinueStmt"; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Stmt ::= BreakStmt 
            {
              Object RESULT = null;
		 RESULT = "BreakStmt"; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Stmt ::= ForeachStmt 
            {
              Object RESULT = null;
		 RESULT = "ForeachStmt"; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Stmt ::= WhileStmt 
            {
              Object RESULT = null;
		 RESULT = "WhileStmt"; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Stmt ::= IfStmt 
            {
              Object RESULT = null;
		 RESULT = "IfStmt"; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Stmt ::= Expr T_SEMI 
            {
              Object RESULT = null;
		 RESULT = "Expr"; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Stmt ::= CodeBlock 
            {
              Object RESULT = null;
		 RESULT = "CodeBlock"; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Stmt ::= ConstDecl 
            {
              Object RESULT = null;
		 RESULT = "ConstDecl"; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Stmt ::= VarDecl 
            {
              Object RESULT = null;
		 RESULT = "VarDecl"; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // StmtList ::= StmtList Stmt 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                        RESULT.addElement(_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(79/*StmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // StmtList ::= Stmt 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new Vector();
                        RESULT.addElement(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(79/*StmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OptStmtList ::= 
            {
              Vector RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(78/*OptStmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OptStmtList ::= StmtList 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new Vector(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(78/*OptStmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CodeBlock ::= T_LBRACE NT$18 OptStmtList NT$19 T_RBRACE 
            {
              Object RESULT = null;
              // propagate RESULT from NT$18
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
              // propagate RESULT from NT$19
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*CodeBlock*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$19 ::= 
            {
              Object RESULT = null;
 ((MyParser) parser).DoBlockClose(); 
              CUP$parser$result = new java_cup.runtime.Symbol(103/*NT$19*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$18 ::= 
            {
              Object RESULT = null;
 ((MyParser) parser).DoBlockOpen(); 
              CUP$parser$result = new java_cup.runtime.Symbol(102/*NT$18*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Array ::= T_LBRACKET ConstExpr T_RBRACKET 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(35/*Array*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ArrayList ::= ArrayList Array 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                        RESULT.addElement(_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(77/*ArrayList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ArrayList ::= Array 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new Vector();
                        RESULT.addElement(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(77/*ArrayList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OptArrayList ::= 
            {
              Vector RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(76/*OptArrayList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OptArrayList ::= ArrayList 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(76/*OptArrayList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Pointer ::= T_STAR 
            {
              Object RESULT = null;
		
                        RESULT = "*";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(34/*Pointer*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PointerList ::= PointerList Pointer 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                        RESULT.addElement(_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(71/*PointerList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // PointerList ::= Pointer 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new Vector();
                        RESULT.addElement(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(71/*PointerList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OptPointerList ::= 
            {
              Vector RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(70/*OptPointerList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OptPointerList ::= PointerList 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                        //System.out.println(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(70/*OptPointerList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ReturnType ::= T_VOID 
            {
              Type RESULT = null;
		
                        RESULT = new VoidType();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(68/*ReturnType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ReturnType ::= Type 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(68/*ReturnType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // StructType ::= T_ID_U 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                       RESULT = ((MyParser) parser).DoStructType_ID (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(65/*StructType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // BasicType ::= T_BOOL 
            {
              Type RESULT = null;
		
                        RESULT = new BoolType();  // BoolType
                    
              CUP$parser$result = new java_cup.runtime.Symbol(63/*BasicType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // BasicType ::= T_FLOAT 
            {
              Type RESULT = null;
		
                        RESULT = new FloatType();  // FloatType
                    
              CUP$parser$result = new java_cup.runtime.Symbol(63/*BasicType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // BasicType ::= T_INT 
            {
              Type RESULT = null;
		
                        RESULT = new IntType();  // IntType
                    
              CUP$parser$result = new java_cup.runtime.Symbol(63/*BasicType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DecoratedBasicType ::= BasicType OptPointerList 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        if (_2 != null)
                            RESULT = ((MyParser) parser).DoDecoratedPointerType(_1, _2);
                        else
                            RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(64/*DecoratedBasicType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DecoratedType ::= StructType PointerList 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        if (_2 != null)
                            RESULT = ((MyParser) parser).DoDecoratedPointerType(_1, _2);
                        else
                            RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(67/*DecoratedType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DecoratedType ::= DecoratedBasicType 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(67/*DecoratedType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Type ::= StructType 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(66/*Type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Type ::= DecoratedType 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(66/*Type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FuncDecl ::= T_EXTERN T_FUNCTION T_COLON ReturnType T_ID NT$16 T_LPAREN OptParamList T_RPAREN NT$17 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$16
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
              // propagate RESULT from NT$17
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*FuncDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$17 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoFormalParams(_4, _3);
                        ((MyParser) parser).DoFuncDecl_2();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(101/*NT$17*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$16 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).DoFuncDecl_1(_3, _1, false);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(100/*NT$16*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FuncDef ::= T_FUNCTION T_COLON ReturnType OptRef T_ID NT$13 T_LPAREN OptParamList T_RPAREN NT$14 T_LBRACE OptStmtList NT$15 T_RBRACE 
            {
              Object RESULT = null;
              // propagate RESULT from NT$13
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
              // propagate RESULT from NT$14
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
              // propagate RESULT from NT$15
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Boolean _2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _5 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*FuncDef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$15 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Boolean _2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _5 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).DoReturnCheck(_5);
                        ((MyParser) parser).DoFuncDecl_2();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(99/*NT$15*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$14 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Boolean _2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoFormalParams(_4, _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(98/*NT$14*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$13 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean _2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).SaveLineNum ();
                        ((MyParser) parser).DoFuncDecl_1(_3, _1, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(97/*NT$13*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FieldFuncDecl ::= FuncDef 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*FieldFuncDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FieldFuncsList ::= FieldFuncsList FieldFuncDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*FieldFuncsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FieldFuncsList ::= FieldFuncDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*FieldFuncsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OptFieldFuncsList ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*OptFieldFuncsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OptFieldFuncsList ::= FieldFuncsList 
            {
              Object RESULT = null;
		

                    
              CUP$parser$result = new java_cup.runtime.Symbol(16/*OptFieldFuncsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DtorDef ::= T_TILDE T_ID_U NT$12 T_LPAREN T_RPAREN T_LBRACE OptStmtList T_RBRACE 
            {
              Object RESULT = null;
              // propagate RESULT from NT$12
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		
                        ((MyParser) parser).DoFuncDecl_2();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(12/*DtorDef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$12 ::= 
            {
              Object RESULT = null;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).SaveLineNum ();
                        ((MyParser) parser).DoFuncDecl_1("~" + _3, new VoidType(), false);
                        ((MyParser) parser).DoFormalParams(new Vector(), "~" + _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(96/*NT$12*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CtorDef ::= T_ID_U NT$10 T_LPAREN OptParamList T_RPAREN NT$11 T_LBRACE OptStmtList T_RBRACE 
            {
              Object RESULT = null;
              // propagate RESULT from NT$10
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
              // propagate RESULT from NT$11
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
                        ((MyParser) parser).DoFuncDecl_2();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(11/*CtorDef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$11 ::= 
            {
              Object RESULT = null;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoFormalParams(_4, _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(95/*NT$11*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$10 ::= 
            {
              Object RESULT = null;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).SaveLineNum ();
                        ((MyParser) parser).DoFuncDecl_1(_3, new VoidType(), false);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(94/*NT$10*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CtorDtorDecl ::= DtorDef 
            {
              Object RESULT = null;
		
                        RESULT = "dtor";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(15/*CtorDtorDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CtorDtorDecl ::= CtorDef 
            {
              Object RESULT = null;
		
                        RESULT = "ctor";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(15/*CtorDtorDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CtorDtorList ::= CtorDtorList CtorDtorDecl 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                        RESULT.addElement(_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(75/*CtorDtorList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CtorDtorList ::= CtorDtorDecl 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new Vector();
                        RESULT.addElement(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(75/*CtorDtorList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OptCtorDtorList ::= 
            {
              Vector RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(74/*OptCtorDtorList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OptCtorDtorList ::= CtorDtorList 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(74/*OptCtorDtorList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FieldVarDecl ::= DecoratedType T_ID OptArrayList T_SEMI 
            {
              Object RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        if ( _4 != null)
                            ((MyParser) parser).DoArrayDecl (_3, _2, _4, false, null);
                        else
                            ((MyParser) parser).DoVarDecl (_3, _2, null, false);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(14/*FieldVarDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FieldVarsList ::= FieldVarsList FieldVarDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*FieldVarsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FieldVarsList ::= FieldVarDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*FieldVarsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // StructdefDecl ::= T_STRUCTDEF T_ID_U T_LBRACE NT$7 FieldVarsList OptCtorDtorList NT$8 OptFieldFuncsList NT$9 T_RBRACE T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$7
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
              // propagate RESULT from NT$8
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
              // propagate RESULT from NT$9
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Vector _2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*StructdefDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$9 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

                        ((MyParser) parser).DoStructBlockClose(_1);
                        // ((MyParser) parser).DoStructdefDecl (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(93/*NT$9*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$8 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        // Put logic here to create default ctor if needed
                        ((MyParser) parser).DoDefaultCtor(_1);
                        ((MyParser) parser).DoCtor_2(_1, null);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(92/*NT$8*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$7 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoStructBlockOpen(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(91/*NT$7*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OptStatic ::= 
            {
              Boolean RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(38/*OptStatic*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OptStatic ::= T_STATIC 
            {
              Boolean RESULT = null;
		
                        RESULT = true;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(38/*OptStatic*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ConstDecl ::= OptStatic T_CONST T_AUTO T_ID T_ASSIGN ConstExpr NT$6 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$6
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Boolean _1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _5 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*ConstDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$6 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Boolean _1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _5 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        if (_1 == null) _1 = false;

                        ((MyParser) parser).DoAutoConstDecl(_3, _5, _1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(90/*NT$6*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ConstDecl ::= OptStatic T_CONST BasicType T_ID T_ASSIGN ConstExpr NT$5 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$5
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Boolean _1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _5 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*ConstDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$5 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Boolean _1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _5 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        if (_1 == null) _1 = false;

                        ((MyParser) parser).DoConstDecl (_2, _3, _5, _1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(89/*NT$5*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VarDecl ::= OptStatic StructType T_ID OptArrayList OptCtorCall NT$4 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$4
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Boolean _1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _5 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$4 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Boolean _1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _5 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        if (_1 == null) _1 = false;

                        if (_4 != null)
                            ((MyParser) parser).DoStructArrayInst (_3, _2, _5, _4, _1);
                        else
                            ((MyParser) parser).DoStructInst (_3, _2, _5, _1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(88/*NT$4*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VarDecl ::= OptStatic T_AUTO T_ID T_ASSIGN Expr NT$3 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$3
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Boolean _1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _5 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$3 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Boolean _1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _5 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        if (_1 == null) _1 = false;

                        ((MyParser) parser).DoAutoVarDecl(_3, _5, _1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(87/*NT$3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VarDecl ::= OptStatic DecoratedType T_ID OptArrayList OptInit NT$2 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$2
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Boolean _1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _5 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$2 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Boolean _1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _5 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        if (_1 == null) _1 = false;

                        if ( _4 != null)
                            ((MyParser) parser).DoArrayDecl (_3, _2, _4, _1, null);
                        else
                            ((MyParser) parser).DoVarDecl (_3, _2, _5, _1);

                    
              CUP$parser$result = new java_cup.runtime.Symbol(86/*NT$2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ExternDecl ::= T_EXTERN DecoratedBasicType T_ID OptArrayList NT$1 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$1
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*ExternDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$1 ::= 
            {
              Object RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).DoExternDecl (_3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(85/*NT$1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // GlobalDecl ::= FuncDef 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // GlobalDecl ::= FuncDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // GlobalDecl ::= StructdefDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // GlobalDecl ::= ConstDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // GlobalDecl ::= VarDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // GlobalDecl ::= ExternDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // GlobalDecls ::= GlobalDecls GlobalDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*GlobalDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // GlobalDecls ::= GlobalDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*GlobalDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // OptGlobalDecls ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*OptGlobalDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // OptGlobalDecls ::= GlobalDecls 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*OptGlobalDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= NT$0 OptGlobalDecls 
            {
              Object RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        ((MyParser) parser).DoProgramEnd();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT = null;

                        ((MyParser) parser).DoProgramStart();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(84/*NT$0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

