function : int someVal() {
    return 5;
}

structdef MYS1 {
    int i;
    float f;
    bool b;
    MYS1 * next;
    MYS1() {
        this.i = 5;
        this.f = 5;
    }
    MYS1(bool boop) {
        this.i = 10;
        this.f = 5.5;
        this.b = boop;
    }
    MYS1(float floop) {
        this.f = floop;
    }
    MYS1(int a, float b, bool c) {
        this.i = a;
        this.f = b;
        this.b = c;
    }
    ~MYS1() {
        this.i = 0;
    }
    function : void fun1() {}
    function : void fun1(int i) {}
    function : float fun1(float f) { return f; }
    function : float fun2() { return this.f; }
    function : int fun3() { return this.i; }
};

structdef MYS2 {
    int i;
    float f;
    bool b;
};

int intVar = 5;
float floatVar = 5.5;
bool boolVar = true;

int temptemp = intVar;

const int cgInt = 5;
const float cgFloat = 5.5;
const bool cgBool = false;

int * intPtr;
float * floatPtr;
bool * boolPtr;

static int * stintPtr;
static float * stfloatPtr;
static bool * stboolPtr;

int * arr1[5];
int arr2[5];

MYS1 stru1;
MYS1 stoooooper[5];
MYS1 * struPtr1;
MYS1 * struPtr2 = &stru1;

int xtraTest = arr2[0];
int xtraTest2 = stru1.fun3();

int * myPtr1 = &intVar;

function : void typeCasts() {
    int intVar = 5;
    float floatVar = 5.5;
    bool boolVar = true;

    int * intPtr = &intVar;

    int test1 = (int) boolVar;
    float test2 = (float) boolVar;
    int * test3 = (int * ) boolVar;

    bool test4 = (bool) intVar;
    bool test5 = (bool) floatVar;
    bool test6 = (bool) intPtr;

    int test7 = (int) floatVar;
    int * test8 = (int *) floatVar;

    float test9 = (float) intVar;
    float test10 = (float) intPtr;

    int test11 = (int) intPtr;
    int * test12 = (int *) intVar;

    int test13 = (int) intVar;
    float test14 = (float) floatVar;
    bool test15 = (bool) boolVar;
    int * test16 = (int *) intPtr;
}


function : void someStructs() {
    MYS1 s1;
    MYS2 s2;

    exit(0);

    MYS1 s3;

    return;

    MYS2 s4;

    MYS1 * sptr1 = &s1;
    delete sptr1;
}

static int statA = 5;
function : void staticjesus () {
    int intVar = 10;
    MYS1 myStruct;

    static int statA = 10;
    static int statB;
    static int statC = intVar;
    static int statC_2 = intVar + intVar;
    static int statC_3 = someVal();
    static int statD[5];
    static MYS1 statE : ();
    static MYS1 statF;
    static MYS1 statF_1 : (5, 5.5, true);
    static MYS1 statG[2];
    MYS1 statG_2[2];
    static MYS1 statH[1] : (5, 5.5, true);
    static int * statI = &intVar;
    static int statJ = *myPtr1;
    static int statK = struPtr2->fun3();

    int temp = statA + statB;

    statA = 50;
    statB = 500;

    int * ptr = &statA;
    ptr = &statB;
}

function : void func1 (int & arr[5]) {
    arr[1] = 5;
}

function : void func2 (MYS1 & struParam) {
    struParam.i = 69;
    struParam.fun3();
}

function : void func3 (int & a, float & b, bool & c) {
    a = 69;
    b = a;
    c = false;
}

function : void func4 (int* a, float* b, bool* c, int* & arr[5], MYS1* struPtr) {
    *a = 6969;
    *b = *a;
    *c = true;
    foreach (int * ptr : arr) {
        ptr = a;
    }
    struPtr->fun2();
    new struPtr : ();
    delete struPtr;
}

function : void func5 (int* & a, float* & b, bool* & c, MYS1* & struPtr) {
    cout << "asdf " << struPtr->fun3() << endl;

    a = &intVar;
    b = &floatVar;
    c = &boolVar;
    struPtr = &stru1;
    struPtr = struPtr1;
}
function : float func5_1 () {
    int a;
    int b;
    return 5;
}

function : int * func6 (int * a) {
    int * ptr = a;
    return ptr;
}
function : float * func6 (float * a) {
    float * ptr = a;
    return ptr;
}
function : bool * func6 (bool * a) {
    bool * ptr = a;
    return ptr;
}
function : MYS1 * func6 (MYS1 * a) {
    MYS1 * ptr = a;
    return ptr;
}

function : int & func7 (int * ptr) {
    return *ptr;
}
function : int & func7 (int & a) {
    return a;
}
function : int func7 (int * intPtr, float f) {
    return *intPtr;
}
function : int & func7 () {
    return intVar;
}
function : float & func7 (float & f) {
    return f;
}
function : MYS1 & func7 (MYS1 & a) {
    return a;
}
function : MYS1 & func7 (MYS1 * a) {
    return *a;
}
function : int * & func8 (int * ptr) {
    return ptr;
}
function : int * & func8 (int ** ptr) {
    return *ptr;
}

function : void passbyjesus() {
    int arr[5];
    arr[1] = 3;
    func1(arr);
    cout << arr[1] << endl;

    MYS1 stru1;
    func2(stru1);
    cout << stru1.i << endl;

    int a;
    float b;
    bool c;
    func3(a, b, c);
    cout << a << " " << b << " " << c << endl;

    int * intPtr = &a;
    float * floatPtr = &b;
    bool * boolPtr = &c;
    int * ptrArr[5];
    MYS1 * struPtr = &stru1;

    func4(intPtr, floatPtr, boolPtr, ptrArr, struPtr);
    func4(&a, &b, &c, ptrArr, &stru1);

    func5(intPtr, floatPtr, boolPtr, struPtr);

    func7(intVar) = 5;
    func7(intPtr) = 10;

    intVar = func7(intVar) + 10;

    func7(::intVar) = 15;

    func7(stru1) = stru1;
    struPtr = &stru1;
    func7(struPtr) = stru1;
    func8(intPtr) = &intVar;

    intPtr = func6(&a);
    intPtr = func6(intPtr);
    floatPtr = func6(&b);
    floatPtr = func6(floatPtr);
    boolPtr = func6(&c);
    boolPtr = func6(boolPtr);
    struPtr = func6(&stru1);
    struPtr = func6(struPtr);
}

function : void heapjesus() {
    int * ptr1;

    new ptr1;
    *ptr1 = 10;
}

function : void main () {
    passbyjesus();
    heapjesus();
    staticjesus();
    someStructs();
    typeCasts();

    int intVar = 5;
    float floatVar = 5.5;
    bool boolVar = true;

    int * intPtr;
    float * floatPtr;
    bool * boolPtr;

    int * arr[5];
    int intArr[5];
    intPtr = &intVar;
    arr[1] = intPtr;
    *arr[1] = 5;

    MYS1 stru2;
    MYS1 stru3;
    MYS1 * struPtr1;
    struPtr1 = ::struPtr2;
    struPtr1 = &stru1;
    struPtr1 = &stru2;

    struPtr1 = &stru1;
    stru2 = *struPtr1;
    *struPtr2 = *struPtr1;
    struPtr2 = &stru3;
    (*struPtr1).i = 5;

    struPtr1->i = 0;
    int strupper = 5 + struPtr1->fun3();
    float strupper2 = 5 + struPtr1->fun1(5.5);

    delete struPtr1;

    new intPtr;
    new struPtr1 : ();
    new struPtr1 : (5.5);
    new struPtr2 : (5, 5.5, true);
    new ::struPtr1;

    delete intPtr;
    delete struPtr1;
    delete struPtr2;
    delete ::struPtr1;

    exit(0);

    intPtr = &intVar;
    intPtr = &intArr[3];
    intPtr = &::intVar;

    int intVar2 = 10;
    int intVar3 = 15;
    int * ptr1 = &intVar;
    int * ptr2 = &intVar;
    int * ptr3 = &intVar2;
    int * ptr4 = &::intVar;
    int * ptr5 = &intVar3;

    bool booltest = ptr1 == ptr2;
    booltest = ptr1 == ptr3;
    booltest = ptr1 != ptr2;
    booltest = ptr1 != ptr3;
    booltest = ptr4 == myPtr1;
    booltest = ptr3 == myPtr1;
    booltest = ptr2 != myPtr1;

    booltest = ptr3++ == ptr5;
    ptr3--;
    ptr5--;
    booltest = ptr3 == ptr5;

    ptr1 = nullptr;
    ptr2 = nullptr;

    struPtr1++;

    int * p1;
    int * p2;
    p1 = p2;

    int ** pptr = &intPtr;
    ptr2 = *pptr;
    int ***ppptr = &pptr;
    ptr2 = **ppptr;

    intVar = intPtr[0];
    intPtr[0] = intVar2;


    intPtr = &intVar;
    foreach (int * looper : arr1) {
        looper = &intVar;
        intVar++;
        *looper = intVar;
        cout << *looper << " " << *intPtr << endl;
    }



}
